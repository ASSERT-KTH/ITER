bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(this.serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(this.serializedName);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(this.serializedName);	  ObjectConstructor    <    T>    constructor    =    raw.get(raw);    	non-compiled	[CE]  cannot  find  symbol  serializedName	111	None	replace
2	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(type,  raw);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(type,  raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(raw);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
3	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.construct(type);	  ObjectConstructor    <    T>    constructor    =    context.construct(raw);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
4	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(gson);  [CE]  cannot  find  symbol  context  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.construct(gson);	  ObjectConstructor    <    T>    constructor    =    context.construct(raw);    	non-compiled	[CE]  cannot  find  symbol  context	58	None	replace
5	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.construct(raw);  [CE]  cannot  find  symbol  scope  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.construct(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.construct(raw);	  ObjectConstructor    <    T>    constructor    =    context.construct(raw);    	non-compiled	[CE]  cannot  find  symbol  scope	58	None	replace
6	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(raw);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.construct(raw);	  ObjectConstructor    <    T>    constructor    =    context.construct(raw);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
7	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(this);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(this);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.construct(this);	  ObjectConstructor    <    T>    constructor    =    context.construct(raw);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
8	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(this.constructorConstructor);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(this.constructorConstructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.construct(this.constructorConstructor);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.construct(raw);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
9	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.constructorConstructor();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.constructorConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.constructorConstructor();	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.construct(raw);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
10	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.constructorConstructor.construct(this);  [CE]  cannot  find  symbol  constructorConstructor  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.constructorConstructor.construct(this);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.constructorConstructor.construct(this);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.construct(raw);    	non-compiled	[CE]  cannot  find  symbol  constructorConstructor	80	None	replace
11	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.constructorConstructor.construct(this.constructor);  [CE]  cannot  find  symbol  constructor  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.constructorConstructor.construct(this.constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.constructorConstructor.construct(this.constructor);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.construct(raw);    	non-compiled	[CE]  cannot  find  symbol  constructor	80	None	replace
12	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.construct(gson,  raw);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.construct(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.construct(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.construct(raw);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
13	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.construct(raw,  type);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.construct(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.construct(raw,  type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.construct(raw);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
14	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.constructorConstructor(this.constructorConstructor);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.constructorConstructor(this.constructorConstructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.constructorConstructor(this.constructorConstructor);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.construct(raw);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  TypeAdapter  <  T>());  [CE]  cannot  find  symbol  compiler  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  type,  new  TypeAdapter  <  T>());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  type,  new  TypeAdapter  <  T>());	  NodeTraversal.traverse(compiler,    gson,    new    TypeAdapter    <    T>());    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  raw);  [CE]  cannot  find  symbol  compiler  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  raw);	  NodeTraversal.traverse(compiler,    gson,    new    TypeAdapter    <    T>());    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  type,  new  TypeAdapter  <  T>());  [CE]  cannot  find  symbol  compiler  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  type,  new  TypeAdapter  <  T>());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  type,  new  TypeAdapter  <  T>());	  NodeTraversal.traverse(compiler,    gson,    new    TypeAdapter    <    T>());    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  raw,  new  TypeAdapter  <  T>());  [CE]  cannot  find  symbol  compiler  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  raw,  new  TypeAdapter  <  T>());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  raw,  new  TypeAdapter  <  T>());	  NodeTraversal.traverse(compiler,    gson,    new    TypeAdapter    <    T>());    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  type);  [CE]  cannot  find  symbol  compiler  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  type);	  NodeTraversal.traverse(compiler,    gson,    new    TypeAdapter    <    T>());    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  raw,  new  TypeAdapter  <  T>());  [CE]  cannot  find  symbol  compiler  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  raw,  new  TypeAdapter  <  T>());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  raw,  new  TypeAdapter  <  T>());	  NodeTraversal.traverse(compiler,    gson,    new    TypeAdapter    <    T>());    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
21	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(this.serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(this.serializedName);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(this.serializedName);	  ObjectConstructor    <    T>    constructor    =    type.get(constraint);    	non-compiled	[CE]  cannot  find  symbol  serializedName	13	None	replace
22	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(raf);  [CE]  cannot  find  symbol  raf  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(raf);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(raf);	  ObjectConstructor    <    T>    constructor    =    type.get(constraint);    	non-compiled	[CE]  cannot  find  symbol  raf	13	None	replace
23	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(new  TypeToken(constructor));  [CE]  no  suitable  constructor  found  for  TypeToken(ObjectConstructor<T>)  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(new  TypeToken(constructor));  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.construct(new  TypeToken(constructor));	  ObjectConstructor    <    T>    constructor    =    constructor.construct(new    TypeToken(type));    	non-compiled	[CE]  no  suitable  constructor  found  for  TypeToken(ObjectConstructor<T>)	106	None	replace
24	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(new  TypeToken(type));  [CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(new  TypeToken(type));  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.construct(new  TypeToken(type));	  ObjectConstructor    <    T>    constructor    =    constructor.construct(new    TypeToken(type));    	non-compiled	[CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)	106	None	replace
25	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct(new  TypeToken(type));  [CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct(new  TypeToken(type));  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.construct(new  TypeToken(type));	  ObjectConstructor    <    T>    constructor    =    constructor.construct(new    TypeToken(type));    	non-compiled	[CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)	106	None	replace
26	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(new  TypeToken(type),  raw);  [CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(new  TypeToken(type),  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(new  TypeToken(type),  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(new    TypeToken(type));    	non-compiled	[CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)	106	None	replace
27	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(new  TypeToken(type,  raw));  [CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>,Class<CAP#1>)  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(new  TypeToken(type,  raw));  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(new  TypeToken(type,  raw));	  ObjectConstructor    <    T>    constructor    =    constructor.construct(new    TypeToken(type));    	non-compiled	[CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>,Class<CAP#1>)	106	None	replace
28	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(new  TypeToken(type));  [CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(new  TypeToken(type));  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.construct(new  TypeToken(type));	  ObjectConstructor    <    T>    constructor    =    constructor.construct(new    TypeToken(type));    	non-compiled	[CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)	106	None	replace
29	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(new  TypeToken(raw,  type));  [CE]  no  suitable  constructor  found  for  TypeToken(Class<CAP#1>,TypeToken<T>)  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(new  TypeToken(raw,  type));  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(new  TypeToken(raw,  type));	  ObjectConstructor    <    T>    constructor    =    constructor.construct(new    TypeToken(type));    	non-compiled	[CE]  no  suitable  constructor  found  for  TypeToken(Class<CAP#1>,TypeToken<T>)	106	None	replace
30	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  gson.getRawType();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  gson.getRawType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  gson.getRawType();	  TypeToken    <    T>    constructor    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
31	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  type.getConstructorType();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  type.getConstructorType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  type.getConstructorType();	  TypeToken    <    T>    constructor    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
32	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  type.getFunctionType();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  type.getFunctionType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  type.getFunctionType();	  TypeToken    <    T>    constructor    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
33	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  type.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  type.getDeclaredType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  type.getDeclaredType();	  TypeToken    <    T>    constructor    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
34	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  type.getRawType(),  raw);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  type.getRawType(),  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  type.getRawType(),  raw);	  TypeToken    <    T>    constructor    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	20	None	replace
35	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(raw);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(raw);	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	74	None	replace
36	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(raw);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(raw);	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	74	None	replace
37	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(type  ==  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	add	ObjectConstructor  <  T>  constructor  =(type  ==  null)?  null  :  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    	compilable	  [FE]  ComparisonFailure  	74	1	replace
38	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(type  ==  null)?  null  :  this.constructorConstructor.get(type);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(type  ==  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(type  ==  null)?  null  :  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    	compilable	  [FE]  ComparisonFailure  	74	1	replace
39	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type,  raw);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type,  raw);	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	74	None	replace
40	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(raw,  type);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(raw,  type);	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	74	None	replace
41	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  serializedName);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  serializedName);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	104	None	replace
42	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  item);  [CE]  cannot  find  symbol  item  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  item);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  item);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    name);    	non-compiled	[CE]  cannot  find  symbol  item	104	None	replace
43	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  method);  [CE]  cannot  find  symbol  method  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  method);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  method);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    name);    	non-compiled	[CE]  cannot  find  symbol  method	104	None	replace
44	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  this.type.getConstructor();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  this.type.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  this.type.getConstructor();	  Constructor    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
45	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  TypeToken.getConstructor();  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  TypeToken.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  TypeToken.getConstructor();	  Constructor    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
46	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  type.getConstructor(raw);  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  type.getConstructor(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  type.getConstructor(raw);	  Constructor    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
47	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  type.constructor();  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  type.constructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  type.constructor();	  Constructor    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
48	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  types.getConstructor();  [CE]  cannot  find  symbol  [FE]                                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  types.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  types.getConstructor();	  Constructor    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
49	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct(constructor);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct(constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.construct(constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
50	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(gson);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.construct(gson);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
51	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  gson);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  gson);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	62	None	replace
52	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  scope);  [CE]  cannot  find  symbol  scope  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  scope);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  scope);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson);    	non-compiled	[CE]  cannot  find  symbol  scope	62	None	replace
53	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  null);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  null);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    null);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	105	None	replace
54	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  null);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  null);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    null);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	105	None	replace
55	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(raw,  type,  null);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(raw,  type,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(raw,  type,  null);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    null);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
56	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  raw,  null);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  raw,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  raw,  null);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    null);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	105	None	replace
57	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  null,  type);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  null,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  null,  type);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    null);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	105	None	replace
58	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(gson,  null);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(gson,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(gson,  null);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    null);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
59	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	78	None	add
60	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  this.constructorConstructor.get(type):  null;  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  this.constructorConstructor.get(type):  null;	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	78	None	add
61	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >>  null)?  this.constructorConstructor.get(type):  null;  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >>  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >>  null)?  this.constructorConstructor.get(type):  null;	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	78	None	add
62	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >=  null)?  this.constructorConstructor.get(type):  null;  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >=  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >=  null)?  this.constructorConstructor.get(type):  null;	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	78	None	add
63	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  ObjectConstructor  >=  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  [CE]  cannot  find  symbol  ObjectConstructor  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  ObjectConstructor  >=  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    ObjectConstructor  >=  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;	  	non-compiled	[CE]  cannot  find  symbol  ObjectConstructor	78	None	add
64	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  ObjectConstructor  <  T>  buildor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  ObjectConstructor  <  T>  buildor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    ObjectConstructor  <  T>  buildor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  null;	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	78	None	add
65	[BUG]  [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	final  Class  <?  super  T>  raw  =  type.getRawType();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	18	None	replace
66	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getSuperClass();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Class  <?  super  T>  raw  =  type.getSuperClass();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Class  <?  super  T>  raw  =  type.getSuperClass();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	18	None	replace
67	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawClass();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawClass();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Class  <?  super  T>  raw  =  type.getRawClass();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	18	None	replace
68	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(0);  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(0);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(0);	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	18	None	replace
69	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getSuperclass();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Class  <?  super  T>  raw  =  type.getSuperclass();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Class  <?  super  T>  raw  =  type.getSuperclass();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	18	None	replace
70	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getSuperType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Class  <?  super  T>  raw  =  type.getSuperType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Class  <?  super  T>  raw  =  type.getSuperType();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	18	None	replace
71	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  this.constructorConstructor.get(raw):  null;  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  this.constructorConstructor.get(raw):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  this.constructorConstructor.get(raw):  null;	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	79	None	replace
72	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(raw):  null;  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(raw):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(raw):  null;	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	79	None	replace
73	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	add	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  this.constructorConstructor.get(type):  null;	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    	compilable	  [FE]  NullPointerException  	79	9	replace
74	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  this.constructorConstructor.get(type):  null;  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  this.constructorConstructor.get(type):  null;	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    	compilable	  [FE]  NullPointerException  	79	9	replace
75	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(type  ==  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	add	ObjectConstructor  <  T>  constructor  =(type  ==  null)?  this.constructorConstructor.get(type):  null;	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    	compilable	  [FE]  NullPointerException  	79	9	replace
76	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(type  ==  null)?  this.constructorConstructor.get(type):  null;  [FE]  NullPointerException  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(type  ==  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(type  ==  null)?  this.constructorConstructor.get(type):  null;	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    	compilable	  [FE]  NullPointerException  	79	9	replace
77	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(raw  ==  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	add	ObjectConstructor  <  T>  constructor  =(raw  ==  null)?  this.constructorConstructor.get(type):  null;	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    	compilable	  [FE]  NullPointerException  	79	9	replace
78	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(raw  ==  null)?  this.constructorConstructor.get(type):  null;  [FE]  NullPointerException  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(raw  ==  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(raw  ==  null)?  this.constructorConstructor.get(type):  null;	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    	compilable	  [FE]  NullPointerException  	79	9	replace
79	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(type!=  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	add	ObjectConstructor  <  T>  constructor  =(type!=  null)?  this.constructorConstructor.get(type):  null;	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    	compilable	  [FE]  ComparisonFailure  	79	1	replace
80	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(type!=  null)?  this.constructorConstructor.get(type):  null;  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(type!=  null)?  this.constructorConstructor.get(type):  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(type!=  null)?  this.constructorConstructor.get(type):  null;	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    	compilable	  [FE]  ComparisonFailure  	79	1	replace
81	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getSuperType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getSuperType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <?  super  T>  raw  =  type.getSuperType();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	108	None	replace
82	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getReturnType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getReturnType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <?  super  T>  raw  =  type.getReturnType();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	108	None	replace
83	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getDeclaredType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getDeclaredType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <?  super  T>  raw  =  type.getDeclaredType();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	108	None	replace
84	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getSuperClass();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getSuperClass();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <?  super  T>  raw  =  type.getSuperClass();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	108	None	replace
85	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getConstructor();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <?  super  T>  raw  =  type.getConstructor();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	108	None	replace
86	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getAssignedType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getAssignedType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <?  super  T>  raw  =  type.getAssignedType();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	108	None	replace
87	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.types.get(type);  [CE]  cannot  find  symbol  types  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.types.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.types.get(type);	  ObjectConstructor    <    T>    constructor    =    types.get(type);    	non-compiled	[CE]  cannot  find  symbol  types	3	None	replace
88	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  elements.get(type);  [CE]  cannot  find  symbol  elements  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  elements.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  elements.get(type);	  ObjectConstructor    <    T>    constructor    =    types.get(type);    	non-compiled	[CE]  cannot  find  symbol  elements	3	None	replace
89	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  objects.get(type);  [CE]  cannot  find  symbol  objects  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  objects.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  objects.get(type);	  ObjectConstructor    <    T>    constructor    =    types.get(type);    	non-compiled	[CE]  cannot  find  symbol  objects	3	None	replace
90	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]    NullPointerException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    null    :    this.constructorConstructor.get(type);    ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	75	None	add
91	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]      NullPointerException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    null    :    this.constructorConstructor.get(type);    ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	75	None	add
92	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]        NullPointerException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    null    :    this.constructorConstructor.get(type);    final  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	75	None	add
93	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  Constructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  Constructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    null    :    this.constructorConstructor.get(type);    Constructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);	  	non-compiled	[CE]  cannot  find  symbol	75	None	add
94	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >=  null)?  null  :  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]            NullPointerException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >=  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    null    :    this.constructorConstructor.get(type);    ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >=  null)?  null  :  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	75	None	add
95	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >>  null)?  null  :  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]              NullPointerException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >>  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    null    :    this.constructorConstructor.get(type);    ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >>  null)?  null  :  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	75	None	add
96	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get(gson);  [CE]  cannot  find  symbol  scope  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.get(gson);	  ObjectConstructor    <    T>    constructor    =    scope.get(raw);    	non-compiled	[CE]  cannot  find  symbol  scope	87	None	replace
97	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(scope);  [CE]  cannot  find  symbol  scope  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(scope);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(scope);	  ObjectConstructor    <    T>    constructor    =    scope.get(raw);    	non-compiled	[CE]  cannot  find  symbol  scope	87	None	replace
98	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.get(raw);  [CE]  cannot  find  symbol  context  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.get(raw);	  ObjectConstructor    <    T>    constructor    =    scope.get(raw);    	non-compiled	[CE]  cannot  find  symbol  context	87	None	replace
99	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(type,  raw);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(type,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().compute(type);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
100	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(raw,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(raw,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().compute(type);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
101	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(gson,  type);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(gson,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().compute(type);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
102	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(raw);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().compute(type);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
103	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().computeType(type);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().computeType(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().computeType(type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().compute(type);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
104	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(null,  type);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(null,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(null,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().compute(type);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
105	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Constructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
106	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(this.constructorConstructor);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [CE]  no  suitable  method  found  for  get(ConstructorConstructor)  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(this.constructorConstructor);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(this.constructorConstructor);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Constructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  no  suitable  method  found  for  get(ConstructorConstructor)	11	None	replace
107	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  type.get(this.constructorConstructor);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  type.get(this.constructorConstructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  type.get(this.constructorConstructor);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Constructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
108	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  _constructorConstructor.get(type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  _constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  _constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Constructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
109	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type,  raw);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type,  raw);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Constructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
110	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.get(raw);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.get(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(constraint);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
111	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  input.get(raw);  [CE]  cannot  find  symbol  input  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  input.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  input.get(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(constraint);    	non-compiled	[CE]  cannot  find  symbol  input	52	None	replace
112	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(context);  [CE]  cannot  find  symbol  context  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(context);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.construct(context);	  ObjectConstructor    <    T>    constructor    =    context.construct(type);    	non-compiled	[CE]  cannot  find  symbol  context	65	None	replace
113	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.construct(type);	  ObjectConstructor    <    T>    constructor    =    context.construct(type);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
114	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.construct(type);  [CE]  cannot  find  symbol  types  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.construct(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.construct(type);	  ObjectConstructor    <    T>    constructor    =    context.construct(type);    	non-compiled	[CE]  cannot  find  symbol  types	65	None	replace
115	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.construct(type);  [CE]  cannot  find  symbol  scope  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.construct(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.construct(type);	  ObjectConstructor    <    T>    constructor    =    context.construct(type);    	non-compiled	[CE]  cannot  find  symbol  scope	65	None	replace
116	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  raw  =  gson.getRawType();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	19	None	replace
117	[BUG]  [BUGGY]  final  TypeToken  <  T>  raw  =  type.getRawType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  final  TypeToken  <  T>  raw  =  type.getRawType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	final  TypeToken  <  T>  raw  =  type.getRawType();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	19	None	replace
118	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getReturnType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  raw  =  type.getReturnType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  raw  =  type.getReturnType();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	19	None	replace
119	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawClass();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  raw  =  type.getRawClass();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  raw  =  type.getRawClass();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	19	None	replace
120	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getConstructor();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  raw  =  type.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  raw  =  type.getConstructor();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	19	None	replace
121	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getDeclaredType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  raw  =  type.getDeclaredType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  raw  =  type.getDeclaredType();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	19	None	replace
122	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructor.getConstructor();  [CE]  cannot  find  symbol  constructor  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructor.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructor.getConstructor();	  ObjectConstructor    <    T>    constructor    =    scope.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  constructor	37	None	replace
123	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.getConstructor();  [CE]  cannot  find  symbol  context  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.getConstructor();	  ObjectConstructor    <    T>    constructor    =    scope.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  context	37	None	replace
124	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  [CE]  cannot  find  symbol  constructor  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    buildor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructor	9	None	replace
125	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  constructor  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    buildor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructor	9	None	replace
126	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	add	final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    buildor    =    this.constructorConstructor.get(type);    	compilable	  [FE]  ComparisonFailure  	9	1	replace
127	[BUG]  [BUGGY]  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    buildor    =    this.constructorConstructor.get(type);    	compilable	  [FE]  ComparisonFailure  	9	1	replace
128	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor();  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor();  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  gson.getConstructor();  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    buildor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
129	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(gson,  type);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(gson,  type);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(gson);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
130	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  gson);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  gson);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(gson);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	34	None	replace
131	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  type);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  type);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(gson);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	34	None	replace
132	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  gson);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  gson);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(gson);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	34	None	replace
133	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(gson,  type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructorConstructor(gson,  type);	  Constructor    <    T>    constructor    =    getConstructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
134	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(gson,  raw);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructorConstructor(gson,  raw);	  Constructor    <    T>    constructor    =    getConstructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
135	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(gson,  Object.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(gson,  Object.class);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructorConstructor(gson,  Object.class);	  Constructor    <    T>    constructor    =    getConstructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
136	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(gson,  scope);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(gson,  scope);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructorConstructor(gson,  scope);	  Constructor    <    T>    constructor    =    getConstructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
137	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(gson,  null);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(gson,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructorConstructor(gson,  null);	  Constructor    <    T>    constructor    =    getConstructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
138	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  compiler.get(type);  [CE]  cannot  find  symbol  compiler  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  compiler.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  compiler.get(type);	  ObjectConstructor    <    T>    constructor    =    type.get(compiler);    	non-compiled	[CE]  cannot  find  symbol  compiler	15	None	replace
139	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  type,  raw);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructor(gson,  type,  raw);	  Constructor    <    T>    constructor    =    getConstructor(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
140	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  type.getRawType());  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  type.getRawType());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructor(gson,  type.getRawType());	  Constructor    <    T>    constructor    =    getConstructor(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
141	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  type.toString());  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  type.toString());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructor(gson,  type.toString());	  Constructor    <    T>    constructor    =    getConstructor(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
142	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  raw);  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructor(gson,  raw);	  Constructor    <    T>    constructor    =    getConstructor(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
143	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  type.toObjectConstructor());  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  type.toObjectConstructor());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructor(gson,  type.toObjectConstructor());	  Constructor    <    T>    constructor    =    getConstructor(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
144	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  type.getRawClass());  [CE]  cannot  find  symbol  [FE]                                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  type.getRawClass());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructor(gson,  type.getRawClass());	  Constructor    <    T>    constructor    =    getConstructor(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
145	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(raw,  type);  [CE]  no  suitable  method  found  for  get(Class<CAP#1>,TypeToken<T#1>)  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(raw,  type);	  ObjectConstructor    <    T>    constructor    =    raw.get(type,    type);    	non-compiled	[CE]  no  suitable  method  found  for  get(Class<CAP#1>,TypeToken<T#1>)	4	None	replace
146	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(type,  raw);  [CE]  cannot  find  symbol  types  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.get(type,  raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(type,    type);    	non-compiled	[CE]  cannot  find  symbol  types	4	None	replace
147	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(raw,  type);  [CE]  cannot  find  symbol  types  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.get(raw,  type);	  ObjectConstructor    <    T>    constructor    =    raw.get(type,    type);    	non-compiled	[CE]  cannot  find  symbol  types	4	None	replace
148	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructor().get(raw,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructor().get(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.constructor().get(raw,  type);	  ObjectConstructor    <    T>    constructor    =    raw.get(type,    type);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
149	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(target);  [CE]  cannot  find  symbol  target  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(target);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(target);	  ObjectConstructor    <    T>    constructor    =    target.get(type);    	non-compiled	[CE]  cannot  find  symbol  target	85	None	replace
150	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  target.get(raw);  [CE]  cannot  find  symbol  target  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  target.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  target.get(raw);	  ObjectConstructor    <    T>    constructor    =    target.get(type);    	non-compiled	[CE]  cannot  find  symbol  target	85	None	replace
151	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  type,  raw);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  type,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson,    raw);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	56	None	replace
152	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  raw,  type);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  raw,  type);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson,    raw);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	56	None	replace
153	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(gson,  constructor);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(gson,  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.construct(gson,  constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
154	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(gson,  raw);  [CE]  cannot  find  symbol  context  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.construct(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  context	56	None	replace
155	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(gson,  raw);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.construct(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
156	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(gson);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.construct(gson);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
157	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(gson,  type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(gson,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().construct(type);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
158	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(raw,  type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(raw,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().construct(type);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
159	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(type,  raw);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(type,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().construct(type);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
160	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(raw);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().construct(type);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
161	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().constructor(gson,  type);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().constructor(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().constructor(gson,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().construct(type);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
162	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().constructor(type);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().constructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().constructor(type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().construct(type);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
163	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.construct();	  ObjectConstructor    <    T>    constructor    =    gson.build();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
164	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct(type.getRawType());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct(type.getRawType());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.construct(type.getRawType());	  ObjectConstructor    <    T>    constructor    =    gson.build();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
165	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.newObjectConstructor();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.newObjectConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.newObjectConstructor();	  ObjectConstructor    <    T>    constructor    =    gson.build();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
166	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(type,  raw);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructor(type,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
167	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(raw);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructor(raw);	  ObjectConstructor    <    T>    constructor    =    getConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
168	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(gson);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructor(gson);	  ObjectConstructor    <    T>    constructor    =    getConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
169	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(gson,  type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructor(gson,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
170	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(type.getRawType());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(type.getRawType());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructor(type.getRawType());	  ObjectConstructor    <    T>    constructor    =    getConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
171	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(raw,  type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructor(raw,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
172	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.type!=  null)?  this.type.getConstructor()  :  null;  [CE]  cannot  find  symbol  type  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.type!=  null)?  this.type.getConstructor()  :  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.type!=  null)?  this.type.getConstructor()  :  null;	  ObjectConstructor    <    T>    constructor    =    this.type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	67	None	replace
173	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.type  ==  null)?  this.type.getConstructor()  :  null;  [CE]  cannot  find  symbol  type  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.type  ==  null)?  this.type.getConstructor()  :  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.type  ==  null)?  this.type.getConstructor()  :  null;	  ObjectConstructor    <    T>    constructor    =    this.type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	67	None	replace
174	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor(type);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  gson.getConstructor(type);	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
175	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson,  type.getConstructor();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  gson,  type.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  gson,  type.getConstructor();	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  ';'  expected	17	None	replace
176	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.construct(type.getConstructor());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  gson.construct(type.getConstructor());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  gson.construct(type.getConstructor());	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
177	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.constructor();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  gson.constructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  gson.constructor();	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
178	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  scope.getConstructor();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  scope.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  scope.getConstructor();	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
179	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructor(type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.constructor(type);	  ObjectConstructor    <    T>    constructor    =    gson.constructor();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
180	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson,  type.constructor();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson,  type.constructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson,  type.constructor();	  ObjectConstructor    <    T>    constructor    =    gson.constructor();    	non-compiled	[CE]  ';'  expected	25	None	replace
181	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.constructor();  [CE]  cannot  find  symbol  scope  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.constructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.constructor();	  ObjectConstructor    <    T>    constructor    =    gson.constructor();    	non-compiled	[CE]  cannot  find  symbol  scope	25	None	replace
182	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(gson,  type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.construct(gson,  type);	  ObjectConstructor    <    T>    constructor    =    type.get(type);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
183	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(type,  raw);  [CE]  no  suitable  method  found  for  get(TypeToken<T#1>,Class<CAP#1>)  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(type,  raw);	  ObjectConstructor    <    T>    constructor    =    type.get(type);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<T#1>,Class<CAP#1>)	14	None	replace
184	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(gson);  [CE]  no  suitable  method  found  for  get(Gson)  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(gson);	  ObjectConstructor    <    T>    constructor    =    type.get(type);    	non-compiled	[CE]  no  suitable  method  found  for  get(Gson)	14	None	replace
185	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type,  raw);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
186	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type.getRawType());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type.getRawType());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type.getRawType());	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
187	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type.toString());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type.toString());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type.toString());	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
188	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type.getRawClass());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type.getRawClass());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type.getRawClass());	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
189	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  [CE]  package  that  does  not  exist  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    that.constructorConstructor.get(type);    	non-compiled	[CE]  package  that  does  not  exist	110	None	replace
190	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  that.constructorConstructor.get(type);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  that.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  that.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    that.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
191	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  this.constructorConstructor.get(raw);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  this.constructorConstructor.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  this.constructorConstructor.get(raw);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    that.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
192	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  factory.construct(raw);  [CE]  cannot  find  symbol  factory  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  factory.construct(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  factory.construct(raw);	  ObjectConstructor    <    T>    constructor    =    raw.construct(constructor);    	non-compiled	[CE]  cannot  find  symbol  factory	57	None	replace
193	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  compiler.construct(raw);  [CE]  cannot  find  symbol  compiler  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  compiler.construct(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  compiler.construct(raw);	  ObjectConstructor    <    T>    constructor    =    raw.construct(constructor);    	non-compiled	[CE]  cannot  find  symbol  compiler	57	None	replace
194	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(grails);  [CE]  cannot  find  symbol  grails  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(grails);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(grails);	  ObjectConstructor    <    T>    constructor    =    raw.construct(constructor);    	non-compiled	[CE]  cannot  find  symbol  grails	57	None	replace
195	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.getConstructor(type);  [CE]  method  getConstructor  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.getConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.getConstructor(type);	  ObjectConstructor    <    T>    constructor    =    type.getConstructor(raw);    	non-compiled	[CE]  method  getConstructor  in  class  Class<T#2>  cannot  be  applied  to  given  types;	68	None	replace
196	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.getConstructor(gson);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.getConstructor(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.getConstructor(gson);	  ObjectConstructor    <    T>    constructor    =    type.getConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
197	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw,  type.getConstructor(type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw,  type.getConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw,  type.getConstructor(type);	  ObjectConstructor    <    T>    constructor    =    type.getConstructor(raw);    	non-compiled	[CE]  ';'  expected	68	None	replace
198	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.getConstructor(raw);  [CE]  cannot  find  symbol  scope  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.getConstructor(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.getConstructor(raw);	  ObjectConstructor    <    T>    constructor    =    type.getConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol  scope	68	None	replace
199	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type,  raw);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
200	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type.getRawType());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type.getRawType());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type.getRawType());	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
201	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  renderer.construct(raw);  [CE]  cannot  find  symbol  renderer  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  renderer.construct(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  renderer.construct(raw);	  ObjectConstructor    <    T>    constructor    =    type.construct(raw);    	non-compiled	[CE]  cannot  find  symbol  renderer	60	None	replace
202	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  elements.get(raw);  [CE]  cannot  find  symbol  elements  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  elements.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  elements.get(raw);	  ObjectConstructor    <    T>    constructor    =    types.get(raw);    	non-compiled	[CE]  cannot  find  symbol  elements	2	None	replace
203	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.types.get(raw);  [CE]  cannot  find  symbol  types  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.types.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.types.get(raw);	  ObjectConstructor    <    T>    constructor    =    types.get(raw);    	non-compiled	[CE]  cannot  find  symbol  types	2	None	replace
204	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  objects.get(raw);  [CE]  cannot  find  symbol  objects  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  objects.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  objects.get(raw);	  ObjectConstructor    <    T>    constructor    =    types.get(raw);    	non-compiled	[CE]  cannot  find  symbol  objects	2	None	replace
205	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.create(gson,  this.constructorConstructor);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.create(gson,  this.constructorConstructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.create(gson,  this.constructorConstructor);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
206	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.create(gson,  type,  raw);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.create(gson,  type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.create(gson,  type,  raw);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
207	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.create(gson,  this.constructorConstructor);  [CE]  cannot  find  symbol  constructorConstructor  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.create(gson,  this.constructorConstructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.create(gson,  this.constructorConstructor);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson,    type);    	non-compiled	[CE]  cannot  find  symbol  constructorConstructor	99	None	replace
208	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.create(gson,  this.constructorConstructor);  [CE]  cannot  find  symbol  types  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.create(gson,  this.constructorConstructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.create(gson,  this.constructorConstructor);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson,    type);    	non-compiled	[CE]  cannot  find  symbol  types	99	None	replace
209	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructor().create(gson,  this.constructorConstructor);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructor().create(gson,  this.constructorConstructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.constructor().create(gson,  this.constructorConstructor);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
210	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.create(gson,  type);  [CE]  cannot  find  symbol  constructorConstructor  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.create(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.create(gson,  type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson,    type);    	non-compiled	[CE]  cannot  find  symbol  constructorConstructor	99	None	replace
211	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().set(raw,  type);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().set(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().set(raw,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().set(type);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
212	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().set(type,  raw);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().set(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().set(type,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().set(type);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
213	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().set(raw);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().set(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().set(raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().set(type);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
214	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().set(gson,  type);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().set(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().set(gson,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().set(type);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
215	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type.getRawClass());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type.getRawClass());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type.getRawClass());	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
216	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw.getRawClass(),  type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw.getRawClass(),  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw.getRawClass(),  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
217	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson.getRawClass());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson.getRawClass());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson.getRawClass());	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
218	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  raw.getRawClass());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  raw.getRawClass());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  raw.getRawClass());	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
219	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type.getRawClass());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type.getRawClass());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type.getRawClass());	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
220	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructor(gson);	  Constructor    <    T>    constructor    =    getConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
221	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(raw,  type);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructor(raw,  type);	  Constructor    <    T>    constructor    =    getConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
222	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(type);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructor(type);	  Constructor    <    T>    constructor    =    getConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
223	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  findConstructor(gson);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  findConstructor(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  findConstructor(gson);	  Constructor    <    T>    constructor    =    getConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
224	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(raw,  constructor);  [CE]  no  suitable  method  found  for  get(Class<CAP#1>,ObjectConstructor<T#1>)  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(raw,  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(raw,  constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.get(raw,    type);    	non-compiled	[CE]  no  suitable  method  found  for  get(Class<CAP#1>,ObjectConstructor<T#1>)	31	None	replace
225	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(raw,  constructor);  [CE]  cannot  find  symbol  types  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(raw,  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.get(raw,  constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  types	31	None	replace
226	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(type,  constructor);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(type,  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(type,  constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
227	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructor().get(raw,  constructor);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructor().get(raw,  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.constructor().get(raw,  constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
228	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get(raw,  type);  [CE]  cannot  find  symbol  scope  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.get(raw,  type);	  ObjectConstructor    <    T>    constructor    =    constructor.get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  scope	31	None	replace
229	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructors.get(raw);  [CE]  cannot  find  symbol  constructors  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructors.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructors.get(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(constructor);    	non-compiled	[CE]  cannot  find  symbol  constructors	51	None	replace
230	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(gson);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(gson);	  ObjectConstructor    <    T>    constructor    =    raw.get(constructor);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
231	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(constructor);  [CE]  cannot  find  symbol  types  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.get(constructor);	  ObjectConstructor    <    T>    constructor    =    raw.get(constructor);    	non-compiled	[CE]  cannot  find  symbol  types	51	None	replace
232	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  factory.get(raw);  [CE]  cannot  find  symbol  factory  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  factory.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  factory.get(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(factory);    	non-compiled	[CE]  cannot  find  symbol  factory	55	None	replace
233	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  source.get(raw);  [CE]  cannot  find  symbol  source  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  source.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  source.get(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(factory);    	non-compiled	[CE]  cannot  find  symbol  source	55	None	replace
234	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructor.get(raw);  [CE]  cannot  find  symbol  constructor  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructor.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructor.get(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(factory);    	non-compiled	[CE]  cannot  find  symbol  constructor	55	None	replace
235	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  factory.construct(type);  [CE]  cannot  find  symbol  factory  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  factory.construct(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  factory.construct(type);	  ObjectConstructor    <    T>    constructor    =    type.construct(constructor);    	non-compiled	[CE]  cannot  find  symbol  factory	63	None	replace
236	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(gson,  constructor);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(gson,  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.construct(gson,  constructor);	  ObjectConstructor    <    T>    constructor    =    type.construct(constructor);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
237	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  compiler.construct(type);  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  compiler.construct(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  compiler.construct(type);	  ObjectConstructor    <    T>    constructor    =    type.construct(constructor);    	non-compiled	[CE]  cannot  find  symbol  compiler	63	None	replace
238	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.construct(gson);  [CE]  cannot  find  symbol  types  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.construct(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.construct(gson);	  ObjectConstructor    <    T>    constructor    =    gson.construct(type);    	non-compiled	[CE]  cannot  find  symbol  types	102	None	replace
239	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.construct(gson,  type);  [CE]  cannot  find  symbol  scope  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.construct(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.construct(gson,  type);	  ObjectConstructor    <    T>    constructor    =    gson.construct(type);    	non-compiled	[CE]  cannot  find  symbol  scope	102	None	replace
240	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.construct(gson,  type);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.construct(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  TypeToken.construct(gson,  type);	  ObjectConstructor    <    T>    constructor    =    gson.construct(type);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
241	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(gson,  type);  [CE]  cannot  find  symbol  context  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.construct(gson,  type);	  ObjectConstructor    <    T>    constructor    =    gson.construct(type);    	non-compiled	[CE]  cannot  find  symbol  context	102	None	replace
242	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.construct(gson);  [CE]  cannot  find  symbol  scope  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.construct(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.construct(gson);	  ObjectConstructor    <    T>    constructor    =    gson.construct(type);    	non-compiled	[CE]  cannot  find  symbol  scope	102	None	replace
243	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	7	None	replace
244	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	7	None	replace
245	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ")  [CE]  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ")  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ")	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  	7	None	replace
246	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(grails,  type);  [CE]  cannot  find  symbol  grails  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(grails,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(grails,  type);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(type,    raw);    	non-compiled	[CE]  cannot  find  symbol  grails	32	None	replace
247	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  raw,  type);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  raw,  type);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(type,    raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	32	None	replace
248	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  gson,  type.getConstructor();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  gson,  type.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  gson,  type.getConstructor();	  TypeToken    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  ';'  expected	93	None	replace
249	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  gson.getConstructor(type);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  gson.getConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  gson.getConstructor(type);	  TypeToken    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
250	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  gson.constructor();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  gson.constructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  gson.constructor();	  TypeToken    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
251	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  gson.construct(type.getConstructor());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  gson.construct(type.getConstructor());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  gson.construct(type.getConstructor());	  TypeToken    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
252	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  gson.type.getConstructor();  [CE]  cannot  find  symbol  type  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  gson.type.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  gson.type.getConstructor();	  TypeToken    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	93	None	replace
253	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.findConstructor(gson);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.findConstructor(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.findConstructor(gson);	  ObjectConstructor    <    T>    constructor    =    gson.findConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
254	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.findConstructor(gson);  [CE]  cannot  find  symbol  types  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.findConstructor(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.findConstructor(gson);	  ObjectConstructor    <    T>    constructor    =    gson.findConstructor(type);    	non-compiled	[CE]  cannot  find  symbol  types	101	None	replace
255	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.findConstructor();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.findConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.findConstructor();	  ObjectConstructor    <    T>    constructor    =    gson.findConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
256	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.findConstructor(type);  [CE]  cannot  find  symbol  scope  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.findConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.findConstructor(type);	  ObjectConstructor    <    T>    constructor    =    gson.findConstructor(type);    	non-compiled	[CE]  cannot  find  symbol  scope	101	None	replace
257	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.findConstructor(type,  raw);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.findConstructor(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.findConstructor(type,  raw);	  ObjectConstructor    <    T>    constructor    =    gson.findConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
258	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.findConstructor(type);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.findConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  TypeToken.findConstructor(type);	  ObjectConstructor    <    T>    constructor    =    gson.findConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
259	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(scope);  [CE]  cannot  find  symbol  scope  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(scope);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(scope);	  ObjectConstructor    <    T>    constructor    =    scope.get(type);    	non-compiled	[CE]  cannot  find  symbol  scope	6	None	replace
260	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructor.build();  [CE]  cannot  find  symbol  constructor  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructor.build();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.constructor.build();	  ObjectConstructor    <    T>    constructor    =    gson.constructor.build();    	non-compiled	[CE]  cannot  find  symbol  constructor	115	None	replace
261	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructor;  [CE]  cannot  find  symbol  constructor  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructor;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.constructor;	  ObjectConstructor    <    T>    constructor    =    gson.constructor.build();    	non-compiled	[CE]  cannot  find  symbol  constructor	115	None	replace
262	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson,  type.constructor.build();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson,  type.constructor.build();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson,  type.constructor.build();	  ObjectConstructor    <    T>    constructor    =    gson.constructor.build();    	non-compiled	[CE]  ';'  expected	115	None	replace
263	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructor.get();  [CE]  cannot  find  symbol  constructor  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructor.get();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.constructor.get();	  ObjectConstructor    <    T>    constructor    =    gson.constructor.build();    	non-compiled	[CE]  cannot  find  symbol  constructor	115	None	replace
264	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructor.create();  [CE]  cannot  find  symbol  constructor  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructor.create();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.constructor.create();	  ObjectConstructor    <    T>    constructor    =    gson.constructor.build();    	non-compiled	[CE]  cannot  find  symbol  constructor	115	None	replace
265	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(raw,  type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(raw,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(type,    raw);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
266	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(type,  raw,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(type,  raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(type,  raw,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(type,    raw);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
267	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(gson,  type);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(gson,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(type,    raw);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
268	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(type,  raw,  null);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(type,  raw,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(type,  raw,  null);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(type,    raw);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
269	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(type,  raw);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(type,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().build(type);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
270	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(raw);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().build(type);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
271	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(gson,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(gson,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().build(type);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
272	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(raw,  type);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(raw,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().build(type);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
273	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(gson);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(gson);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().build(type);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
274	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(null,  type);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(null,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().build(null,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().build(type);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
275	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  type,  raw);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  type,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().create(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
276	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  raw);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().create(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
277	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  type,  scope);  [CE]  cannot  find  symbol  scope  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  type,  scope);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  type,  scope);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().create(gson,    type);    	non-compiled	[CE]  cannot  find  symbol  scope	46	None	replace
278	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  type),  raw);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  type),  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  type),  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().create(gson,    type);    	non-compiled	[CE]  ';'  expected	46	None	replace
279	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(gson,  type);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(gson,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().create(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
280	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  excluder.get(raw);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  excluder.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  excluder.get(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(extern);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
281	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  excluders.get(raw);  [CE]  cannot  find  symbol  excluders  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  excluders.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  excluders.get(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(extern);    	non-compiled	[CE]  cannot  find  symbol  excluders	112	None	replace
282	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  excluder.get(type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  excluder.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  excluder.get(type);	  ObjectConstructor    <    T>    constructor    =    raw.get(extern);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
283	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  excluded.get(raw);  [CE]  cannot  find  symbol  excluded  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  excluded.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  excluded.get(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(extern);    	non-compiled	[CE]  cannot  find  symbol  excluded	112	None	replace
284	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    TypeToken    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  incompatible  types	10	None	replace
285	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    TypeToken    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	10	None	replace
286	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    TypeToken    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	10	None	replace
287	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  null);  [CE]  method  construct  in  interface  ObjectConstructor<T>  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  null);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    null);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T>  cannot  be  applied  to  given  types;	97	None	replace
288	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  raw,  null);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  raw,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  raw,  null);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    null);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	97	None	replace
289	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  null);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  null);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    null);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	97	None	replace
290	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(raw,  null);  [CE]  cannot  find  symbol  context  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(raw,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.construct(raw,  null);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    null);    	non-compiled	[CE]  cannot  find  symbol  context	97	None	replace
291	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  null.construct(raw,  constructor);  [CE]  <null>  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  null.construct(raw,  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  null.construct(raw,  constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    null);    	non-compiled	[CE]  <null>  cannot  be  dereferenced	97	None	replace
292	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  type,  null);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  type,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  type,  null);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    null);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	97	None	replace
293	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  null,  type);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  null,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  null,  type);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    null);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	97	None	replace
294	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  compiler.get(raw);  [CE]  cannot  find  symbol  compiler  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  compiler.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  compiler.get(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(compiler);    	non-compiled	[CE]  cannot  find  symbol  compiler	53	None	replace
295	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.getConstructor(type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.getConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  TypeToken.getConstructor(type);	  ObjectConstructor    <    T>    constructor    =    TypeToken.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
296	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.class.getConstructor();  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.class.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  TypeToken.class.getConstructor();	  ObjectConstructor    <    T>    constructor    =    TypeToken.getConstructor();    	non-compiled	[CE]  incompatible  types	71	None	replace
297	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.getConstructor(raw);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.getConstructor(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  TypeToken.getConstructor(raw);	  ObjectConstructor    <    T>    constructor    =    TypeToken.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
298	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.CONSTRUCTOR;  [CE]  cannot  find  symbol  CONSTRUCTOR  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.CONSTRUCTOR;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  TypeToken.CONSTRUCTOR;	  ObjectConstructor    <    T>    constructor    =    TypeToken.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  CONSTRUCTOR	71	None	replace
299	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.newInstance();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.newInstance();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  TypeToken.newInstance();	  ObjectConstructor    <    T>    constructor    =    TypeToken.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
300	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.GETPROP;  [CE]  cannot  find  symbol  GETPROP  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.GETPROP;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  TypeToken.GETPROP;	  ObjectConstructor    <    T>    constructor    =    TypeToken.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  GETPROP	71	None	replace
301	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    final    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	8	None	replace
302	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    final    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	8	None	replace
303	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [CE]  cannot  find  symbol  constructor  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    final    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructor	8	None	replace
304	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ")  [CE]  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ")  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ")	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    final    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  	8	None	replace
305	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.constructor();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.constructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  TypeToken.constructor();	  ObjectConstructor    <    T>    constructor    =    type.constructor();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
306	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.constructor();  [CE]  cannot  find  symbol  types  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.constructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.constructor();	  ObjectConstructor    <    T>    constructor    =    type.constructor();    	non-compiled	[CE]  cannot  find  symbol  types	69	None	replace
307	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.construct();	  ObjectConstructor    <    T>    constructor    =    type.constructor();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
308	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(raw,  type);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(raw,  type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	72	None	replace
309	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(gson,  raw);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	72	None	replace
310	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type,  raw);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type,  raw);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	72	None	replace
311	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(gson);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(gson);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	72	None	replace
312	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(this.constructorConstructor);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(this.constructorConstructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(this.constructorConstructor);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(raw);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
313	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(gson,  type);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(gson,  type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	72	None	replace
314	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructor.build();  [CE]  cannot  find  symbol  constructor  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructor.build();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructor.build();	  ObjectConstructor    <    T>    constructor    =    factory.build();    	non-compiled	[CE]  cannot  find  symbol  constructor	90	None	replace
315	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  target.build();  [CE]  cannot  find  symbol  target  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  target.build();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  target.build();	  ObjectConstructor    <    T>    constructor    =    factory.build();    	non-compiled	[CE]  cannot  find  symbol  target	90	None	replace
316	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  raw,  type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  raw,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
317	[BUG]  [BUGGY]  final  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  raw);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  final  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	final  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
318	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  findConstructorConstructor(gson,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  findConstructorConstructor(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  findConstructorConstructor(gson,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
319	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(Type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	81	None	replace
320	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(Type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	81	None	replace
321	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  type);  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  type);	  NodeTraversal.traverse(compiler,    gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  compiler	92	None	replace
322	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  raw,  type);  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  raw,  type);	  NodeTraversal.traverse(compiler,    gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  compiler	92	None	replace
323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  raw);  [CE]  cannot  find  symbol  compiler  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  type,  raw);	  NodeTraversal.traverse(compiler,    gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  compiler	92	None	replace
324	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  fieldNamingStrategy);  [CE]  cannot  find  symbol  compiler  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  fieldNamingStrategy);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  fieldNamingStrategy);	  NodeTraversal.traverse(compiler,    gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  compiler	92	None	replace
325	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  fieldNamingPolicy);  [CE]  cannot  find  symbol  compiler  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  fieldNamingPolicy);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  fieldNamingPolicy);	  NodeTraversal.traverse(compiler,    gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  compiler	92	None	replace
326	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  constructor);	  NodeTraversal.traverse(compiler,    gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  compiler	92	None	replace
327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  this.serializedName);  [CE]  cannot  find  symbol  compiler  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  this.serializedName);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  this.serializedName);	  NodeTraversal.traverse(compiler,    gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  compiler	92	None	replace
328	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.raw.getConstructor();  [CE]  cannot  find  symbol  raw  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.raw.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.raw.getConstructor();	  ObjectConstructor    <    T>    constructor    =    raw.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  raw	100	None	replace
329	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  this.type.getConstructor();  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  this.type.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  this.type.getConstructor();	  TypeToken    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	16	None	replace
330	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  type.constructor();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  type.constructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  type.constructor();	  TypeToken    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
331	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  type.getConstructor(),  raw);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  type.getConstructor(),  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  type.getConstructor(),  raw);	  TypeToken    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	16	None	replace
332	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  scope.getConstructor();  [CE]  cannot  find  symbol  scope  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  scope.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  scope.getConstructor();	  TypeToken    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  scope	16	None	replace
333	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  type.toConstructor();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  type.toConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  type.toConstructor();	  TypeToken    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
334	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.newObjectConstructor();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.newObjectConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.newObjectConstructor();	  ObjectConstructor    <    T>    constructor    =    type.build();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
335	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(null);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.construct(null);	  ObjectConstructor    <    T>    constructor    =    type.build();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
336	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(gson,  constructor);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(gson,  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(gson,  constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.get(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
337	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(gson,  raw);  [CE]  no  suitable  method  found  for  get(Gson,Class<CAP#1>)  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.get(gson,    raw);    	non-compiled	[CE]  no  suitable  method  found  for  get(Gson,Class<CAP#1>)	33	None	replace
338	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructor.get(gson,  raw);  [CE]  cannot  find  symbol  constructor  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructor.get(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructor.get(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.get(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  constructor	33	None	replace
339	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(gson,  raw);  [CE]  cannot  find  symbol  types  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.get(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.get(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  types	33	None	replace
340	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.get(gson,  raw);  [CE]  cannot  find  symbol  context  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.get(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.get(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.get(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  context	33	None	replace
341	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(gson,  raw);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructor(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.get(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
342	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  input.get(gson,  raw);  [CE]  cannot  find  symbol  input  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  input.get(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  input.get(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.get(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  input	33	None	replace
343	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  source.build();  [CE]  cannot  find  symbol  source  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  source.build();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  source.build();	  ObjectConstructor    <    T>    constructor    =    builder.build();    	non-compiled	[CE]  cannot  find  symbol  source	91	None	replace
344	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  method.build();  [CE]  cannot  find  symbol  method  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  method.build();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  method.build();	  ObjectConstructor    <    T>    constructor    =    builder.build();    	non-compiled	[CE]  cannot  find  symbol  method	91	None	replace
345	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(input);  [CE]  cannot  find  symbol  input  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(input);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(input);	  ObjectConstructor    <    T>    constructor    =    input.get(type);    	non-compiled	[CE]  cannot  find  symbol  input	86	None	replace
346	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(value);  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(value);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(value);	  ObjectConstructor    <    T>    constructor    =    input.get(type);    	non-compiled	[CE]  cannot  find  symbol  value	86	None	replace
347	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(grails,  constructor);  [CE]  cannot  find  symbol  grails  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(grails,  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.construct(grails,  constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(grails,    type);    	non-compiled	[CE]  cannot  find  symbol  grails	66	None	replace
348	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(grails);  [CE]  cannot  find  symbol  grails  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(grails);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.construct(grails);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(grails,    type);    	non-compiled	[CE]  cannot  find  symbol  grails	66	None	replace
349	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(type,  constructor);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.construct(type,  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.construct(type,  constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(grails,    type);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
350	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.build();  [CE]  cannot  find  symbol  context  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.build();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.build();	  ObjectConstructor    <    T>    constructor    =    scope.build();    	non-compiled	[CE]  cannot  find  symbol  context	27	None	replace
351	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(null,  raw);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(null,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(null,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(null);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
352	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  null);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  null);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(null);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
353	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(null,  type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(null,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(null,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(null);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
354	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  primaryType);  [CE]  cannot  find  symbol  primaryType  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  primaryType);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  primaryType);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    types);    	non-compiled	[CE]  cannot  find  symbol  primaryType	107	None	replace
355	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  source);  [CE]  cannot  find  symbol  source  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  source);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  source);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    types);    	non-compiled	[CE]  cannot  find  symbol  source	107	None	replace
356	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	73	None	add
357	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	73	None	add
358	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    ObjectConstructor  <  T>  buildor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	73	None	add
359	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >=  null)?  null  :  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >=  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >=  null)?  null  :  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	73	None	add
360	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(Type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(Type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(Type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	73	None	add
361	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(raw,  raw);  [CE]  no  suitable  method  found  for  get(Class<CAP#1>,Class<CAP#2>)  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(raw,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(raw,  raw);	  ObjectConstructor    <    T>    constructor    =    type.get(raw);    	non-compiled	[CE]  no  suitable  method  found  for  get(Class<CAP#1>,Class<CAP#2>)	1	None	replace
362	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(0);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(0);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(0);	  ObjectConstructor    <    T>    constructor    =    type.get(raw);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
363	[BUG]  [BUGGY]  final  ObjectConstructor  <  T>  constructor  =  type.get(raw);  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  final  ObjectConstructor  <  T>  constructor  =  type.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	final  ObjectConstructor  <  T>  constructor  =  type.get(raw);	  ObjectConstructor    <    T>    constructor    =    type.get(raw);    	non-compiled	[CE]  incompatible  types	1	None	replace
364	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(raw,  constructor);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(raw,  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.construct(raw,  constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    type);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
365	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(raw,  type);  [CE]  cannot  find  symbol  context  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.construct(raw,  type);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  context	59	None	replace
366	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  raw);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    type);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	59	None	replace
367	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  method.construct(raw,  type);  [CE]  cannot  find  symbol  method  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  method.construct(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  method.construct(raw,  type);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  method	59	None	replace
368	[BUG]  [BUGGY]  Class  <?>  constructor  =  this.constructorConstructor.get(type);  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Class  <?>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Class  <?>  constructor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Class    <?>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  incompatible  types	83	None	replace
369	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor();  Class  <?>  constructor  =  this.constructorConstructor.get(type);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor();  Class  <?>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  gson.getConstructor();  Class  <?>  constructor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Class    <?>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
370	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  this.constructorConstructor.get(raw);  Class  <?>  constructor  =  this.constructorConstructor.get(type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  this.constructorConstructor.get(raw);  Class  <?>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  this.constructorConstructor.get(raw);  Class  <?>  constructor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Class    <?>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
371	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  Object.class,  type.getRawType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  Object.class,  type.getRawType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  Object.class,  type.getRawType();	  TypeToken    <    T>    constructor    =    Object.class.getRawType();    	non-compiled	[CE]  ';'  expected	95	None	replace
372	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  Object.class;  [CE]  incompatible  types  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  Object.class;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  Object.class;	  TypeToken    <    T>    constructor    =    Object.class.getRawType();    	non-compiled	[CE]  incompatible  types	95	None	replace
373	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  Object.class,  raw.getRawType();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  Object.class,  raw.getRawType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  Object.class,  raw.getRawType();	  TypeToken    <    T>    constructor    =    Object.class.getRawType();    	non-compiled	[CE]  ';'  expected	95	None	replace
374	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  Object.class,  scope.getRawType();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  Object.class,  scope.getRawType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  Object.class,  scope.getRawType();	  TypeToken    <    T>    constructor    =    Object.class.getRawType();    	non-compiled	[CE]  ';'  expected	95	None	replace
375	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =(Object)Object.class.getRawType();  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =(Object)Object.class.getRawType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =(Object)Object.class.getRawType();	  TypeToken    <    T>    constructor    =    Object.class.getRawType();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
376	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructorConstructor.create(this.constructor);  [CE]  cannot  find  symbol  constructor  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructorConstructor.create(this.constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.constructorConstructor.create(this.constructor);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson);    	non-compiled	[CE]  cannot  find  symbol  constructor	98	None	replace
377	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructorConstructor.create(this);  [CE]  constructorConstructor  has  private  access  in  Gson  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructorConstructor.create(this);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.constructorConstructor.create(this);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson);    	non-compiled	[CE]  constructorConstructor  has  private  access  in  Gson	98	None	replace
378	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.create(gson);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.create(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.create(gson);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
379	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructorConstructor();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructorConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.constructorConstructor();	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
380	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.create(gson,  raw);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.create(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.create(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
381	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.create(gson);  [CE]  cannot  find  symbol  constructorConstructor  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.create(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.create(gson);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson);    	non-compiled	[CE]  cannot  find  symbol  constructorConstructor	98	None	replace
382	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(gson.getConstructor());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.construct(gson.getConstructor());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.construct(gson.getConstructor());	  ObjectConstructor    <    T>    constructor    =    gson.construct(type.getConstructor());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
383	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.construct(gson.getConstructor());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.construct(gson.getConstructor());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.construct(gson.getConstructor());	  ObjectConstructor    <    T>    constructor    =    gson.construct(type.getConstructor());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
384	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.getConstructor().construct(gson.getConstructor());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.getConstructor().construct(gson.getConstructor());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.getConstructor().construct(gson.getConstructor());	  ObjectConstructor    <    T>    constructor    =    gson.construct(type.getConstructor());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
385	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.construct(gson.getConstructor());  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.construct(gson.getConstructor());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.construct(gson.getConstructor());	  ObjectConstructor    <    T>    constructor    =    gson.construct(type.getConstructor());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
386	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(gson.getConstructor());  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.construct(gson.getConstructor());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.construct(gson.getConstructor());	  ObjectConstructor    <    T>    constructor    =    gson.construct(type.getConstructor());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
387	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructor(gson.getConstructor());  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructor(gson.getConstructor());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.constructor(gson.getConstructor());	  ObjectConstructor    <    T>    constructor    =    gson.construct(type.getConstructor());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
388	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  raw);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
389	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  null);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  null);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
390	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  scope);  [CE]  cannot  find  symbol  scope  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  scope);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  scope);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  scope	45	None	replace
391	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(raw);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().findConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
392	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(type,  raw);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(type,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().findConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
393	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(gson);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(gson);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().findConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
394	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(null,  type);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(null,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(null,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().findConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
395	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  scope);  [CE]  cannot  find  symbol  scope  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  scope);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  scope);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  scope	49	None	replace
396	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type.getRawType());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type.getRawType());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type.getRawType());	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw,    type);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
397	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  deserialized);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  deserialized);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  deserialized	49	None	replace
398	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  null);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  null);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw,    type);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
399	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  raw);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw,    type);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
400	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  raw);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  raw);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    type);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	29	None	replace
401	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(raw,  type,  raw);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(raw,  type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(raw,  type,  raw);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
402	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  serializedName);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  serializedName);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	29	None	replace
403	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  scope);  [CE]  cannot  find  symbol  scope  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  scope);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  scope);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  scope	29	None	replace
404	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  context);  [CE]  cannot  find  symbol  context  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  context);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  context);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    scope);    	non-compiled	[CE]  cannot  find  symbol  context	41	None	replace
405	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  factory.construct(raw,  type);  [CE]  cannot  find  symbol  factory  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  factory.construct(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  factory.construct(raw,  type);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(type,    raw);    	non-compiled	[CE]  cannot  find  symbol  factory	64	None	replace
406	[BUG]  [BUGGY]  final  ObjectConstructor  <  T>  constructor  =  type.get(constructor);  [CE]  no  suitable  method  found  for  get(ObjectConstructor<T#1>)  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  final  ObjectConstructor  <  T>  constructor  =  type.get(constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	final  ObjectConstructor  <  T>  constructor  =  type.get(constructor);	  ObjectConstructor    <    T>    constructor    =    type.get(constructor);    	non-compiled	[CE]  no  suitable  method  found  for  get(ObjectConstructor<T#1>)	12	None	replace
407	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(gson,  constructor);  [CE]  no  suitable  method  found  for  get(Gson,ObjectConstructor<T#1>)  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(gson,  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(gson,  constructor);	  ObjectConstructor    <    T>    constructor    =    type.get(constructor);    	non-compiled	[CE]  no  suitable  method  found  for  get(Gson,ObjectConstructor<T#1>)	12	None	replace
408	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.get(raw);  [CE]  cannot  find  symbol  constructorConstructor  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.get(raw);	  ObjectConstructor    <    T>    constructor    =    super.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructorConstructor	77	None	replace
409	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.get(super.constructor);  [CE]  cannot  find  symbol  constructor  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.get(super.constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.get(super.constructor);	  ObjectConstructor    <    T>    constructor    =    super.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructor	77	None	replace
410	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.get(type);  [CE]  cannot  find  symbol  constructorConstructor  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    super.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructorConstructor	77	None	replace
411	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.get(raw,  type);  [CE]  cannot  find  symbol  constructorConstructor  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.get(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.get(raw,  type);	  ObjectConstructor    <    T>    constructor    =    super.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructorConstructor	77	None	replace
412	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.constructorConstructor.get(type);  [CE]  cannot  find  symbol  constructorConstructor  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    super.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructorConstructor	77	None	replace
413	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.get(super);  [CE]  '.'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.get(super);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.get(super);	  ObjectConstructor    <    T>    constructor    =    super.constructorConstructor.get(type);    	non-compiled	[CE]  '.'  expected	77	None	replace
414	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  raw,  type);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  raw,  type);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(gson,    raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	30	None	replace
415	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  type,  raw);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(gson,  type,  raw);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(gson,    raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	30	None	replace
416	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(gson,  type,  raw);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(gson,  type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(gson,  type,  raw);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
417	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(gson,  raw,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(gson,  raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(gson,  raw,  type);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
418	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(this.constructorConstructor);  [CE]  no  suitable  method  found  for  get(ConstructorConstructor)  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(this.constructorConstructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(this.constructorConstructor);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    >=    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  no  suitable  method  found  for  get(ConstructorConstructor)	82	None	replace
419	[BUG]  [BUGGY]  TypeToken  constructor  =  this.constructorConstructor.get(type);  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  constructor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  constructor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    >=    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  incompatible  types	82	None	replace
420	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.constructor();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.constructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.constructor();	  ObjectConstructor    <    T>    constructor    =    raw.build();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
421	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.raw.build();  [CE]  cannot  find  symbol  raw  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.raw.build();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.raw.build();	  ObjectConstructor    <    T>    constructor    =    raw.build();    	non-compiled	[CE]  cannot  find  symbol  raw	28	None	replace
422	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(gson);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(gson);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(raw);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
423	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.get();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.get();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.get();	  ObjectConstructor    <    T>    constructor    =    type.get();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
424	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get();	  ObjectConstructor    <    T>    constructor    =    type.get();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
425	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get().constructor;  [CE]  no  suitable  method  found  for  get()  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get().constructor;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get().constructor;	  ObjectConstructor    <    T>    constructor    =    type.get();    	non-compiled	[CE]  no  suitable  method  found  for  get()	5	None	replace
426	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get().construct(gson);  [CE]  no  suitable  method  found  for  get()  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get().construct(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get().construct(gson);	  ObjectConstructor    <    T>    constructor    =    type.get();    	non-compiled	[CE]  no  suitable  method  found  for  get()	5	None	replace
427	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get().construct(gson,  raw);  [CE]  no  suitable  method  found  for  get()  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get().construct(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get().construct(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    type.get();    	non-compiled	[CE]  no  suitable  method  found  for  get()	5	None	replace
428	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.types.getConstructor();  [CE]  cannot  find  symbol  types  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.types.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.types.getConstructor();	  ObjectConstructor    <    T>    constructor    =    types.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  types	70	None	replace
429	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  _types.getConstructor();  [CE]  cannot  find  symbol  _types  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  _types.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  _types.getConstructor();	  ObjectConstructor    <    T>    constructor    =    types.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  _types	70	None	replace
430	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.construct(gson,  constructor);  [CE]  cannot  find  symbol  types  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.construct(gson,  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.construct(gson,  constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson,    type);    	non-compiled	[CE]  cannot  find  symbol  types	61	None	replace
431	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  method.construct(gson,  type);  [CE]  cannot  find  symbol  method  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  method.construct(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  method.construct(gson,  type);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson,    type);    	non-compiled	[CE]  cannot  find  symbol  method	61	None	replace
432	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.getConstructor(gson);  [CE]  cannot  find  symbol  types  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.getConstructor(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.getConstructor(gson);	  ObjectConstructor    <    T>    constructor    =    gson.getConstructor(type);    	non-compiled	[CE]  cannot  find  symbol  types	35	None	replace
433	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.getConstructor(type);  [CE]  cannot  find  symbol  scope  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.getConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.getConstructor(type);	  ObjectConstructor    <    T>    constructor    =    gson.getConstructor(type);    	non-compiled	[CE]  cannot  find  symbol  scope	35	None	replace
434	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  null,  raw);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  null,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  null,  raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    null);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
435	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  null,  type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  null,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  null,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    null);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
436	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  this);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  this);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  this);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    null);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
437	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type,  null);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type,  null);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    null);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
438	[BUG]  [BUGGY]  final  ObjectConstructor  <  T>  constructor  =  type.getConstructor();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  final  ObjectConstructor  <  T>  constructor  =  type.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	final  ObjectConstructor  <  T>  constructor  =  type.getConstructor();	  ObjectConstructor    <    T>    constructor    =    gson,    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
439	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type,  scope.getConstructor();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type,  scope.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type,  scope.getConstructor();	  ObjectConstructor    <    T>    constructor    =    gson,    type.getConstructor();    	non-compiled	[CE]  ';'  expected	36	None	replace
440	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw,  type.getConstructor();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw,  type.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw,  type.getConstructor();	  ObjectConstructor    <    T>    constructor    =    gson,    type.getConstructor();    	non-compiled	[CE]  ';'  expected	36	None	replace
441	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type.name);  [CE]  cannot  find  symbol  name  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type.name);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type.name);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    type);    	non-compiled	[CE]  cannot  find  symbol  name	39	None	replace
442	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.type!=  null)?  this.type  :  type.getConstructor();  [CE]  cannot  find  symbol  type  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.type!=  null)?  this.type  :  type.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.type!=  null)?  this.type  :  type.getConstructor();	  ObjectConstructor    <    T>    constructor    =    this.type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	67	None	replace
443	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.type  ==  null)?  this.type  :  type.getConstructor();  [CE]  cannot  find  symbol  type  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.type  ==  null)?  this.type  :  type.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.type  ==  null)?  this.type  :  type.getConstructor();	  ObjectConstructor    <    T>    constructor    =    this.type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	67	None	replace
444	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  method);  [CE]  cannot  find  symbol  method  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  method);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  method);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    scope);    	non-compiled	[CE]  cannot  find  symbol  method	41	None	replace
445	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(scope,  type);  [CE]  cannot  find  symbol  scope  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(scope,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(scope,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().compute(type);    	non-compiled	[CE]  cannot  find  symbol  scope	114	None	replace
446	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.create(gson,  type);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.create(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.create(gson,  type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
447	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.create(gson,  type);  [CE]  cannot  find  symbol  scope  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.create(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.create(gson,  type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson,    type);    	non-compiled	[CE]  cannot  find  symbol  scope	99	None	replace
448	[BUG]  [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  [CE]  cannot  find  symbol  constructor  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    buildor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructor	9	None	replace
449	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  [CE]  cannot  find  symbol  constructor  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    buildor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructor	9	None	replace
450	[BUG]  [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  constructor  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    buildor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructor	9	None	replace
451	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(raw);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructorConstructor(raw);	  Constructor    <    T>    constructor    =    getConstructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
452	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructors.construct(type);  [CE]  cannot  find  symbol  constructors  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructors.construct(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructors.construct(type);	  ObjectConstructor    <    T>    constructor    =    type.construct(constructor);    	non-compiled	[CE]  cannot  find  symbol  constructors	63	None	replace
453	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructor.newInstance();  [CE]  cannot  find  symbol  constructor  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructor.newInstance();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.constructor.newInstance();	  ObjectConstructor    <    T>    constructor    =    gson.constructor.build();    	non-compiled	[CE]  cannot  find  symbol  constructor	115	None	replace
454	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.constructor.build();  [CE]  package  scope  does  not  exist  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.constructor.build();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.constructor.build();	  ObjectConstructor    <    T>    constructor    =    gson.constructor.build();    	non-compiled	[CE]  package  scope  does  not  exist	115	None	replace
455	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  gson,  type);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  gson,  type);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    type);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	59	None	replace
456	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  scope);  [CE]  cannot  find  symbol  scope  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  scope);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  scope);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  scope	59	None	replace
457	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  offset);  [CE]  cannot  find  symbol  offset  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  offset);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  offset);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  offset	59	None	replace
458	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorFactory().create(gson,  type);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorFactory().create(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorFactory().create(gson,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().create(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
459	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  type,  source);  [CE]  cannot  find  symbol  source  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  type,  source);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  type,  source);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().create(gson,    type);    	non-compiled	[CE]  cannot  find  symbol  source	46	None	replace
460	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(new  TypeToken(raw));  [CE]  TypeToken(Type)  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(new  TypeToken(raw));  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(new  TypeToken(raw));	  ObjectConstructor    <    T>    constructor    =    constructor.construct(new    TypeToken(type));    	non-compiled	[CE]  TypeToken(Type)  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package	106	None	replace
461	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.construct(new  TypeToken(type));  [CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.construct(new  TypeToken(type));  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.construct(new  TypeToken(type));	  ObjectConstructor    <    T>    constructor    =    constructor.construct(new    TypeToken(type));    	non-compiled	[CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)	106	None	replace
462	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.EMPTY;  [CE]  cannot  find  symbol  EMPTY  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.EMPTY;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  TypeToken.EMPTY;	  ObjectConstructor    <    T>    constructor    =    TypeToken.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  EMPTY	71	None	replace
463	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.fieldNamingStrategy.get(raw);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.fieldNamingStrategy.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.fieldNamingStrategy.get(raw);	  ObjectConstructor    <    T>    constructor    =    types.get(raw);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	2	None	replace
464	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(raw);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(raw);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(raw);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
465	[BUG]  [BUGGY]  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(raw);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(raw);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    final    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	8	None	replace
466	[BUG]  [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    final    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	8	None	replace
467	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    final    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	8	None	replace
468	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.newInstance();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.newInstance();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.newInstance();	  ObjectConstructor    <    T>    constructor    =    gson.build();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
469	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  name);  [CE]  cannot  find  symbol  name  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  name);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  name);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  name	29	None	replace
470	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  offset);  [CE]  cannot  find  symbol  offset  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  offset);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  offset);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  offset	29	None	replace
471	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Class  <?>  constructor  =  this.constructorConstructor.get(type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Class  <?>  constructor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Class  <?>  constructor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Class    <?>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	83	None	replace
472	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Class  <?>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Class  <?>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Class  <?>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Class    <?>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	83	None	replace
473	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Class  <?>  constructor  =  this.constructorConstructor.get(type);  }  else  {  return  new  Adapter  <  T>();  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Class  <?>  constructor  =  this.constructorConstructor.get(type);  }  else  {  return  new  Adapter  <  T>();  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Class  <?>  constructor  =  this.constructorConstructor.get(type);  }  else  {  return  new  Adapter  <  T>();  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Class    <?>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	83	None	replace
474	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawParameterType(0);  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  raw  =  type.getRawParameterType(0);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  raw  =  type.getRawParameterType(0);	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	19	None	replace
475	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  raw  =  type.getType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  raw  =  type.getType();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	19	None	replace
476	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingStrategy.construct(type.getConstructor());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingStrategy.construct(type.getConstructor());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  fieldNamingStrategy.construct(type.getConstructor());	  ObjectConstructor    <    T>    constructor    =    gson.construct(type.getConstructor());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
477	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.construct(type.getConstructor());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.construct(type.getConstructor());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.construct(type.getConstructor());	  ObjectConstructor    <    T>    constructor    =    gson.construct(type.getConstructor());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
478	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  factory.construct(type.getConstructor());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  factory.construct(type.getConstructor());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  factory.construct(type.getConstructor());	  ObjectConstructor    <    T>    constructor    =    gson.construct(type.getConstructor());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
479	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  extract(raw);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  extract(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  extract(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(extern);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
480	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    that.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	110	None	replace
481	[BUG]  [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    that.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	110	None	replace
482	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    that.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	110	None	replace
483	[BUG]  [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    that.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	110	None	replace
484	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.construct(type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.construct(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.construct(type);	  ObjectConstructor    <    T>    constructor    =    context.construct(type);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
485	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  this.constructorConstructor.get(type):  new  ObjectConstructor  <  T>();  [CE]  ObjectConstructor  is  abstract;  cannot  be  instantiated  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  this.constructorConstructor.get(type):  new  ObjectConstructor  <  T>();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  this.constructorConstructor.get(type):  new  ObjectConstructor  <  T>();	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    	non-compiled	[CE]  ObjectConstructor  is  abstract;  cannot  be  instantiated	79	None	replace
486	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(raw,  null);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(raw,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(raw,  null);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	72	None	replace
487	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.type.constructor();  [CE]  cannot  find  symbol  type  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.type.constructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.type.constructor();	  ObjectConstructor    <    T>    constructor    =    type.constructor();    	non-compiled	[CE]  cannot  find  symbol  type	69	None	replace
488	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.toObjectConstructor();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.toObjectConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.toObjectConstructor();	  ObjectConstructor    <    T>    constructor    =    type.constructor();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
489	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get(type,  raw);  [CE]  cannot  find  symbol  scope  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.get(type,  raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(type,    type);    	non-compiled	[CE]  cannot  find  symbol  scope	4	None	replace
490	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  target.get(type,  raw);  [CE]  cannot  find  symbol  target  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  target.get(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  target.get(type,  raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(type,    type);    	non-compiled	[CE]  cannot  find  symbol  target	4	None	replace
491	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  construct(raw);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  construct(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  construct(raw);	  ObjectConstructor    <    T>    constructor    =    context.construct(raw);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
492	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.construct(gson);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.construct(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.construct(gson);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.construct(raw);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
493	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperType();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	18	None	replace
494	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.newConstructor();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  gson.newConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  gson.newConstructor();	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
495	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.findConstructor(type);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  gson.findConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  gson.findConstructor(type);	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
496	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  source);  [CE]  cannot  find  symbol  source  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  source);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(gson,  source);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson);    	non-compiled	[CE]  cannot  find  symbol  source	62	None	replace
497	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.construct(gson);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.construct(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.construct(gson);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
498	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructors.construct(raw);  [CE]  cannot  find  symbol  constructors  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructors.construct(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructors.construct(raw);	  ObjectConstructor    <    T>    constructor    =    raw.construct(constructor);    	non-compiled	[CE]  cannot  find  symbol  constructors	57	None	replace
499	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  _constructor.getConstructor();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  _constructor.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  _constructor.getConstructor();	  Constructor    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
500	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get(gson,  raw);  [CE]  cannot  find  symbol  scope  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.get(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.get(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  scope	33	None	replace
501	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructors.get(gson,  raw);  [CE]  cannot  find  symbol  constructors  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructors.get(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructors.get(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.get(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  constructors	33	None	replace
502	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.construct(gson,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.construct(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.construct(gson,  type);	  ObjectConstructor    <    T>    constructor    =    gson.construct(type);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
503	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingStrategy.construct(type);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingStrategy.construct(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  fieldNamingStrategy.construct(type);	  ObjectConstructor    <    T>    constructor    =    gson.construct(type);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	102	None	replace
504	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructor.get(raw,  type);  [CE]  cannot  find  symbol  constructor  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructor.get(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructor.get(raw,  type);	  ObjectConstructor    <    T>    constructor    =    constructor.get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  constructor	31	None	replace
505	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(constructor,  type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(constructor,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(constructor,  type);	  ObjectConstructor    <    T>    constructor    =    constructor.get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
506	[BUG]  [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    TypeToken    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	10	None	replace
507	[BUG]  [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    TypeToken    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	10	None	replace
508	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  this.type);  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  this.type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  this.type);	  NodeTraversal.traverse(compiler,    gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  compiler	92	None	replace
509	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(null);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(null);	  ObjectConstructor    <    T>    constructor    =    type.get(constructor);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
510	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(key);  [CE]  cannot  find  symbol  key  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(key);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(key);	  ObjectConstructor    <    T>    constructor    =    type.get(constructor);    	non-compiled	[CE]  cannot  find  symbol  key	12	None	replace
511	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  [CE]  cannot  find  symbol  Type  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(Type);    	non-compiled	[CE]  cannot  find  symbol  Type	81	None	replace
512	[BUG]  [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(Type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	81	None	replace
513	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(Type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	81	None	replace
514	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  ObjectConstructor.class.getRawType();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  ObjectConstructor.class.getRawType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  ObjectConstructor.class.getRawType();	  TypeToken    <    T>    constructor    =    Object.class.getRawType();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
515	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  Object.class,  object.getRawType();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  Object.class,  object.getRawType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  Object.class,  object.getRawType();	  TypeToken    <    T>    constructor    =    Object.class.getRawType();    	non-compiled	[CE]  ';'  expected	95	None	replace
516	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  source.getConstructor();  [CE]  cannot  find  symbol  source  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  source.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  source.getConstructor();	  ObjectConstructor    <    T>    constructor    =    scope.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  source	37	None	replace
517	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  object.getConstructor();  [CE]  cannot  find  symbol  object  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  object.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  object.getConstructor();	  ObjectConstructor    <    T>    constructor    =    scope.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  object	37	None	replace
518	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(raw  ==  null)?  null  :  raw.getConstructor();  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(raw  ==  null)?  null  :  raw.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(raw  ==  null)?  null  :  raw.getConstructor();	  ObjectConstructor    <    T>    constructor    =    raw.getConstructor();    	non-compiled	[CE]  incompatible  types	100	None	replace
519	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  Object.class);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  Object.class);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructor(gson,  Object.class);	  Constructor    <    T>    constructor    =    getConstructor(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
520	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingStrategy.getConstructor(type);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingStrategy.getConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  fieldNamingStrategy.getConstructor(type);	  ObjectConstructor    <    T>    constructor    =    gson.getConstructor(type);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	35	None	replace
521	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(type!=  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	add	ObjectConstructor  <  T>  constructor  =(type!=  null)?  null  :  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    null    :    this.constructorConstructor.get(type);    	compilable	  [FE]  NullPointerException  	76	9	replace
522	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(type!=  null)?  null  :  this.constructorConstructor.get(type);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(type!=  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(type!=  null)?  null  :  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    null    :    this.constructorConstructor.get(type);    	compilable	  [FE]  NullPointerException  	76	9	replace
523	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >=  null)?  null  :  this.constructorConstructor.get(type);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      NullPointerException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >=  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  >=  null)?  null  :  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    null    :    this.constructorConstructor.get(type);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	76	None	replace
524	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.type.getConstructor(raw);  [CE]  cannot  find  symbol  type  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.type.getConstructor(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.type.getConstructor(raw);	  ObjectConstructor    <    T>    constructor    =    type.getConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol  type	68	None	replace
525	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  source.getConstructor(type);  [CE]  cannot  find  symbol  source  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  source.getConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  source.getConstructor(type);	  ObjectConstructor    <    T>    constructor    =    type.getConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol  source	68	None	replace
526	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.getConstructor(raw);  [CE]  cannot  find  symbol  context  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.getConstructor(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.getConstructor(raw);	  ObjectConstructor    <    T>    constructor    =    type.getConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol  context	68	None	replace
527	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.getType();  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.getType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.getType();	  ObjectConstructor    <    T>    constructor    =    type.get();    	non-compiled	[CE]  incompatible  types	5	None	replace
528	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.getFunction();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.getFunction();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.getFunction();	  ObjectConstructor    <    T>    constructor    =    type.get();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
529	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  inputs.get(type);  [CE]  cannot  find  symbol  inputs  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  inputs.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  inputs.get(type);	  ObjectConstructor    <    T>    constructor    =    input.get(type);    	non-compiled	[CE]  cannot  find  symbol  inputs	86	None	replace
530	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(value);  [CE]  cannot  find  symbol  value  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(value);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(value);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    >=    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  value	82	None	replace
531	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct(type.toString());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct(type.toString());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.construct(type.toString());	  ObjectConstructor    <    T>    constructor    =    gson.constructor();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
532	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(raw,  gson);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(raw,  gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(raw,  gson);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(gson);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
533	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingStrategy.get(type);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingStrategy.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  fieldNamingStrategy.get(type);	  ObjectConstructor    <    T>    constructor    =    scope.get(type);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	6	None	replace
534	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.fieldNamingStrategy.get(type);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.fieldNamingStrategy.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.fieldNamingStrategy.get(type);	  ObjectConstructor    <    T>    constructor    =    scope.get(type);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	6	None	replace
535	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.get(type);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.get(type);	  ObjectConstructor    <    T>    constructor    =    scope.get(type);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
536	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.fieldNamingPolicy.get(type);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.fieldNamingPolicy.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.fieldNamingPolicy.get(type);	  ObjectConstructor    <    T>    constructor    =    scope.get(type);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
537	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.fieldNamingStrategy.build();  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.fieldNamingStrategy.build();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.fieldNamingStrategy.build();	  ObjectConstructor    <    T>    constructor    =    factory.build();    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	90	None	replace
538	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.fieldNamingPolicy.build();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.fieldNamingPolicy.build();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.fieldNamingPolicy.build();	  ObjectConstructor    <    T>    constructor    =    factory.build();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
539	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  null);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  null);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    null);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	105	None	replace
540	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  type.getType();  [CE]  incompatible  types  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  type.getType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  type.getType();	  TypeToken    <    T>    constructor    =    type.getRawType();    	non-compiled	[CE]  incompatible  types	20	None	replace
541	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  raw.getRawType();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  raw.getRawType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  raw.getRawType();	  TypeToken    <    T>    constructor    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
542	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.build(raw);  [CE]  cannot  find  symbol  scope  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.build(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.build(raw);	  ObjectConstructor    <    T>    constructor    =    scope.build();    	non-compiled	[CE]  cannot  find  symbol  scope	27	None	replace
543	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  this.serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  this.serializedName);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  this.serializedName);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	104	None	replace
544	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  value);  [CE]  cannot  find  symbol  value  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  value);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  value);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    name);    	non-compiled	[CE]  cannot  find  symbol  value	104	None	replace
545	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  offset);  [CE]  cannot  find  symbol  offset  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  offset);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  offset);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  offset	49	None	replace
546	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  this);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  this);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  type,  this);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw,    type);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
547	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawParameterType(0);  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawParameterType(0);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <?  super  T>  raw  =  type.getRawParameterType(0);	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	108	None	replace
548	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawSuperType();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawSuperType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <?  super  T>  raw  =  type.getRawSuperType();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	108	None	replace
549	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawClass();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawClass();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <?  super  T>  raw  =  type.getRawClass();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	108	None	replace
550	[BUG]  [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	7	None	replace
551	[BUG]  [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	7	None	replace
552	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorFactory.get(raw,  type);  [CE]  cannot  find  symbol  constructorFactory  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorFactory.get(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorFactory.get(raw,  type);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(type,    raw);    	non-compiled	[CE]  cannot  find  symbol  constructorFactory	32	None	replace
553	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  raw,  null);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  raw,  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  raw,  null);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(type,    raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	32	None	replace
554	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raf,  type);  [CE]  cannot  find  symbol  raf  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raf,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raf,  type);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(type,    raw);    	non-compiled	[CE]  cannot  find  symbol  raf	32	None	replace
555	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(raw,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(raw,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
556	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  factory.construct(gson,  raw);  [CE]  cannot  find  symbol  factory  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  factory.construct(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  factory.construct(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  factory	56	None	replace
557	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(source);  [CE]  cannot  find  symbol  source  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(source);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(source);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(null);    	non-compiled	[CE]  cannot  find  symbol  source	89	None	replace
558	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(value);  [CE]  cannot  find  symbol  value  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(value);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(value);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(null);    	non-compiled	[CE]  cannot  find  symbol  value	89	None	replace
559	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(resource);  [CE]  cannot  find  symbol  resource  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(resource);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(resource);	  ObjectConstructor    <    T>    constructor    =    raw.get(raw);    	non-compiled	[CE]  cannot  find  symbol  resource	111	None	replace
560	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(this);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(this);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(this);	  ObjectConstructor    <    T>    constructor    =    raw.get(raw);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
561	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  gson.newConstructor();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  gson.newConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  gson.newConstructor();	  TypeToken    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
562	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  gson.findConstructor(type);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  gson.findConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  gson.findConstructor(type);	  TypeToken    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
563	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.construct(raw);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.construct(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.construct(raw);	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
564	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.create(gson);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.create(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.create(gson);	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
565	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(raw,  gson);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(raw,  gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructor(raw,  gson);	  Constructor    <    T>    constructor    =    getConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
566	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructorFor(raw);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructorFor(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructorFor(raw);	  Constructor    <    T>    constructor    =    getConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
567	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(type  ==  null)?  null  :  type.getConstructor();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(type  ==  null)?  null  :  type.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(type  ==  null)?  null  :  type.getConstructor();	  ObjectConstructor    <    T>    constructor    =    gson,    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
568	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type,  raw.getConstructor();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type,  raw.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type,  raw.getConstructor();	  ObjectConstructor    <    T>    constructor    =    gson,    type.getConstructor();    	non-compiled	[CE]  ';'  expected	36	None	replace
569	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(raf);  [CE]  cannot  find  symbol  raf  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(raf);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(raf);	  ObjectConstructor    <    T>    constructor    =    raw.get(constructor);    	non-compiled	[CE]  cannot  find  symbol  raf	51	None	replace
570	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(grails);  [CE]  cannot  find  symbol  grails  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(grails);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(grails);	  ObjectConstructor    <    T>    constructor    =    raw.get(constructor);    	non-compiled	[CE]  cannot  find  symbol  grails	51	None	replace
571	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(source);  [CE]  cannot  find  symbol  source  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(source);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(source);	  ObjectConstructor    <    T>    constructor    =    raw.get(constructor);    	non-compiled	[CE]  cannot  find  symbol  source	51	None	replace
572	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [CE]  cannot  find  symbol  types  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Constructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  types	11	None	replace
573	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(raw);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(raw);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Constructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
574	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [CE]  cannot  find  symbol  scope  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Constructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  scope	11	None	replace
575	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructorConstructor.create(this.constructorConstructor);  [CE]  constructorConstructor  has  private  access  in  Gson  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.constructorConstructor.create(this.constructorConstructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.constructorConstructor.create(this.constructorConstructor);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson);    	non-compiled	[CE]  constructorConstructor  has  private  access  in  Gson	98	None	replace
576	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  null,  new  TypeAdapter  <  T>());  [CE]  cannot  find  symbol  compiler  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  null,  new  TypeAdapter  <  T>());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  null,  new  TypeAdapter  <  T>());	  NodeTraversal.traverse(compiler,    gson,    new    TypeAdapter    <    T>());    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
577	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  constructor,  new  TypeAdapter  <  T>());  [CE]  cannot  find  symbol  compiler  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  constructor,  new  TypeAdapter  <  T>());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  constructor,  new  TypeAdapter  <  T>());	  NodeTraversal.traverse(compiler,    gson,    new    TypeAdapter    <    T>());    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
578	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>()));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>()));  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>()));	  NodeTraversal.traverse(compiler,    gson,    new    TypeAdapter    <    T>());    	non-compiled	[CE]  ';'  expected	94	None	replace
579	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(this);  [CE]  no  suitable  method  found  for  get(ReflectiveTypeAdapterFactory)  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(this);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(this);	  ObjectConstructor    <    T>    constructor    =    type.get(compiler);    	non-compiled	[CE]  no  suitable  method  found  for  get(ReflectiveTypeAdapterFactory)	15	None	replace
580	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(source);  [CE]  cannot  find  symbol  source  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(source);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(source);	  ObjectConstructor    <    T>    constructor    =    type.get(compiler);    	non-compiled	[CE]  cannot  find  symbol  source	15	None	replace
581	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  source.construct(type);  [CE]  cannot  find  symbol  source  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  source.construct(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  source.construct(type);	  ObjectConstructor    <    T>    constructor    =    type.construct(raw);    	non-compiled	[CE]  cannot  find  symbol  source	60	None	replace
582	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  resource.construct(raw);  [CE]  cannot  find  symbol  resource  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  resource.construct(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  resource.construct(raw);	  ObjectConstructor    <    T>    constructor    =    type.construct(raw);    	non-compiled	[CE]  cannot  find  symbol  resource	60	None	replace
583	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.create(gson);  [CE]  cannot  find  symbol  constructorConstructor  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.create(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.create(gson);	  ObjectConstructor    <    T>    constructor    =    super.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructorConstructor	77	None	replace
584	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingStrategy.findConstructor(type);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingStrategy.findConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  fieldNamingStrategy.findConstructor(type);	  ObjectConstructor    <    T>    constructor    =    gson.findConstructor(type);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	101	None	replace
585	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.findConstructor(type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.findConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.findConstructor(type);	  ObjectConstructor    <    T>    constructor    =    gson.findConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
586	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(null);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T#1  exist  so  that  TypeToken<T#1>  conforms  to  ObjectConstructor<T#2>  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(null);	  ObjectConstructor    <    T>    constructor    =    type.get(constraint);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T#1  exist  so  that  TypeToken<T#1>  conforms  to  ObjectConstructor<T#2>	13	None	replace
587	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(restricted);  [CE]  cannot  find  symbol  restricted  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(restricted);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(restricted);	  ObjectConstructor    <    T>    constructor    =    type.get(constraint);    	non-compiled	[CE]  cannot  find  symbol  restricted	13	None	replace
588	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.get(raw);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  fieldNamingPolicy.get(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(spec);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
589	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(Type.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.get(Type.class);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.get(Type.class);	  ObjectConstructor    <    T>    constructor    =    raw.get(spec);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
590	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().find(raw,  type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().find(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().find(raw,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(type,    raw);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
591	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(null,  type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(null,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().construct(null,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().construct(type);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
592	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  gson);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(raw,  gson);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
593	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(Type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(Type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	81	None	replace
594	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(Type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	81	None	replace
595	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.STRING;  [CE]  cannot  find  symbol  STRING  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.STRING;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  TypeToken.STRING;	  ObjectConstructor    <    T>    constructor    =    TypeToken.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  STRING	71	None	replace
596	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.cast(type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  TypeToken.cast(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  TypeToken.cast(type);	  ObjectConstructor    <    T>    constructor    =    TypeToken.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
597	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.boundFields.get(raw);  [CE]  cannot  find  symbol  boundFields  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.boundFields.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.boundFields.get(raw);	  ObjectConstructor    <    T>    constructor    =    types.get(raw);    	non-compiled	[CE]  cannot  find  symbol  boundFields	2	None	replace
598	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  deserialized);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  deserialized);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  deserialized	59	None	replace
599	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  this);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  this);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  this);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    type);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	59	None	replace
600	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  deserializedName);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(raw,  type,  deserializedName);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	59	None	replace
601	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  renderer.get(raw);  [CE]  cannot  find  symbol  renderer  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  renderer.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  renderer.get(raw);	  ObjectConstructor    <    T>    constructor    =    raw.get(spec);    	non-compiled	[CE]  cannot  find  symbol  renderer	54	None	replace
602	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  raw,  deserialized);  [CE]  cannot  find  symbol  compiler  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  raw,  deserialized);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  raw,  deserialized);	  NodeTraversal.traverse(compiler,    gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  compiler	92	None	replace
603	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  gson,  raw);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(type,  gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(type,    raw);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	32	None	replace
604	[BUG]  [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    TypeToken    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	10	None	replace
605	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    TypeToken    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	10	None	replace
606	[BUG]  [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  typeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  typeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  typeToken  <  T>  constructor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    TypeToken    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
607	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  _constructor.getConstructor();  [CE]  cannot  find  symbol  _constructor  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  _constructor.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  _constructor.getConstructor();	  TypeToken    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  _constructor	16	None	replace
608	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(raw,  null,  type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(raw,  null,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(raw,  null,  type);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    null);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
609	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  renderer.getConstructor(raw);  [CE]  cannot  find  symbol  renderer  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  renderer.getConstructor(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  renderer.getConstructor(raw);	  ObjectConstructor    <    T>    constructor    =    type.getConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol  renderer	68	None	replace
610	[BUG]  [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    final    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	8	None	replace
611	[BUG]  [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [CE]  cannot  find  symbol  constructor  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    final    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructor	8	None	replace
612	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  final  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    final    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	8	None	replace
613	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.construct(type);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.construct(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.construct(type);	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
614	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.create(raw);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.create(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.create(raw);	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
615	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.clone();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.clone();	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    	non-compiled	[CE]  clone()  has  protected  access  in  Object	74	None	replace
616	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  new  TypeToken  <  T>(type));  [CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  new  TypeToken  <  T>(type));  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().create(gson,  new  TypeToken  <  T>(type));	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().create(gson,    type);    	non-compiled	[CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)	46	None	replace
617	[BUG]  [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    that.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	110	None	replace
618	[BUG]  [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    that.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	110	None	replace
619	[BUG]  [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(raw  ==  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  constructor  =  that.constructorConstructor.get(type);  }  else  {  throw  new  IllegalStateException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    that.constructorConstructor.get(type);    	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	110	None	replace
620	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(type  ==  null)?  null  :  type.getConstructor();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =(type  ==  null)?  null  :  type.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =(type  ==  null)?  null  :  type.getConstructor();	  Constructor    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
621	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(type  ==  null)?  type.getConstructor()  :  null;  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =(type  ==  null)?  type.getConstructor()  :  null;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =(type  ==  null)?  type.getConstructor()  :  null;	  Constructor    <    T>    constructor    =    type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
622	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.getType();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.getType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.getType();	  ObjectConstructor    <    T>    constructor    =    type.get();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
623	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.type.get();  [CE]  cannot  find  symbol  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.type.get();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.type.get();	  ObjectConstructor    <    T>    constructor    =    type.get();    	non-compiled	[CE]  cannot  find  symbol  type	5	None	replace
624	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get();  [CE]  cannot  find  symbol  scope  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  scope.get();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  scope.get();	  ObjectConstructor    <    T>    constructor    =    type.get();    	non-compiled	[CE]  cannot  find  symbol  scope	5	None	replace
625	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().deserialize(gson,  type);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().deserialize(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().deserialize(gson,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().set(type);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
626	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  Object  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  Object  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor    ==    null)?    null    :    this.constructorConstructor.get(type);    Object  constructor  =(this.constructorConstructor  ==  null)?  null  :  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	73	None	add
627	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.type!=  null)?  this.type.getConstructor()  :  type.getConstructor();  [CE]  cannot  find  symbol  type  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.type!=  null)?  this.type.getConstructor()  :  type.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.type!=  null)?  this.type.getConstructor()  :  type.getConstructor();	  ObjectConstructor    <    T>    constructor    =    this.type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	67	None	replace
628	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.type!=  null)?  this.type.getConstructor()  :  type;  [CE]  cannot  find  symbol  type  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.type!=  null)?  this.type.getConstructor()  :  type;  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.type!=  null)?  this.type.getConstructor()  :  type;	  ObjectConstructor    <    T>    constructor    =    this.type.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	67	None	replace
629	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.get(this.constructorConstructor);  [CE]  cannot  find  symbol  constructorConstructor  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.get(this.constructorConstructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.get(this.constructorConstructor);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    >=    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructorConstructor	82	None	replace
630	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  target.getConstructor();  [CE]  cannot  find  symbol  target  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  target.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  target.getConstructor();	  ObjectConstructor    <    T>    constructor    =    scope.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  target	37	None	replace
631	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]    NullPointerException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  TypeToken  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    null    :    this.constructorConstructor.get(type);    TypeToken  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);	  	non-compiled	[CE]  variable  constructor  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	75	None	add
632	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  object.build();  [CE]  cannot  find  symbol  object  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  object.build();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  object.build();	  ObjectConstructor    <    T>    constructor    =    builder.build();    	non-compiled	[CE]  cannot  find  symbol  object	91	None	replace
633	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().computeValue(type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().computeValue(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().computeValue(type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().compute(type);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
634	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(this,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(this,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().compute(this,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().compute(type);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
635	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(type,  gson);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(type,  gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(type,  gson);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(gson,    type);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	61	None	replace
636	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(type,  gson,  raw);  [CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(type,  gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(type,  gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.construct(type,    raw);    	non-compiled	[CE]  method  construct  in  interface  ObjectConstructor<T#2>  cannot  be  applied  to  given  types;	64	None	replace
637	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type,  deserialized);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  type,  deserialized);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    type);    	non-compiled	[CE]  cannot  find  symbol  deserialized	39	None	replace
638	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.getType();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  raw.getType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  raw.getType();	  ObjectConstructor    <    T>    constructor    =    type.get(raw);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
639	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type,  constructor.getConstructor();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type,  constructor.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type,  constructor.getConstructor();	  ObjectConstructor    <    T>    constructor    =    gson,    type.getConstructor();    	non-compiled	[CE]  ';'  expected	36	None	replace
640	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor();	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(null);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
641	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson.getConstructor());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.construct(gson.getConstructor());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.construct(gson.getConstructor());	  ObjectConstructor    <    T>    constructor    =    gson.construct(type.getConstructor());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
642	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  construct(gson,  type.getConstructor());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  construct(gson,  type.getConstructor());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  construct(gson,  type.getConstructor());	  ObjectConstructor    <    T>    constructor    =    gson.construct(type.getConstructor());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
643	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  construct(type.getConstructor());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  construct(type.getConstructor());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  construct(type.getConstructor());	  ObjectConstructor    <    T>    constructor    =    gson.construct(type.getConstructor());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
644	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type.toString());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type.toString());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type.toString());	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
645	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  method.construct(raw);  [CE]  cannot  find  symbol  method  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  method.construct(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  method.construct(raw);	  ObjectConstructor    <    T>    constructor    =    context.construct(raw);    	non-compiled	[CE]  cannot  find  symbol  method	58	None	replace
646	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.compute();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.compute();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.compute();	  ObjectConstructor    <    T>    constructor    =    type.build();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
647	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  converter.get(raw,  type);  [CE]  cannot  find  symbol  converter  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  converter.get(raw,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  converter.get(raw,  type);	  ObjectConstructor    <    T>    constructor    =    constructor.get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  converter	31	None	replace
648	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.toString();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.toString();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.toString();	  ObjectConstructor    <    T>    constructor    =    type.constructor();    	non-compiled	[CE]  incompatible  types	69	None	replace
649	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(type.toString());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(type.toString());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructor(type.toString());	  ObjectConstructor    <    T>    constructor    =    getConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
650	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(type.getRawClass());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructor(type.getRawClass());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructor(type.getRawClass());	  ObjectConstructor    <    T>    constructor    =    getConstructor(type);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
651	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawPrefix();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  raw  =  type.getRawPrefix();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  raw  =  type.getRawPrefix();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	19	None	replace
652	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawName();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  raw  =  type.getRawName();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  raw  =  type.getRawName();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	19	None	replace
653	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawLocalName();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  raw  =  type.getRawLocalName();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  raw  =  type.getRawLocalName();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	19	None	replace
654	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.construct(type);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  gson.construct(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  gson.construct(type);	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
655	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.get(type);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.get(type);	  ObjectConstructor    <    T>    constructor    =    target.get(type);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
656	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.fieldNamingStrategy.construct(type);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  this.fieldNamingStrategy.construct(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  this.fieldNamingStrategy.construct(type);	  ObjectConstructor    <    T>    constructor    =    context.construct(type);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	65	None	replace
657	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  fieldNamingStrategy);  [CE]  cannot  find  symbol  compiler  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  fieldNamingStrategy);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  fieldNamingStrategy);	  NodeTraversal.traverse(compiler,    gson,    new    TypeAdapter    <    T>());    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
658	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  constructor);  [CE]  cannot  find  symbol  compiler  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  constructor);	  NodeTraversal.traverse(compiler,    gson,    new    TypeAdapter    <    T>());    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
659	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  null);  [CE]  cannot  find  symbol  compiler  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  null);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  null);	  NodeTraversal.traverse(compiler,    gson,    new    TypeAdapter    <    T>());    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
660	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  this);  [CE]  cannot  find  symbol  compiler  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  this);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	NodeTraversal.traverse(compiler,  gson,  new  TypeAdapter  <  T>(),  this);	  NodeTraversal.traverse(compiler,    gson,    new    TypeAdapter    <    T>());    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
661	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(primary);  [CE]  cannot  find  symbol  primary  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructor.get(primary);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructor.get(primary);	  ObjectConstructor    <    T>    constructor    =    raw.get(constructor);    	non-compiled	[CE]  cannot  find  symbol  primary	51	None	replace
662	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.construct(raw);  [CE]  cannot  find  symbol  constructorConstructor  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.construct(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.constructorConstructor.construct(raw);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.construct(raw);    	non-compiled	[CE]  cannot  find  symbol  constructorConstructor	80	None	replace
663	[BUG]  [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  constructor  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructor	7	None	replace
664	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  Object.class,  gson.getRawType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  Object.class,  gson.getRawType();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  Object.class,  gson.getRawType();	  TypeToken    <    T>    constructor    =    Object.class.getRawType();    	non-compiled	[CE]  ';'  expected	95	None	replace
665	[BUG]  [BUGGY]  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  [CE]  cannot  find  symbol  constructor  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    buildor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructor	9	None	replace
666	[BUG]  [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  [CE]  cannot  find  symbol  constructor  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type.isAssignableFrom(raw))  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    buildor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructor	9	None	replace
667	[BUG]  [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  constructor  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	if(type!=  null)  {  ObjectConstructor  <  T>  constructor  =  this.constructorConstructor.get(type);  ObjectConstructor  <  T>  buildor  =  this.constructorConstructor.get(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    ObjectConstructor    <    T>    buildor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructor	9	None	replace
668	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.findConstructor(type);  [CE]  cannot  find  symbol  types  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.findConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.findConstructor(type);	  ObjectConstructor    <    T>    constructor    =    gson.findConstructor(type);    	non-compiled	[CE]  cannot  find  symbol  types	101	None	replace
669	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.findConstructor(type);  [CE]  cannot  find  symbol  context  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.findConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.findConstructor(type);	  ObjectConstructor    <    T>    constructor    =    gson.findConstructor(type);    	non-compiled	[CE]  cannot  find  symbol  context	101	None	replace
670	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  type.getName());  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(gson,  type.getName());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructor(gson,  type.getName());	  Constructor    <    T>    constructor    =    getConstructor(gson,    type);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
671	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  this.type);  [CE]  cannot  find  symbol  type  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  this.type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(gson,  this.type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    types);    	non-compiled	[CE]  cannot  find  symbol  type	107	None	replace
672	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  new  ObjectConstructor  <  T>();  [CE]  ObjectConstructor  is  abstract;  cannot  be  instantiated  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  new  ObjectConstructor  <  T>();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  this.constructorConstructor.get(type):  new  ObjectConstructor  <  T>();	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    this.constructorConstructor.get(type):    null;    	non-compiled	[CE]  ObjectConstructor  is  abstract;  cannot  be  instantiated	79	None	replace
673	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  target.get(type,  type);  [CE]  cannot  find  symbol  target  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  target.get(type,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  target.get(type,  type);	  ObjectConstructor    <    T>    constructor    =    raw.get(type,    type);    	non-compiled	[CE]  cannot  find  symbol  target	4	None	replace
674	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawSuperClass();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawSuperClass();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <?  super  T>  raw  =  type.getRawSuperClass();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	108	None	replace
675	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawPrefix();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawPrefix();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <?  super  T>  raw  =  type.getRawPrefix();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	108	None	replace
676	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawPrimitive();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawPrimitive();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <?  super  T>  raw  =  type.getRawPrimitive();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	108	None	replace
677	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  type.get(serializedName);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  type.get(serializedName);	  ObjectConstructor    <    T>    constructor    =    type.get(constraint);    	non-compiled	[CE]  cannot  find  symbol  serializedName	13	None	replace
678	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  createConstructorConstructor(gson,  type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  createConstructorConstructor(gson,  type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  createConstructorConstructor(gson,  type);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
679	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  this.constructorConstructor.get(type);  Class  <?>  constructor  =  this.constructorConstructor.get(raw);  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  raw  =  this.constructorConstructor.get(type);  Class  <?>  constructor  =  this.constructorConstructor.get(raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  raw  =  this.constructorConstructor.get(type);  Class  <?>  constructor  =  this.constructorConstructor.get(raw);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Class    <?>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	83	None	replace
680	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawType();  Class  <?>  constructor  =  this.constructorConstructor.get(type);  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  raw  =  type.getRawType();  Class  <?>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  raw  =  type.getRawType();  Class  <?>  constructor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Class    <?>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	83	None	replace
681	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  excluder.get(source);  [CE]  cannot  find  symbol  source  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  excluder.get(source);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  excluder.get(source);	  ObjectConstructor    <    T>    constructor    =    raw.get(extern);    	non-compiled	[CE]  cannot  find  symbol  source	112	None	replace
682	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.getConstructor().build();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.getConstructor().build();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.getConstructor().build();	  ObjectConstructor    <    T>    constructor    =    gson.constructor.build();    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
683	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =(raw  ==  null)?  type.getConstructor()  :  raw.getConstructor();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =(raw  ==  null)?  type.getConstructor()  :  raw.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =(raw  ==  null)?  type.getConstructor()  :  raw.getConstructor();	  ObjectConstructor    <    T>    constructor    =    raw.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
684	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(gson,  constructor);  [CE]  cannot  find  symbol  types  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(gson,  constructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.get(gson,  constructor);	  ObjectConstructor    <    T>    constructor    =    constructor.get(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  types	33	None	replace
685	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  renderer.get(gson,  raw);  [CE]  cannot  find  symbol  renderer  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  renderer.get(gson,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  renderer.get(gson,  raw);	  ObjectConstructor    <    T>    constructor    =    constructor.get(gson,    raw);    	non-compiled	[CE]  cannot  find  symbol  renderer	33	None	replace
686	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(new  TypeToken(type));  [CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(new  TypeToken(type));  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().findConstructor(new  TypeToken(type));	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().findConstructor(type);    	non-compiled	[CE]  no  suitable  constructor  found  for  TypeToken(TypeToken<T>)	47	None	replace
687	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [CE]  cannot  find  symbol  constructorConstructor  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.get(type);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Constructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructorConstructor	11	None	replace
688	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(this.constructorConstructor);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [CE]  cannot  find  symbol  types  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.get(this.constructorConstructor);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.get(this.constructorConstructor);  Constructor  <  T>  constructor  =  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.get(type);    Constructor    <    T>    constructor    =    this.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  types	11	None	replace
689	[BUG]  [BUGGY]  TypeToken  <  T>  constructor  =  type.getRawClass();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  TypeToken  <  T>  constructor  =  type.getRawClass();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	TypeToken  <  T>  constructor  =  type.getRawClass();	  TypeToken    <    T>    constructor    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
690	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.build();  [CE]  cannot  find  symbol  types  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.build();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.build();	  ObjectConstructor    <    T>    constructor    =    raw.build();    	non-compiled	[CE]  cannot  find  symbol  types	28	None	replace
691	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(null,  gson);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(null,  gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructorConstructor(null,  gson);	  Constructor    <    T>    constructor    =    getConstructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
692	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructorConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructorConstructor(type);	  Constructor    <    T>    constructor    =    getConstructorConstructor(gson);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
693	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(raw.getRawClass());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Constructor  <  T>  constructor  =  getConstructor(raw.getRawClass());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Constructor  <  T>  constructor  =  getConstructor(raw.getRawClass());	  Constructor    <    T>    constructor    =    getConstructor(raw);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
694	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperClass();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperClass();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperClass();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	18	None	replace
695	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawPrimitive();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawPrimitive();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Class  <?  super  T>  raw  =  type.getRawPrimitive();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	18	None	replace
696	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperclass();  [CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperclass();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperclass();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  <T>create(Gson,TypeToken<T>)	18	None	replace
697	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct(type.getRawClass());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.construct(type.getRawClass());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.construct(type.getRawClass());	  ObjectConstructor    <    T>    constructor    =    gson.build();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
698	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.get(type,  raw);  [CE]  cannot  find  symbol  constructorConstructor  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.get(type,  raw);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  super.constructorConstructor.get(type,  raw);	  ObjectConstructor    <    T>    constructor    =    super.constructorConstructor.get(type);    	non-compiled	[CE]  cannot  find  symbol  constructorConstructor	77	None	replace
699	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  final  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	add	final  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    null    :    this.constructorConstructor.get(type);    	compilable	  [FE]  NullPointerException  	76	9	replace
700	[BUG]  [BUGGY]  final  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  final  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	final  ObjectConstructor  <  T>  constructor  =(this.constructorConstructor!=  null)?  null  :  this.constructorConstructor.get(type);	  ObjectConstructor    <    T>    constructor    =(this.constructorConstructor!=    null)?    null    :    this.constructorConstructor.get(type);    	compilable	  [FE]  NullPointerException  	76	9	replace
701	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.constructorConstructor.create(gson);  [CE]  package  context  does  not  exist  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.constructorConstructor.create(gson);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.constructorConstructor.create(gson);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson);    	non-compiled	[CE]  package  context  does  not  exist	98	None	replace
702	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  new  ObjectConstructor(this.constructorConstructor);  [CE]  ObjectConstructor  is  abstract;  cannot  be  instantiated  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  new  ObjectConstructor(this.constructorConstructor);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  new  ObjectConstructor(this.constructorConstructor);	  ObjectConstructor    <    T>    constructor    =    this.constructorConstructor.create(gson);    	non-compiled	[CE]  ObjectConstructor  is  abstract;  cannot  be  instantiated	98	None	replace
703	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  deserialized);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  deserialized);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  deserialized	45	None	replace
704	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  deserializedName);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  deserializedName);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	45	None	replace
705	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  this);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  this);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor().get(raw,  type,  this);	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor().get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
706	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type,  raw.getRawClass());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type,  raw.getRawClass());  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  getConstructorConstructor(type,  raw.getRawClass());	  ObjectConstructor    <    T>    constructor    =    getConstructorConstructor(raw.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
707	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.toObjectConstructor();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  gson.toObjectConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  gson.toObjectConstructor();	  ObjectConstructor    <    T>    constructor    =    gson.constructor();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
708	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  deserializedName);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  deserializedName);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	29	None	replace
709	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  deserialized);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  deserialized);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  deserialized	29	None	replace
710	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  this);  [CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  this);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  constructorConstructor.get(raw,  type,  this);	  ObjectConstructor    <    T>    constructor    =    constructorConstructor.get(raw,    type);    	non-compiled	[CE]  method  get  in  class  ConstructorConstructor  cannot  be  applied  to  given  types;	29	None	replace
711	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.getConstructor(type);  [CE]  cannot  find  symbol  types  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  types.getConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  types.getConstructor(type);	  ObjectConstructor    <    T>    constructor    =    gson.getConstructor(type);    	non-compiled	[CE]  cannot  find  symbol  types	35	None	replace
712	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.getConstructor(type);  [CE]  cannot  find  symbol  context  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  context.getConstructor(type);  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  context.getConstructor(type);	  ObjectConstructor    <    T>    constructor    =    gson.getConstructor(type);    	non-compiled	[CE]  cannot  find  symbol  context	35	None	replace
713	[BUG]  [BUGGY]  ObjectConstructor  <  T>  constructor  =  _constructor.getConstructor();  [CE]  cannot  find  symbol  _constructor  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();  if  (!Object.class.isAssignableFrom(raw))  {  return  null;  //  it's  a  primitive!  }      [BUGGY]  ObjectConstructor  <  T>  constructor  =  _constructor.getConstructor();  [BUGGY]      return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	99	99	1	replace	ObjectConstructor  <  T>  constructor  =  _constructor.getConstructor();	  ObjectConstructor    <    T>    constructor    =    types.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  _constructor	70	None	replace
