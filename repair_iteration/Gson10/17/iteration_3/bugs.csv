bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(fieldType);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	Constructor  <?>  constructor  =  context.getConstructor(fieldType);	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
2	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldType.getConstructor();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  Constructor  <?>  constructor  =  fieldType.getConstructor();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	Constructor  <?>  constructor  =  fieldType.getConstructor();	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
3	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldConstructor.getConstructor();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  Constructor  <?>  constructor  =  fieldConstructor.getConstructor();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	Constructor  <?>  constructor  =  fieldConstructor.getConstructor();	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
4	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(name);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(name);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	Constructor  <?>  constructor  =  context.getConstructor(name);	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
5	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(fieldType,  deserialize);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(fieldType,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	Constructor  <?>  constructor  =  context.getConstructor(fieldType,  deserialize);	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
6	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
7	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getDeclaringClass(),  deserialize);  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getDeclaringClass(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getDeclaringClass(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaringClass());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	112	None	replace
8	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getDeclaringClass());  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaringClass());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	112	None	replace
9	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getDeclaringClass());  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaringClass());    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	112	None	replace
10	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getPrimitiveType(),  deserialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getPrimitiveType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getPrimitiveType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	59	None	replace
11	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getPrimitiveType(),  serialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getPrimitiveType(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getPrimitiveType(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	59	None	replace
12	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getPrimitiveType(),  fieldValue,  deserialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getPrimitiveType(),  fieldValue,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getPrimitiveType(),  fieldValue,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
13	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getPrimitiveType(),  fieldType);  [CE]  cannot  find  symbol  fieldValue  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getPrimitiveType(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getPrimitiveType(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	59	None	replace
14	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getPrimitiveType(),  deserialize);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getPrimitiveType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getPrimitiveType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
15	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getPrimitiveType());  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getPrimitiveType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	58	None	replace
16	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getPrimitiveType());  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getPrimitiveType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol  fields	58	None	replace
17	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getDeclaringClass(),  deserialize);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getDeclaringClass(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getDeclaringClass(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
18	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getDeclaringClass());  [CE]  cannot  find  symbol  constructor  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  constructor	16	None	replace
19	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getDeclaredType());  [CE]  cannot  find  symbol  typeAdapter  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingStrategy.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	119	None	replace
20	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getDeclaredType());  [CE]  cannot  find  symbol  fields  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingStrategy.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol  fields	119	None	replace
21	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldNamingPolicy.getDeclaredType()  :  null);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldNamingPolicy.getDeclaredType()  :  null);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldNamingPolicy.getDeclaredType()  :  null);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingStrategy.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
22	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getSerialize());  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getSerialize());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	75	None	replace
23	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getSerialize());  [CE]  cannot  find  symbol  typeAdapter  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getSerialize());    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	75	None	replace
24	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type,  fieldValue.getSerialize());  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type,  fieldValue.getSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(type,  fieldValue.getSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getSerialize());    	non-compiled	[CE]  cannot  find  symbol  type	75	None	replace
25	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getSerialize());  [CE]  cannot  find  symbol  value  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getSerialize());    	non-compiled	[CE]  cannot  find  symbol  value	75	None	replace
26	[BUG]  [BUGGY]  ObjectConstructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>)  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  fieldType);	  ObjectConstructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>)	105	None	replace
27	[BUG]  [BUGGY]  ObjectConstructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  serialize);	  ObjectConstructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	105	None	replace
28	[BUG]  [BUGGY]  ObjectConstructor  <?>  constructor  =  fieldType.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  <?>  constructor  =  fieldType.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  <?>  constructor  =  fieldType.getAnnotation(JsonAdapter.class);	  ObjectConstructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
29	[BUG]  [BUGGY]  ObjectConstructor  <?>  constructor  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  <?>  constructor  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  <?>  constructor  =  context.getAnnotation(JsonAdapter.class);	  ObjectConstructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
30	[BUG]  [BUGGY]  ObjectConstructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String)  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  name);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  name);	  ObjectConstructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String)	105	None	replace
31	[BUG]  [BUGGY]  ObjectConstructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class,  fieldValue);	  ObjectConstructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	105	None	replace
32	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getDeserialize());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getDeserialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getDeserialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
33	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getDeserialize());  [CE]  boolean  cannot  be  dereferenced  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getDeserialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getDeserialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getDeserialize());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	13	None	replace
34	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getDeserialize()  :  deserialize);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getDeserialize()  :  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getDeserialize()  :  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
35	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeserialize());  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeserialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeserialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
36	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize  |  context.getDeserialize());  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize  |  context.getDeserialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize  |  context.getDeserialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
37	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getRawClass());  [CE]  cannot  find  symbol  constructor  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getRawClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getRawClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getRawClass());    	non-compiled	[CE]  cannot  find  symbol  constructor	21	None	replace
38	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.toArray());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.toArray());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.toArray());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
39	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor,  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor,  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor,	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	2	None	replace
40	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	2	None	replace
41	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapt  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapt  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapt	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	2	None	replace
42	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor,  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor,  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor,	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	2	None	replace
43	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isSerialize(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor,  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isSerialize(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor,  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isSerialize(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor,	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	2	None	replace
44	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getPrimitiveType(),  deserialize);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getPrimitiveType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getPrimitiveType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
45	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getQualifiedName(),  serialize,  deserialize);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getQualifiedName(),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getQualifiedName(),  serialize,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getQualifiedName(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
46	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getQualifiedName(),  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getQualifiedName(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getQualifiedName(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getQualifiedName(),    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	50	None	replace
47	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getQualifiedName(),  deserialize);  [CE]  boolean  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getQualifiedName(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getQualifiedName(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getQualifiedName(),    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	50	None	replace
48	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getQualifiedName(),  deserialize);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getQualifiedName(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getQualifiedName(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getQualifiedName(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
49	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getQualifiedName(),  deserialize);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getQualifiedName(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getQualifiedName(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getQualifiedName(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
50	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
51	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isSerialize(fieldType.getClass());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isSerialize(fieldType.getClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isSerialize(fieldType.getClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
52	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isSerialize(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isSerialize(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isSerialize(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
53	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isLiteral(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isLiteral(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isLiteral(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
54	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.is  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.is  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.is	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  ';'  expected	110	None	replace
55	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
56	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serialize).booleanValue();  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serialize).booleanValue();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serialize).booleanValue();	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass()).booleanValue();    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	114	None	replace
57	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass())&&  fieldValue.booleanValue();  [CE]  cannot  find  symbol  fieldValue  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass())&&  fieldValue.booleanValue();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass())&&  fieldValue.booleanValue();	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass()).booleanValue();    	non-compiled	[CE]  cannot  find  symbol  fieldValue	114	None	replace
58	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass()),  serialize,  booleanValue();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass()),  serialize,  booleanValue();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass()),  serialize,  booleanValue();	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass()).booleanValue();    	non-compiled	[CE]  ';'  expected	114	None	replace
59	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass()),  fieldValue.booleanValue();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass()),  fieldValue.booleanValue();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass()),  fieldValue.booleanValue();	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass()).booleanValue();    	non-compiled	[CE]  ';'  expected	114	None	replace
60	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getClass()).booleanValue();  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getClass()).booleanValue();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getClass()).booleanValue();	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass()).booleanValue();    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	114	None	replace
61	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeclaringClass(),  deserialize);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeclaringClass(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeclaringClass(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
62	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.class);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
63	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.findDeclaringClass());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.findDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.findDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
64	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeclaringClass(),  serialize);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeclaringClass(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeclaringClass(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
65	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.declaringClass());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.declaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.declaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
66	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.generateDeclaringClass());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.generateDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.generateDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
67	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.toSerialize());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.toSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.toSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getSerialize());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
68	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.serialize());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.serialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.serialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getSerialize());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
69	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serializedName.getDeserialize());  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serializedName.getDeserialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serializedName.getDeserialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    typeAdapter.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol  serializedName	82	None	replace
70	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  JsonAdapter.class.getAnnotation(JsonAdapter.class));  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  JsonAdapter.class.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  JsonAdapter.class.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	27	None	replace
71	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getAnnotation(JsonAdapter.class));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
72	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getAnnotation(JsonAdapter.class));  [CE]  cannot  find  symbol  fields  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol  fields	27	None	replace
73	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  FieldUtils.getAnnotation(JsonAdapter.class));  [CE]  cannot  find  symbol  FieldUtils  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  FieldUtils.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  FieldUtils.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	27	None	replace
74	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldAdapter.getAnnotation(JsonAdapter.class));  [CE]  cannot  find  symbol  fieldAdapter  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldAdapter.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldAdapter.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol  fieldAdapter	27	None	replace
75	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getRawClass());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getRawClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getRawClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
76	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getRawClass(),  deserialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getRawClass(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getRawClass(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
77	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getRawClass(),  serialize);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getRawClass(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getRawClass(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
78	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getRawClass());  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getRawClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getRawClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getRawClass());    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	23	None	replace
79	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getKey(),  serialize);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getKey(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getKey(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getKey());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
80	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getKey(),  deserialize);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getKey(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getKey(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getKey());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
81	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getKey());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getKey());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getKey());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getKey());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
82	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getKey(),  fieldValue);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getKey(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getKey(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getKey());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
83	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getKey());  [CE]  cannot  find  symbol  fieldValue  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getKey());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getKey());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getKey());    	non-compiled	[CE]  cannot  find  symbol  fieldValue	37	None	replace
84	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  serialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getDeclaringClass());    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	85	None	replace
85	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  deserialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getDeclaringClass());    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	85	None	replace
86	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  typeAdapter);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  typeAdapter);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	85	None	replace
87	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  description);  [CE]  cannot  find  symbol  description  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  description);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  description);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  description	85	None	replace
88	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getReturnType(),  fieldValue,  deserialize);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getReturnType(),  fieldValue,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getReturnType(),  fieldValue,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
89	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getReturnType(),  fieldValue,  serialize);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getReturnType(),  fieldValue,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getReturnType(),  fieldValue,  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
90	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getReturnType(),  deserialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getReturnType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getReturnType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	47	None	replace
91	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getValue(),  deserialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getValue(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getValue(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getValue(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	35	None	replace
92	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getValue(),  fieldValue,  deserialize);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getValue(),  fieldValue,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getValue(),  fieldValue,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getValue(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
93	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getValue(),  fieldType);  [CE]  cannot  find  symbol  fieldValue  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getValue(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getValue(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getValue(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	35	None	replace
94	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getValue(),  serialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getValue(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getValue(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getValue(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	35	None	replace
95	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getValue());  [CE]  boolean  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getValue());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    typeAdapter.getValue());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	103	None	replace
96	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  method.getValue());  [CE]  cannot  find  symbol  method  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  method.getValue());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  method.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    typeAdapter.getValue());    	non-compiled	[CE]  cannot  find  symbol  method	103	None	replace
97	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
98	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaringClass(),  deserialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaringClass(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaringClass(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
99	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaringClass(),  serialize);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaringClass(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaringClass(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
100	[BUG]  [BUGGY]  TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class,  serialize);  [CE]  variable  fieldType  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class,  serialize);	  TypeToken    <?>    fieldType    =    field.getAnnotation(Serialize.class);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	107	None	replace
101	[BUG]  [BUGGY]  TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class,  name);  [CE]  variable  fieldType  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class,  name);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class,  name);	  TypeToken    <?>    fieldType    =    field.getAnnotation(Serialize.class);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	107	None	replace
102	[BUG]  [BUGGY]  TypeToken  <?>  fieldType  =  context.getAnnotation(Serialize.class);  [CE]  variable  fieldType  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  fieldType  =  context.getAnnotation(Serialize.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  fieldType  =  context.getAnnotation(Serialize.class);	  TypeToken    <?>    fieldType    =    field.getAnnotation(Serialize.class);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	107	None	replace
103	[BUG]  [BUGGY]  TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class,  deserialize);  [CE]  variable  fieldType  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class,  deserialize);	  TypeToken    <?>    fieldType    =    field.getAnnotation(Serialize.class);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	107	None	replace
104	[BUG]  [BUGGY]  TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class),  serialize,  deserialize);	  TypeToken    <?>    fieldType    =    field.getAnnotation(Serialize.class);    	non-compiled	[CE]  ';'  expected	107	None	replace
105	[BUG]  [BUGGY]  TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class,  Serialize.class);  [CE]  variable  fieldType  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class,  Serialize.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class,  Serialize.class);	  TypeToken    <?>    fieldType    =    field.getAnnotation(Serialize.class);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	107	None	replace
106	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor(serialize);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor(serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	Constructor  <?>  constructor  =  field.getConstructor(serialize);	  Constructor    <?>    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
107	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor(name);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor(name);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	Constructor  <?>  constructor  =  field.getConstructor(name);	  Constructor    <?>    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
108	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor(fieldType);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor(fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	Constructor  <?>  constructor  =  field.getConstructor(fieldType);	  Constructor    <?>    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
109	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  jsonAdapterPresent.getAnnotation(JsonAdapter.class));  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  jsonAdapterPresent.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  jsonAdapterPresent.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    typeAdapter.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	29	None	replace
110	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  method.getAnnotation(JsonAdapter.class));  [CE]  cannot  find  symbol  method  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  method.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  method.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    typeAdapter.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol  method	29	None	replace
111	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getValue(),  deserialize);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getValue(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getValue(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getValue());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
112	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getValue());  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getValue());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getValue());    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	36	None	replace
113	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.toString());  [CE]  cannot  find  symbol  fieldValue  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.toString());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.toString());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getValue());    	non-compiled	[CE]  cannot  find  symbol  fieldValue	36	None	replace
114	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,boolean)  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class,  serialize);	  TypeToken    <?>    mapped    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,boolean)	66	None	replace
115	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,String)  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class,  name);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class,  name);	  TypeToken    <?>    mapped    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,String)	66	None	replace
116	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getAnnotation(TypeToken.class);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getAnnotation(TypeToken.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  fieldType.getAnnotation(TypeToken.class);	  TypeToken    <?>    mapped    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
117	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.TYPE,  fieldType);  [CE]  cannot  find  symbol  TYPE  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.TYPE,  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.TYPE,  fieldType);	  TypeToken    <?>    mapped    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  cannot  find  symbol  TYPE	66	None	replace
118	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.TYPE_OBJECT,  fieldType);  [CE]  cannot  find  symbol  TYPE_OBJECT  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.TYPE_OBJECT,  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.TYPE_OBJECT,  fieldType);	  TypeToken    <?>    mapped    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  cannot  find  symbol  TYPE_OBJECT	66	None	replace
119	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class,  typeAdapter);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class,  typeAdapter);	  TypeToken    <?>    mapped    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	66	None	replace
120	[BUG]  [BUGGY]  if(fieldType.isPrimitive())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.isPrimitive())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.isPrimitive())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    Final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
121	[BUG]  [BUGGY]  if(fieldType.getClass()!=  fieldType.getClass())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  cannot  find  symbol  isPrimitive  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()!=  fieldType.getClass())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()!=  fieldType.getClass())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    Final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	87	None	replace
122	[BUG]  [BUGGY]  if(fieldType.getClass()!=  fieldType.getClass())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  cannot  find  symbol  isPrimitive  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()!=  fieldType.getClass())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()!=  fieldType.getClass())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    Final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	87	None	replace
123	[BUG]  [BUGGY]  if(fieldType.isPrimitive())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.isPrimitive())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.isPrimitive())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    Final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
124	[BUG]  [BUGGY]  if(fieldType.getClass()!=  fieldType.getClass())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()!=  fieldType.getClass())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()!=  fieldType.getClass())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    Final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
125	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serialize,  deserialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serialize,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass(),    serialize);    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	116	None	replace
126	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getClass(),  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getClass(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getClass(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass(),    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	116	None	replace
127	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  fieldValue,  serialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  fieldValue,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  fieldValue,  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass(),    serialize);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	116	None	replace
128	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serializedName,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serializedName,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass(),    serialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	116	None	replace
129	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type.getClass(),  serialize);  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type.getClass(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(type.getClass(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass(),    serialize);    	non-compiled	[CE]  cannot  find  symbol  type	116	None	replace
130	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context.getClass(),  fieldType.getClass(),  serialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context.getClass(),  fieldType.getClass(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(context.getClass(),  fieldType.getClass(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass(),    serialize);    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	116	None	replace
131	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getClass(),  serialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getClass(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getClass(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass(),    serialize);    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	116	None	replace
132	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getReturnType(),  deserialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getReturnType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getReturnType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
133	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getReturnType(),  serialize);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getReturnType(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getReturnType(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
134	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getValue());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getValue());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getValue());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
135	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getValue(),  deserialize);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getValue(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getValue(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getValue());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
136	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getValue(),  serialize);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getValue(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getValue(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getValue());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
137	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getValue());  [CE]  cannot  find  symbol  constructor  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getValue());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getValue());    	non-compiled	[CE]  cannot  find  symbol  constructor	101	None	replace
138	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeserialize());  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeserialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeserialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    constructor.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	83	None	replace
139	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getQualifiedName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
140	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.toString());  [CE]  boolean  cannot  be  dereferenced  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.toString());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.toString());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getQualifiedName());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	52	None	replace
141	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getQualifiedName());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
142	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  name.getQualifiedName());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  name.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  name.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
143	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getReturnType());  [CE]  cannot  find  symbol  typeAdapter  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getReturnType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getReturnType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getReturnType());    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	49	None	replace
144	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getReturnType());  [CE]  cannot  find  symbol  value  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getReturnType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getReturnType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getReturnType());    	non-compiled	[CE]  cannot  find  symbol  value	49	None	replace
145	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaringClass(),  serialize,  deserialize);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaringClass(),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaringClass(),  serialize,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaringClass(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
146	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaringClass(),  deserialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaringClass(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaringClass(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaringClass(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	15	None	replace
147	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getReturnType());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getReturnType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getReturnType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
148	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getReturnType());  [CE]  boolean  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getReturnType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getReturnType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getReturnType());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	113	None	replace
149	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getReturnType(),  deserialize);  [CE]  boolean  cannot  be  dereferenced  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getReturnType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getReturnType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getReturnType());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	113	None	replace
150	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getRawClass());  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getRawClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getRawClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    typeAdapter.getRawClass());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	91	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  serializedName,  deserialize);  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  serializedName,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	NodeTraversal.traverse(compiler,  fieldType,  serializedName,  deserialize);	  NodeTraversal.traverse(compiler,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	97	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fieldValue,  serialize,  deserialize);  [CE]  cannot  find  symbol  compiler  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  NodeTraversal.traverse(compiler,  fieldValue,  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	NodeTraversal.traverse(compiler,  fieldValue,  serialize,  deserialize);	  NodeTraversal.traverse(compiler,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	97	None	replace
153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  serialize,  deserialize,  isPrimitive);  [CE]  cannot  find  symbol  compiler  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  serialize,  deserialize,  isPrimitive);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	NodeTraversal.traverse(compiler,  fieldType,  serialize,  deserialize,  isPrimitive);	  NodeTraversal.traverse(compiler,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	97	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  serialize,  jsonAdapterPresent);  [CE]  cannot  find  symbol  compiler  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  serialize,  jsonAdapterPresent);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	NodeTraversal.traverse(compiler,  fieldType,  serialize,  jsonAdapterPresent);	  NodeTraversal.traverse(compiler,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	97	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  serialize,  deserialize,  jsonAdapterPresent);  [CE]  cannot  find  symbol  compiler  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  serialize,  deserialize,  jsonAdapterPresent);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	NodeTraversal.traverse(compiler,  fieldType,  serialize,  deserialize,  jsonAdapterPresent);	  NodeTraversal.traverse(compiler,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	97	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  serialize,  isPrimitive);  [CE]  cannot  find  symbol  compiler  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  serialize,  isPrimitive);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	NodeTraversal.traverse(compiler,  fieldType,  serialize,  isPrimitive);	  NodeTraversal.traverse(compiler,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	97	None	replace
157	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  fieldType.getValue(field);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  fieldType.getValue(field);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  fieldType.getValue(field);	  FieldValue    <?>    fieldValue    =    field.getValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
158	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  fieldType.getValue();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  fieldType.getValue();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  fieldType.getValue();	  FieldValue    <?>    fieldValue    =    field.getValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
159	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  field.getValue(fieldType,  serialize);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  field.getValue(fieldType,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  field.getValue(fieldType,  serialize);	  FieldValue    <?>    fieldValue    =    field.getValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
160	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  context.getValue(fieldType);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  context.getValue(fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  context.getValue(fieldType);	  FieldValue    <?>    fieldValue    =    field.getValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
161	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  fields.getValue(fieldType);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  fields.getValue(fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  fields.getValue(fieldType);	  FieldValue    <?>    fieldValue    =    field.getValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
162	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  field.getValue(fieldType,  deserialize);  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  field.getValue(fieldType,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  field.getValue(fieldType,  deserialize);	  FieldValue    <?>    fieldValue    =    field.getValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
163	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  variable  serialize  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  variable  serialize  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	109	None	replace
164	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isLiteral(fieldType.getClass());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isLiteral(fieldType.getClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isLiteral(fieldType.getClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
165	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  serialize  =  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  serialize  =  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  serialize  =	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  ';'  expected	109	None	replace
166	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>)  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  fieldType);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>)	98	None	replace
167	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  serialize);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	98	None	replace
168	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
169	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String)  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  name);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  name);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String)	98	None	replace
170	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldType.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  fieldType.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  fieldType.getAnnotation(JsonAdapter.class);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
171	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  fieldValue);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	98	None	replace
172	[BUG]  [BUGGY]  JsonReader  writer  =  field.getJsonReader();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  JsonReader  writer  =  field.getJsonReader();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	JsonReader  writer  =  field.getJsonReader();	  JsonReader    writer    =    context.getJsonReader();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
173	[BUG]  [BUGGY]  JsonReader  writer  =  context.getJsonReader(fieldType);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  JsonReader  writer  =  context.getJsonReader(fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	JsonReader  writer  =  context.getJsonReader(fieldType);	  JsonReader    writer    =    context.getJsonReader();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
174	[BUG]  [BUGGY]  JsonReader  writer  =  fieldType.getJsonReader();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  JsonReader  writer  =  fieldType.getJsonReader();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	JsonReader  writer  =  fieldType.getJsonReader();	  JsonReader    writer    =    context.getJsonReader();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
175	[BUG]  [BUGGY]  JsonReader  writer  =  jsonAdapter.getJsonReader();  [CE]  cannot  find  symbol  jsonAdapter  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  JsonReader  writer  =  jsonAdapter.getJsonReader();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	JsonReader  writer  =  jsonAdapter.getJsonReader();	  JsonReader    writer    =    context.getJsonReader();    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	100	None	replace
176	[BUG]  [BUGGY]  JsonReader  writer  =  fields.getJsonReader();  [CE]  cannot  find  symbol  fields  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  JsonReader  writer  =  fields.getJsonReader();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	JsonReader  writer  =  fields.getJsonReader();	  JsonReader    writer    =    context.getJsonReader();    	non-compiled	[CE]  cannot  find  symbol  fields	100	None	replace
177	[BUG]  [BUGGY]  JsonReader  reader  =  field.getJsonReader();  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  JsonReader  reader  =  field.getJsonReader();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	JsonReader  reader  =  field.getJsonReader();	  JsonReader    writer    =    context.getJsonReader();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
178	[BUG]  [BUGGY]  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  [CE]  cannot  find  symbol  isPrimitive  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    final    boolean    arePrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	89	None	replace
179	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  cannot  find  symbol  isPrimitive  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    final    boolean    arePrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	89	None	replace
180	[BUG]  [BUGGY]  if(fieldType.isPrimitive())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.isPrimitive())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.isPrimitive())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    final    boolean    arePrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
181	[BUG]  [BUGGY]  if(fieldType.getClass()!=  fieldType.getClass())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  cannot  find  symbol  isPrimitive  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()!=  fieldType.getClass())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()!=  fieldType.getClass())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    final    boolean    arePrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	89	None	replace
182	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParent(),  fieldType.getParent());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParent(),  fieldType.getParent());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParent(),  fieldType.getParent());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getParent());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
183	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParent(),  serialize);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParent(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParent(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getParent());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
184	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getParent());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getParent());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getParent());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getParent());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
185	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParent(),  fieldValue);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParent(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParent(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getParent());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
186	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParent(),  deserialize);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParent(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParent(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getParent());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
187	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getParent());  [CE]  cannot  find  symbol  fieldValue  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getParent());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getParent());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getParent());    	non-compiled	[CE]  cannot  find  symbol  fieldValue	62	None	replace
188	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class),  serialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	94	None	replace
189	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class,  fieldType));  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>)  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class,  fieldType));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class,  fieldType));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>)	94	None	replace
190	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class,  serialize));  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class,  serialize));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class,  serialize));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	94	None	replace
191	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class),  fieldType);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	94	None	replace
192	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class),  serialize,  deserialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class),  serialize,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	94	None	replace
193	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class),  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol  fieldValue	94	None	replace
194	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialized    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
195	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialized  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialized  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialized  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialized    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
196	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialized    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
197	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass()  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass()  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass()	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialized    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  ')'  expected	111	None	replace
198	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getDeclaringClass(),  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getDeclaringClass(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getDeclaringClass(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaringClass(),    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	14	None	replace
199	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serializedName.getSerialize());  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serializedName.getSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serializedName.getSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    delegate.getSerialize());    	non-compiled	[CE]  cannot  find  symbol  serializedName	78	None	replace
200	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getQualifiedName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
201	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize  |  context.getQualifiedName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize  |  context.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize  |  context.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
202	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getReturnType(),  deserialize);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getReturnType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getReturnType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
203	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getReturnType(),  deserialize);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getReturnType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getReturnType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
204	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,boolean)  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,boolean)	67	None	replace
205	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,String)  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  name);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  name);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,String)	67	None	replace
206	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAnnotation(TypeToken.class);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAnnotation(TypeToken.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAnnotation(TypeToken.class);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
207	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.CLASS,  serialize);  [CE]  cannot  find  symbol  CLASS  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.CLASS,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.CLASS,  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  cannot  find  symbol  CLASS	67	None	replace
208	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  typeAdapter);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  typeAdapter);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	67	None	replace
209	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.TYPE,  fieldType);  [CE]  cannot  find  symbol  TYPE  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.TYPE,  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.TYPE,  fieldType);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  cannot  find  symbol  TYPE	67	None	replace
210	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString(),  serialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.toString());    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	115	None	replace
211	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString(),  deserialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.toString());    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	115	None	replace
212	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString(),  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.toString());    	non-compiled	[CE]  cannot  find  symbol  fieldValue	115	None	replace
213	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString()  +  name);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString()  +  name);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString()  +  name);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.toString());    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	115	None	replace
214	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString()  +  deserialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString()  +  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString()  +  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.toString());    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	115	None	replace
215	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldConstructor.getAnnotation(JsonAdapter.class));  [CE]  cannot  find  symbol  fieldConstructor  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldConstructor.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldConstructor.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    constructor.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol  fieldConstructor	31	None	replace
216	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getSerialize(),  serialize,  deserialize);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getSerialize(),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getSerialize(),  serialize,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getSerialize(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
217	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getSerialize(),  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getSerialize(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getSerialize(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getSerialize(),    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	72	None	replace
218	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getSerialize(),  deserialize);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getSerialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getSerialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getSerialize(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
219	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getSerialize(),  deserialize);  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getSerialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getSerialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getSerialize(),    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	72	None	replace
220	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getSerialize(),  deserialize);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getSerialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getSerialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getSerialize(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
221	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getValue(),  serialize,  deserialize);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getValue(),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getValue(),  serialize,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getValue(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
222	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getValue(),  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getValue(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getValue(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getValue(),    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	32	None	replace
223	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getValue(),  deserialize);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getValue(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getValue(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getValue(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
224	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getRawType());  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getRawType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getRawType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getReturnType());    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	46	None	replace
225	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getValue());  [CE]  cannot  find  symbol  value  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getValue());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getValue());    	non-compiled	[CE]  cannot  find  symbol  value	34	None	replace
226	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getReturnType(),  serialize,  deserialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getReturnType(),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getReturnType(),  serialize,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
227	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getReturnType(),  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getReturnType(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getReturnType(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	44	None	replace
228	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getReturnType(),  serialize);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getReturnType(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getReturnType(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
229	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getRawClass(),  deserialize);  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getRawClass(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getRawClass(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    deserialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	22	None	replace
230	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getRawClass(),  deserialize);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getRawClass(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getRawClass(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
231	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getRawClass(),  deserialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getRawClass(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getRawClass(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
232	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getRawClass(),  deserialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getRawClass(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getRawClass(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	22	None	replace
233	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type.getRawClass(),  deserialize);  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type.getRawClass(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(type.getRawClass(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  type	22	None	replace
234	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaredType(),  fieldValue,  deserialize);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaredType(),  fieldValue,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaredType(),  fieldValue,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaredType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
235	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaredType(),  deserialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaredType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaredType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaredType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	42	None	replace
236	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaredType(),  serialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaredType(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaredType(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaredType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	42	None	replace
237	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaredType(),  fieldValue,  serialize);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaredType(),  fieldValue,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaredType(),  fieldValue,  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaredType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
238	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getDeclaredType(),  deserialize);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getDeclaredType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getDeclaredType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
239	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getDeclaredType());  [CE]  cannot  find  symbol  constructor  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol  constructor	40	None	replace
240	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getDeserialize(),  deserialize);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getDeserialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getDeserialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
241	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldType.getDeserialize()  :  deserialize);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldType.getDeserialize()  :  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldType.getDeserialize()  :  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
242	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  delegate.getDeserialize());  [CE]  cannot  find  symbol  delegate  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  delegate.getDeserialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  delegate.getDeserialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol  delegate	11	None	replace
243	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  ';'  expected	6	None	replace
244	[BUG]  [BUGGY]  mapped  =  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  mapped  =  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	mapped  =	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  ';'  expected	6	None	replace
245	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isSerialize(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isSerialize(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isSerialize(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
246	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
247	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isSerialize(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isSerialize(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isSerialize(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  ';'  expected	6	None	replace
248	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getRawClass());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getRawClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getRawClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
249	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getRawClass());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getRawClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getRawClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
250	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getDeclaredType());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
251	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getDeclaredType());  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaredType());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	120	None	replace
252	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getDeclaredType(),  deserialize);  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getDeclaredType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getDeclaredType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaredType());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	120	None	replace
253	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getDeclaredType());  [CE]  cannot  find  symbol  serialized  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol  serialized	120	None	replace
254	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeserialize(),  serialize,  deserialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeserialize(),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeserialize(),  serialize,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeserialize(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
255	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getDeserialize(),  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getDeserialize(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getDeserialize(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeserialize(),    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	10	None	replace
256	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getDeserialize(),  deserialize);  [CE]  boolean  cannot  be  dereferenced  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getDeserialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getDeserialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeserialize(),    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	10	None	replace
257	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeserialize(),  deserialize);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeserialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeserialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeserialize(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
258	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  ';'  expected	7	None	replace
259	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
260	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isSerialize(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isSerialize(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isSerialize(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  ';'  expected	7	None	replace
261	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),  serialize,  deserialize);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),  serialize,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),    serialize);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
262	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getAnnotation(JsonAdapter.class),  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getAnnotation(JsonAdapter.class),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getAnnotation(JsonAdapter.class),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	28	None	replace
263	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class),  serialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),    serialize);    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	28	None	replace
264	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getAnnotation(JsonAdapter.class),  serialize);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getAnnotation(JsonAdapter.class),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getAnnotation(JsonAdapter.class),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),    serialize);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
265	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serializer.getAnnotation(JsonAdapter.class),  fieldType);  [CE]  cannot  find  symbol  serializer  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serializer.getAnnotation(JsonAdapter.class),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serializer.getAnnotation(JsonAdapter.class),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),    serialize);    	non-compiled	[CE]  cannot  find  symbol  serializer	28	None	replace
266	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getAnnotation(JsonAdapter.class),  serialize);  [CE]  boolean  cannot  be  dereferenced  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getAnnotation(JsonAdapter.class),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getAnnotation(JsonAdapter.class),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	28	None	replace
267	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaringClass(),  fieldValue,  deserialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaringClass(),  fieldValue,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaringClass(),  fieldValue,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaringClass(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
268	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaringClass(),  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaringClass(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaringClass(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaringClass(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	18	None	replace
269	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaringClass(),  fieldValue,  serialize);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaringClass(),  fieldValue,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaringClass(),  fieldValue,  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaringClass(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
270	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getDeclaringClass(),  fieldType);  [CE]  cannot  find  symbol  fieldValue  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getDeclaringClass(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getDeclaringClass(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaringClass(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	18	None	replace
271	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaringClass(),  fieldValue);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaringClass(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaringClass(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaringClass(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
272	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaredType(),  deserialize);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaredType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaredType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
273	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getDeclaredType());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
274	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaredType(),  serialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaredType(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaredType(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
275	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getDeclaringClass());  [CE]  cannot  find  symbol  typeAdapter  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingStrategy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	86	None	replace
276	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldNamingPolicy.getDeclaringClass()  :  null);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldNamingPolicy.getDeclaringClass()  :  null);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldNamingPolicy.getDeclaringClass()  :  null);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingStrategy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
277	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldNamingStrategy.getDeclaringClass()  :  null);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldNamingStrategy.getDeclaringClass()  :  null);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldNamingStrategy.getDeclaringClass()  :  null);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingStrategy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	86	None	replace
278	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getRawClass(),  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getRawClass(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getRawClass(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	24	None	replace
279	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawClass(),  fieldValue,  deserialize);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawClass(),  fieldValue,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawClass(),  fieldValue,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
280	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawClass(),  fieldValue,  serialize);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawClass(),  fieldValue,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawClass(),  fieldValue,  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
281	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getRawClass(),  fieldType);  [CE]  cannot  find  symbol  fieldValue  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getRawClass(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getRawClass(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	24	None	replace
282	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getRawClass(),  fieldValue);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getRawClass(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getRawClass(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
283	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getValue());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getValue());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getValue());    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
284	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getValue());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getValue());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getValue());    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
285	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getPrimitiveType(),  serialize,  deserialize);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getPrimitiveType(),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getPrimitiveType(),  serialize,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
286	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getPrimitiveType(),  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getPrimitiveType(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getPrimitiveType(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	56	None	replace
287	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getPrimitiveType(),  serialize);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getPrimitiveType(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getPrimitiveType(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
288	[BUG]  [BUGGY]  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    static    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
289	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    static    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
290	[BUG]  [BUGGY]  if(!serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(!serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(!serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    static    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
291	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    static    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
292	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalStateException( " ");  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    static    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
293	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  method.getSerialize());  [CE]  cannot  find  symbol  method  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  method.getSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  method.getSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getSerialize());    	non-compiled	[CE]  cannot  find  symbol  method	74	None	replace
294	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getValue(),  deserialize);  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getValue(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getValue(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getValue(),    deserialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	33	None	replace
295	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type.getValue(),  deserialize);  [CE]  cannot  find  symbol  type  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type.getValue(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(type.getValue(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getValue(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  type	33	None	replace
296	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getSerialize());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getSerialize());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
297	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getSerialize());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getSerialize());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
298	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.toSerialize());  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.toSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.toSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getSerialize());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	71	None	replace
299	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getSerialize());  [CE]  cannot  find  symbol  serialized  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getSerialize());    	non-compiled	[CE]  cannot  find  symbol  serialized	71	None	replace
300	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getRawClass(),  serialize);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getRawClass(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getRawClass(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
301	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getPrimitiveType(),  deserialize);  [CE]  boolean  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getPrimitiveType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getPrimitiveType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    deserialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	57	None	replace
302	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getPrimitiveType(),  deserialize);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getPrimitiveType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getPrimitiveType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
303	[BUG]  [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	1	None	replace
304	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	1	None	replace
305	[BUG]  [BUGGY]  if(fieldType.getClass()  ==  fieldType.getClass())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  cannot  find  symbol  isPrimitive  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()  ==  fieldType.getClass())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()  ==  fieldType.getClass())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	1	None	replace
306	[BUG]  [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	1	None	replace
307	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	63	None	replace
308	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>)  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  fieldType);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>)	63	None	replace
309	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
310	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String)  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  name);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  name);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String)	63	None	replace
311	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  deserialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	63	None	replace
312	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getSerialize(),  deserialize);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getSerialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getSerialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getSerialize(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
313	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type.getSerialize(),  deserialize);  [CE]  cannot  find  symbol  type  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type.getSerialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(type.getSerialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getSerialize(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  type	70	None	replace
314	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getSerialize(),  deserialize);  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getSerialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getSerialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getSerialize(),    deserialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	70	None	replace
315	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getQualifiedName());  [CE]  cannot  find  symbol  value  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol  value	54	None	replace
316	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getQualifiedName());  [CE]  cannot  find  symbol  typeAdapter  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	54	None	replace
317	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getSerialize());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getSerialize());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
318	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getSerialize()  :  deserialize);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getSerialize()  :  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getSerialize()  :  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getSerialize());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
319	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldType.getConstructor();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  fieldType.getConstructor();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  fieldType.getConstructor();	  ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
320	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getConstructor(serialize);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  field.getConstructor(serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  field.getConstructor(serialize);	  ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
321	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getConstructor(name);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  field.getConstructor(name);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  field.getConstructor(name);	  ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
322	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  context.getConstructor();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  context.getConstructor();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  context.getConstructor();	  ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
323	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getConstructor(fieldType);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  field.getConstructor(fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  field.getConstructor(fieldType);	  ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
324	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getConstructor(type);  [CE]  cannot  find  symbol  type  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  field.getConstructor(type);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  field.getConstructor(type);	  ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  type	108	None	replace
325	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeclaredType(),  deserialize);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeclaredType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeclaredType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
326	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.findDeclaredType());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.findDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.findDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
327	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.generateDeclaredType());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.generateDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.generateDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
328	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.declaredType());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.declaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.declaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
329	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeclaredType(),  serialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeclaredType(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeclaredType(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
330	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.typeFactory.getDeclaredType());  [CE]  cannot  find  symbol  typeFactory  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.typeFactory.getDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.typeFactory.getDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol  typeFactory	81	None	replace
331	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor,  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor,  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor,	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	3	None	replace
332	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	mapped  =  getTypeAdapter(constructorConstructor,	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	3	None	replace
333	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	mapped  =  getTypeAdapter(fieldType,	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	3	None	replace
334	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
335	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  mapped  =  getTypeAdapter(context,  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	mapped  =  getTypeAdapter(context,	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	3	None	replace
336	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getValue(),  serialize);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getValue(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getValue(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getValue());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
337	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  deserialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    deserialize);    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	77	None	replace
338	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type,  fieldType,  deserialize);  [CE]  cannot  find  symbol  type  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type,  fieldType,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(type,  fieldType,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  type	77	None	replace
339	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType,  deserialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    deserialize);    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	77	None	replace
340	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    deserialize);    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	77	None	replace
341	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    deserialize);    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	77	None	replace
342	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(value,  fieldType,  deserialize);  [CE]  cannot  find  symbol  value  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(value,  fieldType,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(value,  fieldType,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  value	77	None	replace
343	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(class,  fieldType,  deserialize);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(class,  fieldType,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(class,  fieldType,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    deserialize);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
344	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getDeserialize());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getDeserialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getDeserialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
345	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getDeserialize());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getDeserialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getDeserialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
346	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getDeserialize());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getDeserialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getDeserialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
347	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type,  fieldValue.getDeclaredType());  [CE]  cannot  find  symbol  type  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type,  fieldValue.getDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(type,  fieldValue.getDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol  type	43	None	replace
348	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getDeclaredType());  [CE]  cannot  find  symbol  value  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol  value	43	None	replace
349	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParameterType(0),  deserialize);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParameterType(0),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParameterType(0),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
350	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getParameterType(0));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getParameterType(0));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getParameterType(0));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
351	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParameterType(0),  serialize);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParameterType(0),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParameterType(0),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
352	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParameterType(1));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParameterType(1));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getParameterType(1));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
353	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getParameterType(1));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getParameterType(1));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getParameterType(1));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
354	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getParameterType(0));  [CE]  cannot  find  symbol  fieldValue  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getParameterType(0));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getParameterType(0));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getParameterType(0));    	non-compiled	[CE]  cannot  find  symbol  fieldValue	95	None	replace
355	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type,  fieldValue.getDeserialize());  [CE]  cannot  find  symbol  type  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type,  fieldValue.getDeserialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(type,  fieldValue.getDeserialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol  type	12	None	replace
356	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getPrimitiveType());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getPrimitiveType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
357	[BUG]  [BUGGY]  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  [CE]  local  variable  isPrimitive  is  accessed  from  within  inner  class;  needs  to  be  declared  final  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  local  variable  isPrimitive  is  accessed  from  within  inner  class;  needs  to  be  declared  final	4	None	replace
358	[BUG]  [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	4	None	replace
359	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	4	None	replace
360	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass())||  Primitives.isPrimitive(fieldType.getClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	add	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass())||  Primitives.isPrimitive(fieldType.getClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	compilable	  [FE]  ComparisonFailure  	4	1	replace
361	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass())||  Primitives.isPrimitive(fieldType.getClass());  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass())||  Primitives.isPrimitive(fieldType.getClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass())||  Primitives.isPrimitive(fieldType.getClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	compilable	  [FE]  ComparisonFailure  	4	1	replace
362	[BUG]  [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	4	None	replace
363	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getPrimitiveType());  [CE]  cannot  find  symbol  typeAdapter  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getPrimitiveType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	61	None	replace
364	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getPrimitiveType());  [CE]  cannot  find  symbol  value  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getPrimitiveType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol  value	61	None	replace
365	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  method.getPrimitiveType());  [CE]  cannot  find  symbol  method  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  method.getPrimitiveType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  method.getPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol  method	61	None	replace
366	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  cannot  find  symbol  isPrimitive  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	5	None	replace
367	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  cannot  find  symbol  isPrimitive  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	5	None	replace
368	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getQualifiedName());  [CE]  boolean  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serializedName.getQualifiedName());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	122	None	replace
369	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  description.getQualifiedName());  [CE]  cannot  find  symbol  description  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  description.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  description.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serializedName.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol  description	122	None	replace
370	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  method.getQualifiedName());  [CE]  cannot  find  symbol  method  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  method.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  method.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serializedName.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol  method	122	None	replace
371	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  fieldType.getAnnotation(JsonAdapter.class),  serialize);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  fieldType.getAnnotation(JsonAdapter.class),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  fieldType.getAnnotation(JsonAdapter.class),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(field,    fieldType.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
372	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  JsonAdapter.class.getAnnotation(JsonAdapter.class));  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  JsonAdapter.class.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  JsonAdapter.class.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(field,    fieldType.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	30	None	replace
373	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getAnnotation(JsonAdapter.class));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(field,    fieldType.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
374	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  context.getAnnotation(JsonAdapter.class));  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  context.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  context.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(field,    fieldType.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
375	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeserialize(),  deserialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeserialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeserialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeserialize(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	9	None	replace
376	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeserialize(),  deserialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeserialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeserialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeserialize(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
377	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type.getDeserialize(),  deserialize);  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type.getDeserialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(type.getDeserialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeserialize(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  type	9	None	replace
378	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getPrimitiveType());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getPrimitiveType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize,  fieldType.getPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
379	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getPrimitiveType());  [CE]  boolean  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getPrimitiveType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  deserialize.getPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getPrimitiveType());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	123	None	replace
380	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getPrimitiveType());  [CE]  cannot  find  symbol  serialized  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getPrimitiveType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol  serialized	123	None	replace
381	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAnnotation(JsonFactory.class);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAnnotation(JsonFactory.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAnnotation(JsonFactory.class);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonFactory.class);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
382	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAnnotation(JsonFactory.class);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAnnotation(JsonFactory.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  context.getAnnotation(JsonFactory.class);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonFactory.class);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
383	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldFactory.getAnnotation(JsonFactory.class);  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldFactory.getAnnotation(JsonFactory.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldFactory.getAnnotation(JsonFactory.class);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonFactory.class);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
384	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonFactory.class,  serialize);  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonFactory.class,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonFactory.class,  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonFactory.class);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
385	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fields.getAnnotation(JsonFactory.class);  [CE]  cannot  find  symbol  [FE]                                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fields.getAnnotation(JsonFactory.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fields.getAnnotation(JsonFactory.class);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonFactory.class);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
386	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonFactory.getAnnotation(fieldType.class);  [CE]  cannot  find  symbol  [FE]                                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonFactory.getAnnotation(fieldType.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  JsonFactory.getAnnotation(fieldType.class);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonFactory.class);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
387	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  fieldType.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
388	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>)  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  fieldType);	  TypeToken    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>)	65	None	replace
389	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  serialize);	  TypeToken    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	65	None	replace
390	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String)  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  name);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  name);	  TypeToken    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String)	65	None	replace
391	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.TYPE_OBJECT);  [CE]  cannot  find  symbol  TYPE_OBJECT  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.TYPE_OBJECT);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.TYPE_OBJECT);	  TypeToken    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  TYPE_OBJECT	65	None	replace
392	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  context.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
393	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  context.getAnnotation(JsonAdapter.class,  fieldType);	  TypeToken    <?>    jsonAdapterPresent    =    context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
394	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(field.getAnnotation(JsonAdapter.class);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(field.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(field.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    jsonAdapterPresent    =    context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ')'  expected	96	None	replace
395	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.class.getAnnotation(JsonAdapter.class);  [CE]  incompatible  types  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.class.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.class.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    jsonAdapterPresent    =    context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  incompatible  types	96	None	replace
396	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(fieldType,  JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(fieldType,  JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(fieldType,  JsonAdapter.class);	  TypeToken    <?>    jsonAdapterPresent    =    context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
397	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getQualifiedName(),  deserialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getQualifiedName(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getQualifiedName(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getQualifiedName(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	51	None	replace
398	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  field.getValue(serialize);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  field.getValue(serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  field.getValue(serialize);	  FieldValue    <?>    fieldValue    =    field.getValue();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
399	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  field.getValue(value);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  field.getValue(value);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  field.getValue(value);	  FieldValue    <?>    fieldValue    =    field.getValue();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
400	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  field.toString();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  field.toString();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  field.toString();	  FieldValue    <?>    fieldValue    =    field.getValue();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
401	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  field.getValue(name);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  field.getValue(name);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  field.getValue(name);	  FieldValue    <?>    fieldValue    =    field.getValue();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
402	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaredType(),  deserialize);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaredType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaredType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
403	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaredType(),  serialize);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaredType(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaredType(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
404	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getRawClass());  [CE]  cannot  find  symbol  value  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getRawClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getRawClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getRawClass());    	non-compiled	[CE]  cannot  find  symbol  value	25	None	replace
405	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaredType(),  serialize,  deserialize);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaredType(),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaredType(),  serialize,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaredType(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
406	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getDeclaredType(),  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getDeclaredType(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getDeclaredType(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaredType(),    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	38	None	replace
407	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getReturnType());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getReturnType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(context,  fieldType.getReturnType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
408	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class),  deserialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	26	None	replace
409	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class,  serialize));  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class,  serialize));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class,  serialize));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	26	None	replace
410	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class)+  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class)+  1);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class)+  1);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	26	None	replace
411	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class),  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class),  typeAdapter);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class),  typeAdapter);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	26	None	replace
412	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type,  fieldType.getAnnotation(JsonAdapter.class));  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(type,  fieldType.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(type,  fieldType.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol  type	26	None	replace
413	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getDeclaringClass());  [CE]  cannot  find  symbol  value  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  value	19	None	replace
414	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getQualifiedName(),  serialize);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getQualifiedName(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getQualifiedName(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
415	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawClass(),  serialize,  deserialize);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawClass(),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawClass(),  serialize,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
416	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getRawClass(),  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getRawClass(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serialize.getRawClass(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	20	None	replace
417	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getQualifiedName(),  serialize);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getQualifiedName(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getQualifiedName(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
418	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getParameterType(0));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getParameterType(0));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getParameterType(0));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
419	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getParameterType(0));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getParameterType(0));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getParameterType(0));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getParameterType(0));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
420	[BUG]  [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  cannot  find  symbol  isPrimitive  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    final    boolean    arePrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	89	None	replace
421	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  cannot  find  symbol  isPrimitive  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    final    boolean    arePrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	89	None	replace
422	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getDeserialize());  [CE]  cannot  find  symbol  value  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getDeserialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  value.getDeserialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol  value	12	None	replace
423	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getKey());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getKey());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getKey());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getKey());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
424	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getKey());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getKey());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getKey());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getKey());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
425	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getKey());  [CE]  cannot  find  symbol  fields  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getKey());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getKey());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getKey());    	non-compiled	[CE]  cannot  find  symbol  fields	37	None	replace
426	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  jsonAdapterPresent,  deserialize);  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	NodeTraversal.traverse(compiler,  fieldType,  jsonAdapterPresent,  deserialize);	  NodeTraversal.traverse(compiler,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	97	None	replace
427	[BUG]  [BUGGY]  NodeTraversal.traverse(writer,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  writer  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  NodeTraversal.traverse(writer,  fieldType,  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	NodeTraversal.traverse(writer,  fieldType,  serialize,  deserialize);	  NodeTraversal.traverse(compiler,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  writer	97	None	replace
428	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  deserialize,  serialize);  [CE]  cannot  find  symbol  compiler  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  deserialize,  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	NodeTraversal.traverse(compiler,  fieldType,  deserialize,  serialize);	  NodeTraversal.traverse(compiler,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	97	None	replace
429	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  serializer,  deserialize);  [CE]  cannot  find  symbol  compiler  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  serializer,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	NodeTraversal.traverse(compiler,  fieldType,  serializer,  deserialize);	  NodeTraversal.traverse(compiler,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	97	None	replace
430	[BUG]  [BUGGY]  JsonReader  writer  =  fieldNamingPolicy.getJsonReader();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  JsonReader  writer  =  fieldNamingPolicy.getJsonReader();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	JsonReader  writer  =  fieldNamingPolicy.getJsonReader();	  JsonReader    writer    =    context.getJsonReader();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
431	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeclaredType(),  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeclaredType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeclaredType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaredType(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	39	None	replace
432	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getQualifiedName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
433	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldName.getQualifiedName());  [CE]  cannot  find  symbol  fieldName  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldName.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldName.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol  fieldName	79	None	replace
434	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  field.getAnnotation(JsonAdapter.class));  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  field.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  field.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	26	None	replace
435	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  scope.getDeclaredType());  [CE]  cannot  find  symbol  scope  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  scope.getDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  scope.getDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol  scope	43	None	replace
436	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  field.getDeserialize()  :  deserialize);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  field.getDeserialize()  :  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  field.getDeserialize()  :  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
437	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getDeserialize()  :  serialize);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getDeserialize()  :  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getDeserialize()  :  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
438	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeserialize());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeserialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeserialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
439	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getSerialize());  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getSerialize());    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	76	None	replace
440	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getSerialize());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getSerialize());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
441	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getReturnType(),  deserialize);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getReturnType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getReturnType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
442	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getReturnType(),  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getReturnType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getReturnType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	45	None	replace
443	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  fields.getValue();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  fields.getValue();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  fields.getValue();	  FieldValue    <?>    fieldValue    =    field.getValue();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
444	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  field.cloneTree();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  field.cloneTree();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  field.cloneTree();	  FieldValue    <?>    fieldValue    =    field.getValue();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
445	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  fieldtype.getValue();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  fieldtype.getValue();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  fieldtype.getValue();	  FieldValue    <?>    fieldValue    =    field.getValue();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
446	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getDeclaredType()  :  serialize);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getDeclaredType()  :  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getDeclaredType()  :  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
447	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  field.getDeclaredType()  :  deserialize);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  field.getDeclaredType()  :  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  field.getDeclaredType()  :  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
448	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaringClass(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	18	None	replace
449	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeclaringClass(),  fieldValue);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeclaringClass(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeclaringClass(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaringClass(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	18	None	replace
450	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getReturnType(),  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getReturnType(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getReturnType(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	47	None	replace
451	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getReturnType(),  fieldValue);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getReturnType(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getReturnType(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
452	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getReturnType(),  fieldValue);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getReturnType(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getReturnType(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
453	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getPrimitiveType(),  deserialize);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getPrimitiveType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getPrimitiveType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
454	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getPrimitiveType(),  deserialize);  [CE]  cannot  find  symbol  typeAdapter  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getPrimitiveType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  typeAdapter.getPrimitiveType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	57	None	replace
455	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getAnnotation(JsonAdapter.class));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	27	None	replace
456	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getPrimitiveType());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getPrimitiveType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
457	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructor  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructor  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructor	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	2	None	replace
458	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstruct  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstruct  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstruct	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	2	None	replace
459	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ';'  expected	2	None	replace
460	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getDeclaringClass()  :  serialize);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getDeclaringClass()  :  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getDeclaringClass()  :  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
461	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  delegate.getDeclaringClass());  [CE]  cannot  find  symbol  delegate  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  delegate.getDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  delegate.getDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  delegate	112	None	replace
462	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getRawClass(),  fieldValue);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getRawClass(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getRawClass(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
463	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getValue(),  fieldValue);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getValue(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getValue(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getValue(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
464	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getValue(),  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getValue(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getValue(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getValue(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	35	None	replace
465	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldName.getDeclaringClass());  [CE]  cannot  find  symbol  fieldName  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldName.getDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldName.getDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  fieldName	17	None	replace
466	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getReturnType());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getReturnType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getReturnType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
467	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getReturnType());  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getReturnType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getReturnType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getReturnType());    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	48	None	replace
468	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  typeAdapter);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class,  typeAdapter);	  TypeToken    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	65	None	replace
469	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  scope.getValue());  [CE]  cannot  find  symbol  scope  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  scope.getValue());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  scope.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    typeAdapter.getValue());    	non-compiled	[CE]  cannot  find  symbol  scope	103	None	replace
470	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getRawClass(),  serialize);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getRawClass(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.getRawClass(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
471	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    Final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	87	None	replace
472	[BUG]  [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  Final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  not  a  statement  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  Final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  Final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    Final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  not  a  statement	87	None	replace
473	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getDeclaringClass());  [CE]  cannot  find  symbol  fields  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingStrategy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  fields	86	None	replace
474	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  field.getSerialize()  :  deserialize);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  field.getSerialize()  :  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  field.getSerialize()  :  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getSerialize());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
475	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getSerialize()  :  serialize);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getSerialize()  :  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getSerialize()  :  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getSerialize());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
476	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  scope.getAnnotation(JsonAdapter.class));  [CE]  cannot  find  symbol  scope  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  scope.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  scope.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    typeAdapter.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol  scope	29	None	replace
477	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getPrimitiveType(),  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getPrimitiveType(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getPrimitiveType(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	59	None	replace
478	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getPrimitiveType(),  fieldValue);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getPrimitiveType(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getPrimitiveType(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
479	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  ';'  expected	109	None	replace
480	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boole  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boole  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boole	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  ';'  expected	109	None	replace
481	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(!serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(!serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(!serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	109	None	replace
482	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldType.getSerialize()  :  false);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldType.getSerialize()  :  false);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldType.getSerialize()  :  false);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getSerialize());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
483	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaredType(),  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaredType(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaredType(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaredType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	42	None	replace
484	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaredType(),  fieldValue);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaredType(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeclaredType(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaredType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
485	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaredType(),  fieldValue);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaredType(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaredType(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaredType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
486	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getRawClass());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getRawClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getRawClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
487	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(typeAdapter,  fieldType,  deserialize);  [CE]  cannot  find  symbol  typeAdapter  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(typeAdapter,  fieldType,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(typeAdapter,  fieldType,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	77	None	replace
488	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(typeType,  fieldType,  deserialize);  [CE]  cannot  find  symbol  typeType  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(typeType,  fieldType,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(typeType,  fieldType,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  typeType	77	None	replace
489	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getClass());  [CE]  cannot  find  symbol  fieldValue  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getRawClass());    	non-compiled	[CE]  cannot  find  symbol  fieldValue	25	None	replace
490	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getValue()  :  serialize);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getValue()  :  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getValue()  :  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getValue());    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
491	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),  deserialize);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),    serialize);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
492	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),  serialized);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),  serialized);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),  serialized);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),    serialize);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
493	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldName.getValue());  [CE]  cannot  find  symbol  fieldName  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldName.getValue());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldName.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getValue());    	non-compiled	[CE]  cannot  find  symbol  fieldName	36	None	replace
494	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeclaringClass(),  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeclaringClass(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeclaringClass(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaringClass(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	15	None	replace
495	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  scope.getPrimitiveType());  [CE]  cannot  find  symbol  scope  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  scope.getPrimitiveType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  scope.getPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol  scope	61	None	replace
496	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  scope.getRawClass(),  deserialize);  [CE]  cannot  find  symbol  scope  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  scope.getRawClass(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  scope.getRawClass(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  scope	22	None	replace
497	[BUG]  [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
498	[BUG]  [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass()  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass()  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass()	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  ')'  expected	5	None	replace
499	[BUG]  [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  wasPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  wasPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  wasPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
500	[BUG]  [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(!serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(!serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(!serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
501	[BUG]  [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
502	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  fieldType);  [CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,TypeToken<CAP#1>)  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  fieldType);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,TypeToken<CAP#1>)	67	None	replace
503	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  deserialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,boolean)  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,boolean)	67	None	replace
504	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  null);  [CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,<null>)  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  null);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  null);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,<null>)	67	None	replace
505	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getRawType());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getRawType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getRawType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
506	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getParent());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getParent());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getParent());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
507	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getQualifiedName(),  deserialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getQualifiedName(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getQualifiedName(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getQualifiedName(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
508	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getQualifiedName(),  deserialize);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getQualifiedName(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getQualifiedName(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getQualifiedName(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
509	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  typeAdapter);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class,  typeAdapter);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	63	None	replace
510	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getClass()).booleanValue();  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getClass()).booleanValue();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getClass()).booleanValue();	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass()).booleanValue();    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	114	None	replace
511	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
512	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  JsonAdapter  annotation  =  context.getAnn  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  JsonAdapter  annotation  =  context.getAnn  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  JsonAdapter  annotation  =  context.getAnn	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  ';'  expected	6	None	replace
513	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getRawClass()  :  serialize);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getRawClass()  :  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  context.getRawClass()  :  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
514	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getPrimitiveType());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getPrimitiveType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
515	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getParent());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getParent());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getParent());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getParent());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
516	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeserialize(),  serialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeserialize(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getDeserialize(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeserialize(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
517	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getRawClass());  [CE]  cannot  find  symbol  fields  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getRawClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getRawClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getRawClass());    	non-compiled	[CE]  cannot  find  symbol  fields	90	None	replace
518	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getPrimitiveType());  [CE]  cannot  find  symbol  constructor  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getPrimitiveType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol  constructor	93	None	replace
519	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.toString());  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.toString());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.toString());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.toString());    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	115	None	replace
520	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class),  deserialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(field.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	94	None	replace
521	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.findDeclaringClass(fieldNamingStrategy.class));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.findDeclaringClass(fieldNamingStrategy.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.findDeclaringClass(fieldNamingStrategy.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
522	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldNamingPolicy,  fieldType.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldNamingPolicy,  fieldType.getDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldNamingPolicy,  fieldType.getDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
523	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getValue());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getValue());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getValue());    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
524	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getValue());  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getValue());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fields.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getValue());    	non-compiled	[CE]  cannot  find  symbol  fields	102	None	replace
525	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	4	None	replace
526	[BUG]  [BUGGY]  if(fieldType.getClass()!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	4	None	replace
527	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeclaringClass(),  serialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeclaringClass(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeclaringClass(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaringClass(),    serialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	14	None	replace
528	[BUG]  [BUGGY]  TypeToken  <?>  fieldType  =  typeAdapter.getAnnotation(Serialize.class);  [CE]  variable  fieldType  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  fieldType  =  typeAdapter.getAnnotation(Serialize.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  fieldType  =  typeAdapter.getAnnotation(Serialize.class);	  TypeToken    <?>    fieldType    =    field.getAnnotation(Serialize.class);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	107	None	replace
529	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldNamingPolicy,  fieldType.getDeclaredType());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldNamingPolicy,  fieldType.getDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldNamingPolicy,  fieldType.getDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
530	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.hasDeclaredType());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.hasDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.hasDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
531	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeclaredType()).booleanValue();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeclaredType()).booleanValue();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeclaredType()).booleanValue();	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
532	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.findDeclaredType(serialize));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.findDeclaredType(serialize));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.findDeclaredType(serialize));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
533	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getSerialize(),  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getSerialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getSerialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getSerialize(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	70	None	replace
534	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getSerialize(),  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getSerialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getSerialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getSerialize(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	70	None	replace
535	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonFactory.getAnnotation(field.class);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonFactory.getAnnotation(field.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  JsonFactory.getAnnotation(field.class);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonFactory.class);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
536	[BUG]  [BUGGY]  TypeToken  <?>  fieldAdapterPresent  =  field.getAnnotation(JsonFactory.class);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  fieldAdapterPresent  =  field.getAnnotation(JsonFactory.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  fieldAdapterPresent  =  field.getAnnotation(JsonFactory.class);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonFactory.class);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
537	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor,  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor,  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor,	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	3	None	replace
538	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstructor	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	3	None	replace
539	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstruct  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstruct  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructorConstruct	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	3	None	replace
540	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructor  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructor  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter(constructor	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	3	None	replace
541	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  mapped  =  getTypeAdapter	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ';'  expected	3	None	replace
542	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  fieldType.getValue(fieldType);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  fieldType.getValue(fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  fieldType.getValue(fieldType);	  FieldValue    <?>    fieldValue    =    field.getValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
543	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  fieldType.getValue(fieldName);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  fieldType.getValue(fieldName);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  fieldType.getValue(fieldName);	  FieldValue    <?>    fieldValue    =    field.getValue(fieldType);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
544	[BUG]  [BUGGY]  if(fieldType.getClass()!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	1	None	replace
545	[BUG]  [BUGGY]  if(fieldType.getClass()!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
546	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serializer,  deserialize);  [CE]  cannot  find  symbol  serializer  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serializer,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serializer,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass(),    serialize);    	non-compiled	[CE]  cannot  find  symbol  serializer	116	None	replace
547	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serialize,  deserializer);  [CE]  cannot  find  symbol  deserializer  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serialize,  deserializer);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serialize,  deserializer);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass(),    serialize);    	non-compiled	[CE]  cannot  find  symbol  deserializer	116	None	replace
548	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getClass(),  serialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getClass(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getClass(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass(),    serialize);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	116	None	replace
549	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
550	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
551	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
552	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  serialized  =  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  serialized  =  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  final  boolean  serialized  =	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialized    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  ';'  expected	111	None	replace
553	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  else  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialized    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  'else'  without  'if'	111	None	replace
554	[BUG]  [BUGGY]  if(annotation  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(annotation  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(annotation  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
555	[BUG]  [BUGGY]  if(annotation!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(annotation!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(annotation!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
556	[BUG]  [BUGGY]  if(annotation  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(annotation  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(annotation  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  ';'  expected	7	None	replace
557	[BUG]  [BUGGY]  if(annotation  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  JsonAdapter  annotation  =  field  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(annotation  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  JsonAdapter  annotation  =  field  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(annotation  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  JsonAdapter  annotation  =  field	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  ';'  expected	7	None	replace
558	[BUG]  [BUGGY]  if(annotation  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  JsonAdapter  annotation  =  field.getAnn  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(annotation  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  JsonAdapter  annotation  =  field.getAnn  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(annotation  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  JsonAdapter  annotation  =  field.getAnn	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  ';'  expected	7	None	replace
559	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeserialize(),  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeserialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeserialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeserialize(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	9	None	replace
560	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeserialize(),  deserialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeserialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.getDeserialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeserialize(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
561	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(context,  fieldType);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(context,  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(context,  fieldType);	  TypeToken    <?>    jsonAdapterPresent    =    context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
562	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(context);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(context);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(context);	  TypeToken    <?>    jsonAdapterPresent    =    context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
563	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fields.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  fields  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fields.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fields.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    jsonAdapterPresent    =    context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  fields	96	None	replace
564	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getConstructor();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getConstructor();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  fieldNamingPolicy.getConstructor();	  ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
565	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldFactory.getConstructor();  [CE]  cannot  find  symbol  fieldFactory  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  fieldFactory.getConstructor();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  fieldFactory.getConstructor();	  ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  fieldFactory	108	None	replace
566	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getConstructor(typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  field.getConstructor(typeAdapter);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  field.getConstructor(typeAdapter);	  ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	108	None	replace
567	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getQualifiedName());  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	53	None	replace
568	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldNamingPolicy.getConstructor();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  Constructor  <?>  constructor  =  fieldNamingPolicy.getConstructor();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	Constructor  <?>  constructor  =  fieldNamingPolicy.getConstructor();	  Constructor    <?>    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
569	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor(typeAdapter);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor(typeAdapter);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	Constructor  <?>  constructor  =  field.getConstructor(typeAdapter);	  Constructor    <?>    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
570	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getPrimitiveType(),  serialize);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getPrimitiveType(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getPrimitiveType(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
571	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldContext.getValue());  [CE]  cannot  find  symbol  fieldContext  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldContext.getValue());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldContext.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    context.getValue());    	non-compiled	[CE]  cannot  find  symbol  fieldContext	101	None	replace
572	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fields.getConstructor();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  Constructor  <?>  constructor  =  fields.getConstructor();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	Constructor  <?>  constructor  =  fields.getConstructor();	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
573	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getSerialize(),  serialize);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getSerialize(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  context.getSerialize(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getSerialize(),    serialize);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
574	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class,  fieldType);  [CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,TypeToken<CAP#1>)  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class,  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class,  fieldType);	  TypeToken    <?>    mapped    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,TypeToken<CAP#1>)	66	None	replace
575	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class,  null);  [CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,<null>)  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class,  null);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class,  null);	  TypeToken    <?>    mapped    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<TypeToken>,<null>)	66	None	replace
576	[BUG]  [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    static    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
577	[BUG]  [BUGGY]  if(fieldType  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType  ==  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    static    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
578	[BUG]  [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  static  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    static    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
579	[BUG]  [BUGGY]  if(fieldType.isPrimitive())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.isPrimitive())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.isPrimitive())  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
580	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getReturnType(),  serialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getReturnType(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getReturnType(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    serialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	44	None	replace
581	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getReturnType());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getReturnType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getReturnType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
582	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getReturnType());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getReturnType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getReturnType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getReturnType());    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
583	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getReturnType());  [CE]  cannot  find  symbol  serialized  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getReturnType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getReturnType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getReturnType());    	non-compiled	[CE]  cannot  find  symbol  serialized	113	None	replace
584	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  field.getAnnotation(TypeToken.class),  serialize,  deserialize);	  TypeToken    <?>    mapped    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  ';'  expected	66	None	replace
585	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.toPrimitiveType());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.toPrimitiveType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldType.toPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
586	[BUG]  [BUGGY]  if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  incomparable  types:  Class<CAP#1>  and  TypeToken<CAP#2>  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    Final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  TypeToken<CAP#2>	87	None	replace
587	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getQualifiedName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
588	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serializedName,  field.getQualifiedName());  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serializedName,  field.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serializedName,  field.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	52	None	replace
589	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serializedName,  fieldType.getQualifiedName());  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serializedName,  fieldType.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serializedName,  fieldType.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol  serializedName	52	None	replace
590	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serializer.getQualifiedName());  [CE]  cannot  find  symbol  serializer  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serializer.getQualifiedName());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serializer.getQualifiedName());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getQualifiedName());    	non-compiled	[CE]  cannot  find  symbol  serializer	52	None	replace
591	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.cloneTree());  [CE]  cannot  find  symbol  fieldValue  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.cloneTree());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.cloneTree());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldValue.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol  fieldValue	61	None	replace
592	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  methodAdapter.getAnnotation(JsonAdapter.class));  [CE]  cannot  find  symbol  methodAdapter  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  methodAdapter.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  methodAdapter.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    typeAdapter.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol  methodAdapter	29	None	replace
593	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  factory.getAnnotation(JsonAdapter.class));  [CE]  cannot  find  symbol  factory  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  factory.getAnnotation(JsonAdapter.class));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  factory.getAnnotation(JsonAdapter.class));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    typeAdapter.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol  factory	29	None	replace
594	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class),  serialize,  deserialize);	  TypeToken    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	65	None	replace
595	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fields.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  fields  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  mapped  =  fields.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  mapped  =  fields.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  fields	65	None	replace
596	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getPrimitiveType());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getPrimitiveType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getPrimitiveType());    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
597	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getDeserialize());  [CE]  cannot  find  symbol  serialized  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getDeserialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getDeserialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeserialize());    	non-compiled	[CE]  cannot  find  symbol  serialized	8	None	replace
598	[BUG]  [BUGGY]  if(serialized)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialized)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialized)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
599	[BUG]  [BUGGY]  JsonReader  writer  =  fieldConstructor.getJsonReader();  [CE]  cannot  find  symbol  fieldConstructor  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  JsonReader  writer  =  fieldConstructor.getJsonReader();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	JsonReader  writer  =  fieldConstructor.getJsonReader();	  JsonReader    writer    =    context.getJsonReader();    	non-compiled	[CE]  cannot  find  symbol  fieldConstructor	100	None	replace
600	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getRawClass());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getRawClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getRawClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getRawClass());    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
601	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  FieldUtils.getConstructor(context);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  Constructor  <?>  constructor  =  FieldUtils.getConstructor(context);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	Constructor  <?>  constructor  =  FieldUtils.getConstructor(context);	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
602	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getDeclaredType());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  field.getDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
603	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getDeclaredType());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
604	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldType.getDeclaredType()  :  deserialize);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldType.getDeclaredType()  :  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldType.getDeclaredType()  :  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
605	[BUG]  [BUGGY]  if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  incomparable  types:  Class<CAP#1>  and  TypeToken<CAP#2>  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    static    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  TypeToken<CAP#2>	88	None	replace
606	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor(serialize,  deserialize);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor(serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	Constructor  <?>  constructor  =  field.getConstructor(serialize,  deserialize);	  Constructor    <?>    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
607	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  fieldType.getAnnotation(JsonAdapter.class),  deserialize);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  fieldType.getAnnotation(JsonAdapter.class),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  fieldType.getAnnotation(JsonAdapter.class),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(field,    fieldType.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
608	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  fieldType.getAnnotation(JsonAdapter.class)+  1);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  fieldType.getAnnotation(JsonAdapter.class)+  1);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  fieldType.getAnnotation(JsonAdapter.class)+  1);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(field,    fieldType.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
609	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getAnnotation(JsonAdapter.class),  serialize);  [CE]  cannot  find  symbol  constructor  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getAnnotation(JsonAdapter.class),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  constructor.getAnnotation(JsonAdapter.class),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    constructor.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  cannot  find  symbol  constructor	31	None	replace
610	[BUG]  [BUGGY]  final  boolean  delegate  =  Primitives.isPrimitive(fieldType,  serialize.getSerialize());  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  delegate  =  Primitives.isPrimitive(fieldType,  serialize.getSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  delegate  =  Primitives.isPrimitive(fieldType,  serialize.getSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    delegate.getSerialize());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	78	None	replace
611	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getDeclaredType(),  fieldType);  [CE]  cannot  find  symbol  fieldValue  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getDeclaredType(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getDeclaredType(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaredType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	42	None	replace
612	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getQualifiedName(),  serialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getQualifiedName(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getQualifiedName(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getQualifiedName(),    serialize);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	50	None	replace
613	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getQualifiedName(),  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getQualifiedName(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getQualifiedName(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getQualifiedName(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	51	None	replace
614	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getKey());  [CE]  boolean  cannot  be  dereferenced  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getKey());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize.getKey());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getKey());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	37	None	replace
615	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(JsonAdapter.class),  serialize,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	63	None	replace
616	[BUG]  [BUGGY]  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  [CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	7	None	replace
617	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  [CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	7	None	replace
618	[BUG]  [BUGGY]  Annotation  annotation  =  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  Annotation  annotation  =  field.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	Annotation  annotation  =  field.getAnnotation(JsonAdapter.class);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
619	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  ';'  expected	7	None	replace
620	[BUG]  [BUGGY]  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  mapped  =	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  ';'  expected	7	None	replace
621	[BUG]  [BUGGY]  ObjectConstructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  <?>  constructor  =  field.getAnnotation(JsonAdapter.class),  serialize,  deserialize);	  ObjectConstructor    <?>    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	105	None	replace
622	[BUG]  [BUGGY]  if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
623	[BUG]  [BUGGY]  if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass()  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass()  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass()	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  ')'  expected	109	None	replace
624	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  fieldType  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  fieldType  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  fieldType  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
625	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  fieldNamingStrategy  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  fieldNamingStrategy  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  fieldNamingStrategy  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialize    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
626	[BUG]  [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialize  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
627	[BUG]  [BUGGY]  if(fieldType.getClass()!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  cannot  find  symbol  isPrimitive  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	5	None	replace
628	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getValue());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getValue());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getValue());    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
629	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getValue());  [CE]  cannot  find  symbol  serialized  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getValue());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialized.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getValue());    	non-compiled	[CE]  cannot  find  symbol  serialized	117	None	replace
630	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString(),  serialized);  [CE]  cannot  find  symbol  serialized  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString(),  serialized);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.toString(),  serialized);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.toString());    	non-compiled	[CE]  cannot  find  symbol  serialized	115	None	replace
631	[BUG]  [BUGGY]  mapped  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  mapped  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  mapped  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	mapped  =  context.getAnnotation(JsonAdapter.class);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  cannot  find  symbol  mapped	3	None	replace
632	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(compilerConstructor,  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  mapped  =  getTypeAdapter(compilerConstructor,  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	mapped  =  getTypeAdapter(compilerConstructor,	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	3	None	replace
633	[BUG]  [BUGGY]  final  JsonAdapter  <?>  mapped  =  context.getAnnotation(JsonAdapter.class);  [CE]  type  JsonAdapter  does  not  take  parameters  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  JsonAdapter  <?>  mapped  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  JsonAdapter  <?>  mapped  =  context.getAnnotation(JsonAdapter.class);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  type  JsonAdapter  does  not  take  parameters	6	None	replace
634	[BUG]  [BUGGY]  final  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    mapped    =    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
635	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  deserialize,  typeAdapter);  [CE]  cannot  find  symbol  compiler  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  NodeTraversal.traverse(compiler,  fieldType,  deserialize,  typeAdapter);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	NodeTraversal.traverse(compiler,  fieldType,  deserialize,  typeAdapter);	  NodeTraversal.traverse(compiler,    fieldType,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	97	None	replace
636	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldType.getSerialize()  :  deserialize);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldType.getSerialize()  :  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  fieldType.getSerialize()  :  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldType.getSerialize());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
637	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.class);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.class);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingStrategy.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
638	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.findDeclaredType());  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.findDeclaredType());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.findDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingStrategy.getDeclaredType());    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	119	None	replace
639	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(deserialize,  fieldType);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(deserialize,  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(deserialize,  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    deserialize);    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	77	None	replace
640	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(delegated,  fieldType,  deserialize);  [CE]  cannot  find  symbol  delegated  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(delegated,  fieldType,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(delegated,  fieldType,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  delegated	77	None	replace
641	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class)+  1,  JsonAdapter.class);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class)+  1,  JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getAnnotation(JsonAdapter.class)+  1,  JsonAdapter.class);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getAnnotation(JsonAdapter.class));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	26	None	replace
642	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  methodNamingStrategy.getDeclaringClass());  [CE]  cannot  find  symbol  methodNamingStrategy  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  methodNamingStrategy.getDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  methodNamingStrategy.getDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingStrategy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  methodNamingStrategy	86	None	replace
643	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.findDeclaringClass());  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.findDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.findDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingStrategy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	86	None	replace
644	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serialized);  [CE]  cannot  find  symbol  serialized  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serialized);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass(),  serialized);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass(),    serialize);    	non-compiled	[CE]  cannot  find  symbol  serialized	116	None	replace
645	[BUG]  [BUGGY]  TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class,  serializedName);  [CE]  variable  fieldType  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class,  serializedName);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  fieldType  =  field.getAnnotation(Serialize.class,  serializedName);	  TypeToken    <?>    fieldType    =    field.getAnnotation(Serialize.class);    	non-compiled	[CE]  variable  fieldType  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	107	None	replace
646	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getSerialize(),  deserialize);  [CE]  cannot  find  symbol  fieldValue  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getSerialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getSerialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getSerialize(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	70	None	replace
647	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  processor.getSerialize(),  deserialize);  [CE]  cannot  find  symbol  processor  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  processor.getSerialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  processor.getSerialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getSerialize(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  processor	70	None	replace
648	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.findDeclaringClass(fieldValue));  [CE]  cannot  find  symbol  fieldValue  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.findDeclaringClass(fieldValue));  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingPolicy.findDeclaringClass(fieldValue));	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    fieldNamingPolicy.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  fieldValue	84	None	replace
649	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getPrimitiveType(),  serialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getPrimitiveType(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getPrimitiveType(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    serialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	56	None	replace
650	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getRawClass(),  serialize);  [CE]  cannot  find  symbol  fieldValue  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getRawClass(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getRawClass(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    serialize);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	20	None	replace
651	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  null);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,<null>)  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  null);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  null);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,<null>)	98	None	replace
652	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  description);  [CE]  cannot  find  symbol  description  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  description);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class,  description);	  ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  description	98	None	replace
653	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeclaredType(),  serialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeclaredType(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getDeclaredType(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaredType(),    serialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	38	None	replace
654	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
655	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  field.getDeclaringClass()  :  deserialize);  [CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  field.getDeclaringClass()  :  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize?  field.getDeclaringClass()  :  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getDeclaringClass());    	non-compiled	[CE]  method  isPrimitive  in  class  Primitives  cannot  be  applied  to  given  types;	112	None	replace
656	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(JsonAdapter.class);	  TypeToken    <?>    jsonAdapterPresent    =    context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
657	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(fieldType);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  JsonAdapter.getAnnotation(fieldType);	  TypeToken    <?>    jsonAdapterPresent    =    context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
658	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getSerialize());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getSerialize());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  serialize,  context.getSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    serialize.getSerialize());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
659	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaringClass(),  serialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaringClass(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getDeclaringClass(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeclaringClass(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	18	None	replace
660	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  serialized);  [CE]  cannot  find  symbol  serialized  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  serialized);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  field.getDeclaringClass(),  serialized);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol  serialized	85	None	replace
661	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  fieldType.getDeclaringClass());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  fieldType.getDeclaringClass());  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(field,  fieldType.getDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType,    field.getDeclaringClass());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
662	[BUG]  [BUGGY]  if(fieldType.getClass()!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  cannot  find  symbol  isPrimitive  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()!=  null)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  final  boolean  arePrimitive  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    final    boolean    arePrimitive    =    Primitives.isPrimitive(fieldType.getClass());    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	89	None	replace
663	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldValue.getConstructor();  [CE]  cannot  find  symbol  fieldValue  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  ObjectConstructor  constructor  =  fieldValue.getConstructor();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	ObjectConstructor  constructor  =  fieldValue.getConstructor();	  ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  fieldValue	108	None	replace
664	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class),  serialize,  deserialize);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class),  serialize,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  ';'  expected	67	None	replace
665	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  serializedName);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	TypeToken  <?>  jsonAdapterPresent  =  field.getAnnotation(TypeToken.class,  serializedName);	  TypeToken    <?>    jsonAdapterPresent    =    field.getAnnotation(TypeToken.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	67	None	replace
666	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getRawClass(),  delegate);  [CE]  cannot  find  symbol  fieldValue  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getRawClass(),  delegate);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getRawClass(),  delegate);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	24	None	replace
667	[BUG]  [BUGGY]  FieldValue  <?>  fieldValue  =  field.value();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  FieldValue  <?>  fieldValue  =  field.value();  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	FieldValue  <?>  fieldValue  =  field.value();	  FieldValue    <?>    fieldValue    =    field.getValue();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
668	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getPrimitiveType(),  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getPrimitiveType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getPrimitiveType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	57	None	replace
669	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  processor.getPrimitiveType(),  deserialize);  [CE]  cannot  find  symbol  processor  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  processor.getPrimitiveType(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  processor.getPrimitiveType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  processor	57	None	replace
670	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serializers.getAnnotation(JsonAdapter.class),  fieldType);  [CE]  cannot  find  symbol  serializers  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(serializers.getAnnotation(JsonAdapter.class),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(serializers.getAnnotation(JsonAdapter.class),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getAnnotation(JsonAdapter.class),    serialize);    	non-compiled	[CE]  cannot  find  symbol  serializers	28	None	replace
671	[BUG]  [BUGGY]  JsonAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  JsonAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	JsonAdapter  <?>  mapped  =  getTypeAdapter(constructorConstructor,	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class);    mapped    =    getTypeAdapter(constructorConstructor,    	non-compiled	[CE]  ')'  expected	2	None	replace
672	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass()),  serialize,  deserialize);  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass()),  serialize,  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass()),  serialize,  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass()).booleanValue();    	non-compiled	[CE]  ';'  expected	114	None	replace
673	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getRawClass(),  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getRawClass(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getRawClass(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawClass(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	22	None	replace
674	[BUG]  [BUGGY]  if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialized  =  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialized  =  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialized  =  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialized    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
675	[BUG]  [BUGGY]  if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialized  =  Primitives.isPrimitive(fieldType.getClass()  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialized  =  Primitives.isPrimitive(fieldType.getClass()  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(fieldType.getClass()!=  fieldType)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  final  boolean  serialized  =  Primitives.isPrimitive(fieldType.getClass()	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialized    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  ')'  expected	111	None	replace
676	[BUG]  [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  return  Primitives.isPrimitive(fieldType.getClass());  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  return  Primitives.isPrimitive(fieldType.getClass());  }  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	if(serialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  if(isPrimitive)  {  return  Primitives.isPrimitive(fieldType.getClass());  }	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    if(isPrimitive)    {    final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getClass());    }    else    {    final    boolean    serialized    =    Primitives.isPrimitive(fieldType.getClass());    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
677	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getPrimitiveType(),  fieldValue);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getPrimitiveType(),  fieldValue);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldNamingStrategy.getPrimitiveType(),  fieldValue);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getPrimitiveType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	59	None	replace
678	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  processor.getDeserialize(),  deserialize);  [CE]  cannot  find  symbol  processor  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  processor.getDeserialize(),  deserialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  processor.getDeserialize(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getDeserialize(),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  processor	9	None	replace
679	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getReturnType(),  serialize);  [CE]  cannot  find  symbol  fieldValue  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getReturnType(),  serialize);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType,  fieldValue.getReturnType(),  serialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	47	None	replace
680	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getReturnType(),  fieldType);  [CE]  cannot  find  symbol  fieldValue  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getReturnType(),  fieldType);  [BUGGY]        JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	106	106	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldValue.getReturnType(),  fieldType);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getReturnType(),    fieldValue);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	47	None	replace
