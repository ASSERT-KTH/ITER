bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  new  TypeToken(type.getRawType(),  field);  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  new  TypeToken(type.getRawType(),  field);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  new  TypeToken(type.getRawType(),  field);	  result    =    new    TypeToken(type.getRawType());    	non-compiled	[CE]  cannot  find  symbol  field	55	None	replace
2	[BUG]  [BUGGY]  result  =  new  TypeToken(type.getRawClass());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  new  TypeToken(type.getRawClass());  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  new  TypeToken(type.getRawClass());	  result    =    new    TypeToken(type.getRawType());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
3	[BUG]  [BUGGY]  result  =  new  TypeToken(type.getRawType(),  raw);  [CE]  no  suitable  constructor  found  for  TypeToken(Class<CAP#1>,Class<CAP#3>)  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  new  TypeToken(type.getRawType(),  raw);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  new  TypeToken(type.getRawType(),  raw);	  result    =    new    TypeToken(type.getRawType());    	non-compiled	[CE]  no  suitable  constructor  found  for  TypeToken(Class<CAP#1>,Class<CAP#3>)	55	None	replace
4	[BUG]  [BUGGY]  result  =  new  TypeToken(fieldType.getRawType());  [CE]  cannot  find  symbol  fieldType  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  new  TypeToken(fieldType.getRawType());  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  new  TypeToken(fieldType.getRawType());	  result    =    new    TypeToken(type.getRawType());    	non-compiled	[CE]  cannot  find  symbol  fieldType	55	None	replace
5	[BUG]  [BUGGY]  result  =  new  TypeToken(type.getType());  [CE]  TypeToken(Type)  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package  [FE]                          ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  new  TypeToken(type.getType());  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  new  TypeToken(type.getType());	  result    =    new    TypeToken(type.getRawType());    	non-compiled	[CE]  TypeToken(Type)  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package	55	None	replace
6	[BUG]  [BUGGY]  result  =  new  TypeToken(type.getRawType(),  deserialize);  [CE]  cannot  find  symbol  deserialize  [FE]                            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  new  TypeToken(type.getRawType(),  deserialize);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  new  TypeToken(type.getRawType(),  deserialize);	  result    =    new    TypeToken(type.getRawType());    	non-compiled	[CE]  cannot  find  symbol  deserialize	55	None	replace
7	[BUG]  [BUGGY]  raw  =  this.context.getRawClass();  [CE]  cannot  find  symbol  context  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  this.context.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  this.context.getRawClass();	  raw    =    context.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  context	15	None	replace
8	[BUG]  [BUGGY]  raw  =  _context.getRawClass();  [CE]  cannot  find  symbol  _context  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  _context.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  _context.getRawClass();	  raw    =    context.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  _context	15	None	replace
9	[BUG]  [BUGGY]  raw  =  jsonAdapter.getRawClass();  [CE]  cannot  find  symbol  jsonAdapter  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  jsonAdapter.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  jsonAdapter.getRawClass();	  raw    =    context.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	15	None	replace
10	[BUG]  [BUGGY]  result.put(type,  fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]          IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(type,  fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(type,  fieldType);	          result.put(name,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  fieldType	2	None	replace
11	[BUG]  [BUGGY]  result.put(fieldType,  fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]            IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(fieldType,  fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(fieldType,  fieldType);	          result.put(name,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  fieldType	2	None	replace
12	[BUG]  [BUGGY]  result.put(serializedName,  fieldType);  [CE]  cannot  find  symbol  serializedName  [FE]              IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(serializedName,  fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(serializedName,  fieldType);	          result.put(name,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  serializedName	2	None	replace
13	[BUG]  [BUGGY]  result.put(fieldName,  fieldType);  [CE]  cannot  find  symbol  fieldName  [FE]                IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(fieldName,  fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(fieldName,  fieldType);	          result.put(name,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  fieldName	2	None	replace
14	[BUG]  [BUGGY]  result.put(declaredType,  fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                  IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(declaredType,  fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(declaredType,  fieldType);	          result.put(name,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  fieldType	2	None	replace
15	[BUG]  [BUGGY]  result.put(field,  fieldType);  [CE]  cannot  find  symbol  field  [FE]                    IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(field,  fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(field,  fieldType);	          result.put(name,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  field	2	None	replace
16	[BUG]  [BUGGY]  raw  =  source.getRawType();  [CE]  cannot  find  symbol  source  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  source.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  source.getRawType();	  raw    =    _context.getRawType();    	non-compiled	[CE]  cannot  find  symbol  source	34	None	replace
17	[BUG]  [BUGGY]  result  =  fieldType.getRawType(),  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fieldType.getRawType(),  type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fieldType.getRawType(),  type);	  result    =    type.getRawType(),    fieldType);    	non-compiled	[CE]  ';'  expected	22	None	replace
18	[BUG]  [BUGGY]  result  =  type.getRawType(),  fieldType,  deserialize);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawType(),  fieldType,  deserialize);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawType(),  fieldType,  deserialize);	  result    =    type.getRawType(),    fieldType);    	non-compiled	[CE]  ';'  expected	22	None	replace
19	[BUG]  [BUGGY]  result  =  type.getRawType(),  declaredType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawType(),  declaredType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawType(),  declaredType);	  result    =    type.getRawType(),    fieldType);    	non-compiled	[CE]  ';'  expected	22	None	replace
20	[BUG]  [BUGGY]  result  =  context.getRawType(),  fieldType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  context.getRawType(),  fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  context.getRawType(),  fieldType);	  result    =    type.getRawType(),    fieldType);    	non-compiled	[CE]  ';'  expected	22	None	replace
21	[BUG]  [BUGGY]  result  =  type.getReturnType(),  fieldType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getReturnType(),  fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getReturnType(),  fieldType);	  result    =    type.getRawType(),    fieldType);    	non-compiled	[CE]  ';'  expected	22	None	replace
22	[BUG]  [BUGGY]  result  =  type.getFunctionType(),  fieldType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getFunctionType(),  fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getFunctionType(),  fieldType);	  result    =    type.getRawType(),    fieldType);    	non-compiled	[CE]  ';'  expected	22	None	replace
23	[BUG]  [BUGGY]  result  =  field.getRawType(),  type);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  field.getRawType(),  type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  field.getRawType(),  type);	  result    =    type.getRawType(),    fieldType);    	non-compiled	[CE]  ';'  expected	22	None	replace
24	[BUG]  [BUGGY]  If(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  If(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	If(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }	          if(type!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldType.name);    }    	non-compiled	[CE]  	8	None	replace
25	[BUG]  [BUGGY]  If(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  type.name);  }  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  If(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  type.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	If(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  type.name);  }	          if(type!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldType.name);    }    	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  If(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType.name);  }  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  If(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	If(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType.name);  }	          if(type!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldType.name);    }    	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  result  =  fieldNames.getGenericSuperclass();  [CE]  cannot  find  symbol  fieldNames  [FE]            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fieldNames.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fieldNames.getGenericSuperclass();	  raw    =    fieldNames.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	47	None	replace
28	[BUG]  [BUGGY]  raw  =  previous.getGenericSuperclass();  [CE]  cannot  find  symbol  previous  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  previous.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  previous.getGenericSuperclass();	  raw    =    fieldNames.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  previous	47	None	replace
29	[BUG]  [BUGGY]  result  =  type.getNativeType(declaredType);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getNativeType(declaredType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getNativeType(declaredType);	  result    =    type.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
30	[BUG]  [BUGGY]  result  =  context.getNativeType(UNKNOWN_TYPE);  [CE]  cannot  find  symbol  UNKNOWN_TYPE  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  context.getNativeType(UNKNOWN_TYPE);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  context.getNativeType(UNKNOWN_TYPE);	  result    =    type.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_TYPE	41	None	replace
31	[BUG]  [BUGGY]  result  =  fieldType.getNativeType(UNKNOWN_TYPE);  [CE]  cannot  find  symbol  UNKNOWN_TYPE  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fieldType.getNativeType(UNKNOWN_TYPE);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fieldType.getNativeType(UNKNOWN_TYPE);	  result    =    type.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_TYPE	41	None	replace
32	[BUG]  [BUGGY]  result  =  type.getNativeType(JSON_TYPE);  [CE]  cannot  find  symbol  JSON_TYPE  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getNativeType(JSON_TYPE);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getNativeType(JSON_TYPE);	  result    =    type.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSON_TYPE	41	None	replace
33	[BUG]  [BUGGY]  result  =  type.getNativeType(type);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getNativeType(type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getNativeType(type);	  result    =    type.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
34	[BUG]  [BUGGY]  result  =  type.getNativeType(fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getNativeType(fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getNativeType(fieldType);	  result    =    type.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol  fieldType	41	None	replace
35	[BUG]  [BUGGY]  result  =  type.getNativeType(desc);  [CE]  cannot  find  symbol  desc  [FE]                              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getNativeType(desc);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getNativeType(desc);	  result    =    type.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol  desc	41	None	replace
36	[BUG]  [BUGGY]  result  =  field.getGenericSuperclass();  [CE]  cannot  find  symbol  field  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  field.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  field.getGenericSuperclass();	  raw    =    field.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  field	26	None	replace
37	[BUG]  [BUGGY]  raw  =  boundField.getGenericSuperclass();  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  boundField.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  boundField.getGenericSuperclass();	  raw    =    field.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  boundField	26	None	replace
38	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldName);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	56	None	replace
39	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldName);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	56	None	replace
40	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldName);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	56	None	replace
41	[BUG]  [BUGGY]  raw  =  declaredType.getGenericSuperclass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  declaredType.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  declaredType.getGenericSuperclass();	  raw    =    fieldType.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
42	[BUG]  [BUGGY]  raw  =  fields[field.getGenericSuperclass()  ];  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fields[field.getGenericSuperclass()  ];  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fields[field.getGenericSuperclass()  ];	  raw    =    fields.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  field	29	None	replace
43	[BUG]  [BUGGY]  result  =  fields.getGenericSuperclass();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fields.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fields.getGenericSuperclass();	  raw    =    fields.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
44	[BUG]  [BUGGY]  raw  =  fields[fields.getGenericSuperclass()  ];  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fields[fields.getGenericSuperclass()  ];  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fields[fields.getGenericSuperclass()  ];	  raw    =    fields.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
45	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }	          Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    field.name);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	replace
46	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }	          Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    field.name);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	replace
47	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }	          Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    field.name);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	replace
48	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }	          Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    field.name);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	replace
49	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  type.fieldName);  }  [CE]  cannot  find  symbol  fieldName  [FE]                    IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  type.fieldName);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  type.fieldName);  }	          if(type!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    type.name);    }    	non-compiled	[CE]  cannot  find  symbol  fieldName	7	None	replace
50	[BUG]  [BUGGY]  result  =  this.context.getRawType();  [CE]  cannot  find  symbol  context  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  this.context.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  this.context.getRawType();	  raw    =    this.context.getRawType();    	non-compiled	[CE]  cannot  find  symbol  context	33	None	replace
51	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldType);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	59	None	replace
52	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldType);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	59	None	replace
53	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldType);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	59	None	replace
54	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldType);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	59	None	replace
55	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldName);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	57	None	replace
56	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldName);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	57	None	replace
57	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldName);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	57	None	replace
58	[BUG]  [BUGGY]  result  =  context.getGenericSuperclass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  context.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  context.getGenericSuperclass();	  result    =    type.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
59	[BUG]  [BUGGY]  result  =  type.getGenericSuperclass(),  raw.getGenericSuperclass();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getGenericSuperclass(),  raw.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getGenericSuperclass(),  raw.getGenericSuperclass();	  result    =    type.getGenericSuperclass();    	non-compiled	[CE]  ';'  expected	28	None	replace
60	[BUG]  [BUGGY]  result  =  raw.getGenericSuperclass();  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  raw.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  raw.getGenericSuperclass();	  result    =    type.getGenericSuperclass();    	non-compiled	[CE]  incompatible  types	28	None	replace
61	[BUG]  [BUGGY]  result  =  boundField.getGenericSuperclass();  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  boundField.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  boundField.getGenericSuperclass();	  result    =    type.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  boundField	28	None	replace
62	[BUG]  [BUGGY]  result  =  fieldType.getRawType().restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  fieldType  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fieldType.getRawType().restrictByNotNullOrUndefined();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fieldType.getRawType().restrictByNotNullOrUndefined();	  result    =    type.getRawType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  fieldType	21	None	replace
63	[BUG]  [BUGGY]  result  =  context.getRawType().restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  context.getRawType().restrictByNotNullOrUndefined();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  context.getRawType().restrictByNotNullOrUndefined();	  result    =    type.getRawType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
64	[BUG]  [BUGGY]  result  =  field.getRawType().restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  field.getRawType().restrictByNotNullOrUndefined();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  field.getRawType().restrictByNotNullOrUndefined();	  result    =    type.getRawType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  field	21	None	replace
65	[BUG]  [BUGGY]  result  =  type.getRawType(),  fieldType.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawType(),  fieldType.restrictByNotNullOrUndefined();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawType(),  fieldType.restrictByNotNullOrUndefined();	  result    =    type.getRawType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	21	None	replace
66	[BUG]  [BUGGY]  result  =  boundField.getRawType().restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  boundField.getRawType().restrictByNotNullOrUndefined();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  boundField.getRawType().restrictByNotNullOrUndefined();	  result    =    type.getRawType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  boundField	21	None	replace
67	[BUG]  [BUGGY]  result  =  raw.getRawType().restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  raw.getRawType().restrictByNotNullOrUndefined();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  raw.getRawType().restrictByNotNullOrUndefined();	  result    =    type.getRawType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
68	[BUG]  [BUGGY]  raw  =  predecessor.getRawType();  [CE]  cannot  find  symbol  predecessor  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  predecessor.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  predecessor.getRawType();	  raw    =    boundField.getRawType();    	non-compiled	[CE]  cannot  find  symbol  predecessor	24	None	replace
69	[BUG]  [BUGGY]  result  =  field.getRawClass();  [CE]  cannot  find  symbol  field  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  field.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  field.getRawClass();	  raw    =    field.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  field	16	None	replace
70	[BUG]  [BUGGY]  result  =  fieldNames.getRawClass();  [CE]  cannot  find  symbol  fieldNames  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fieldNames.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fieldNames.getRawClass();	  raw    =    fieldNames.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	60	None	replace
71	[BUG]  [BUGGY]  raw  =  boundFields.getRawClass();  [CE]  cannot  find  symbol  boundFields  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  boundFields.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  boundFields.getRawClass();	  raw    =    fieldNames.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  boundFields	60	None	replace
72	[BUG]  [BUGGY]  result  =  new  TypeToken(type.getRawType(),  declaredType);  [CE]  no  suitable  constructor  found  for  TypeToken(Class<CAP#1>,Type)  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  new  TypeToken(type.getRawType(),  declaredType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  new  TypeToken(type.getRawType(),  declaredType);	  result    =    new    TypeToken(type.getRawType(),    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  TypeToken(Class<CAP#1>,Type)	54	None	replace
73	[BUG]  [BUGGY]  result  =  new  TypeToken(type.getRawType(),  boundField);  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  new  TypeToken(type.getRawType(),  boundField);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  new  TypeToken(type.getRawType(),  boundField);	  result    =    new    TypeToken(type.getRawType(),    fieldType);    	non-compiled	[CE]  cannot  find  symbol  boundField	54	None	replace
74	[BUG]  [BUGGY]  result  =  new  TypeToken(type.getRawType(),  previous);  [CE]  cannot  find  symbol  previous  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  new  TypeToken(type.getRawType(),  previous);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  new  TypeToken(type.getRawType(),  previous);	  result    =    new    TypeToken(type.getRawType(),    fieldType);    	non-compiled	[CE]  cannot  find  symbol  previous	54	None	replace
75	[BUG]  [BUGGY]  result  =  new  TypeToken(type.getRawType(),  type);  [CE]  no  suitable  constructor  found  for  TypeToken(Class<CAP#1>,TypeToken<CAP#3>)  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  new  TypeToken(type.getRawType(),  type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  new  TypeToken(type.getRawType(),  type);	  result    =    new    TypeToken(type.getRawType(),    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  TypeToken(Class<CAP#1>,TypeToken<CAP#3>)	54	None	replace
76	[BUG]  [BUGGY]  raw  =  result.getRawClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  result.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  result.getRawClass();	  raw    =    name.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
77	[BUG]  [BUGGY]  raw  =  predecessor.getRawClass();  [CE]  cannot  find  symbol  predecessor  [FE]            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  predecessor.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  predecessor.getRawClass();	  raw    =    boundField.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  predecessor	38	None	replace
78	[BUG]  [BUGGY]  result  =  boundField.getRawClass();  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  boundField.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  boundField.getRawClass();	  raw    =    previous.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  boundField	18	None	replace
79	[BUG]  [BUGGY]  If(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [CE]  [FE]            IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  If(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	If(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }	          if(type!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldType);    }    	non-compiled	[CE]  	45	None	replace
80	[BUG]  [BUGGY]  result  =  reference.getRawType();  [CE]  cannot  find  symbol  reference  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  reference.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  reference.getRawType();	  result    =    predecessor.getRawType();    	non-compiled	[CE]  cannot  find  symbol  reference	51	None	replace
81	[BUG]  [BUGGY]  result  =  boundFields.getRawType();  [CE]  cannot  find  symbol  boundFields  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  boundFields.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  boundFields.getRawType();	  result    =    previous.getRawType();    	non-compiled	[CE]  cannot  find  symbol  boundFields	10	None	replace
82	[BUG]  [BUGGY]  result  =  node.getRawType();  [CE]  cannot  find  symbol  node  [FE]                          ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  node.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  node.getRawType();	  result    =    previous.getRawType();    	non-compiled	[CE]  cannot  find  symbol  node	10	None	replace
83	[BUG]  [BUGGY]  raw  =  type.getGenericSuperclass(),  replaced;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  type.getGenericSuperclass(),  replaced;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  type.getGenericSuperclass(),  replaced;	  raw    =    type.getGenericSuperclass(),    boundField;    	non-compiled	[CE]  ';'  expected	30	None	replace
84	[BUG]  [BUGGY]  raw  =  fieldType.getGenericSuperclass(),  boundField;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldType.getGenericSuperclass(),  boundField;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldType.getGenericSuperclass(),  boundField;	  raw    =    type.getGenericSuperclass(),    boundField;    	non-compiled	[CE]  ';'  expected	30	None	replace
85	[BUG]  [BUGGY]  raw  =  type.getGenericSuperclass(),  field;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  type.getGenericSuperclass(),  field;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  type.getGenericSuperclass(),  field;	  raw    =    type.getGenericSuperclass(),    boundField;    	non-compiled	[CE]  ';'  expected	30	None	replace
86	[BUG]  [BUGGY]  raw  =  field.getGenericSuperclass(),  boundField;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  field.getGenericSuperclass(),  boundField;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  field.getGenericSuperclass(),  boundField;	  raw    =    type.getGenericSuperclass(),    boundField;    	non-compiled	[CE]  ';'  expected	30	None	replace
87	[BUG]  [BUGGY]  result  =  type.getGenericSuperclass(),  boundField;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getGenericSuperclass(),  boundField;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getGenericSuperclass(),  boundField;	  raw    =    type.getGenericSuperclass(),    boundField;    	non-compiled	[CE]  ';'  expected	30	None	replace
88	[BUG]  [BUGGY]  raw  =  context.getGenericSuperclass(),  boundField;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  context.getGenericSuperclass(),  boundField;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  context.getGenericSuperclass(),  boundField;	  raw    =    type.getGenericSuperclass(),    boundField;    	non-compiled	[CE]  ';'  expected	30	None	replace
89	[BUG]  [BUGGY]  raw  =  type.getGenericSuperclass(),  result;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  type.getGenericSuperclass(),  result;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  type.getGenericSuperclass(),  result;	  raw    =    type.getGenericSuperclass(),    boundField;    	non-compiled	[CE]  ';'  expected	30	None	replace
90	[BUG]  [BUGGY]  result.put(fieldType,  type);  [CE]  cannot  find  symbol  fieldType  [FE]        IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(fieldType,  type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(fieldType,  type);	          result.put(name,    type);    	non-compiled	[CE]  cannot  find  symbol  fieldType	1	None	replace
91	[BUG]  [BUGGY]  result.put(fieldName,  type);  [CE]  cannot  find  symbol  fieldName  [FE]          IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(fieldName,  type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(fieldName,  type);	          result.put(name,    type);    	non-compiled	[CE]  cannot  find  symbol  fieldName	1	None	replace
92	[BUG]  [BUGGY]  result.put(field,  type);  [CE]  cannot  find  symbol  field  [FE]            IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(field,  type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(field,  type);	          result.put(name,    type);    	non-compiled	[CE]  cannot  find  symbol  field	1	None	replace
93	[BUG]  [BUGGY]  result.put(type,  type);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(type,  type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(type,  type);	          result.put(name,    type);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	1	None	replace
94	[BUG]  [BUGGY]  result.put(serializedName,  type);  [CE]  cannot  find  symbol  serializedName  [FE]                IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(serializedName,  type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(serializedName,  type);	          result.put(name,    type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	1	None	replace
95	[BUG]  [BUGGY]  result.put(declaredType,  type);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(declaredType,  type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(declaredType,  type);	          result.put(name,    type);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	1	None	replace
96	[BUG]  [BUGGY]  raw  =  fieldType.getRawClass(),  type;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldType.getRawClass(),  type;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldType.getRawClass(),  type;	  raw    =    type.getRawClass(),    fieldType;    	non-compiled	[CE]  ';'  expected	32	None	replace
97	[BUG]  [BUGGY]  raw  =  field.getRawClass(),  type;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  field.getRawClass(),  type;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  field.getRawClass(),  type;	  raw    =    type.getRawClass(),    fieldType;    	non-compiled	[CE]  ';'  expected	32	None	replace
98	[BUG]  [BUGGY]  raw  =  type.getRawClass(),  fieldType,  deserialize);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  type.getRawClass(),  fieldType,  deserialize);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  type.getRawClass(),  fieldType,  deserialize);	  raw    =    type.getRawClass(),    fieldType;    	non-compiled	[CE]  ';'  expected	32	None	replace
99	[BUG]  [BUGGY]  raw  =  context.getRawClass(),  fieldType;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  context.getRawClass(),  fieldType;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  context.getRawClass(),  fieldType;	  raw    =    type.getRawClass(),    fieldType;    	non-compiled	[CE]  ';'  expected	32	None	replace
100	[BUG]  [BUGGY]  result  =  type.getRawClass(),  fieldType;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawClass(),  fieldType;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawClass(),  fieldType;	  raw    =    type.getRawClass(),    fieldType;    	non-compiled	[CE]  ';'  expected	32	None	replace
101	[BUG]  [BUGGY]  raw  =  fieldType.getRawClass(),  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldType.getRawClass(),  type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldType.getRawClass(),  type);	  raw    =    type.getRawClass(),    fieldType;    	non-compiled	[CE]  ';'  expected	32	None	replace
102	[BUG]  [BUGGY]  result  =  context.getRawClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  context.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  context.getRawClass();	  result    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
103	[BUG]  [BUGGY]  result  =  type.getRawClass(),  raw.getGenericSuperclass());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawClass(),  raw.getGenericSuperclass());  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawClass(),  raw.getGenericSuperclass());	  result    =    type.getRawClass();    	non-compiled	[CE]  ';'  expected	31	None	replace
104	[BUG]  [BUGGY]  result  =  type.getRawClass(),  raw.getGenericSuperclass();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawClass(),  raw.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawClass(),  raw.getGenericSuperclass();	  result    =    type.getRawClass();    	non-compiled	[CE]  ';'  expected	31	None	replace
105	[BUG]  [BUGGY]  result  =  declaredType.getRawClass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  declaredType.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  declaredType.getRawClass();	  result    =    fieldType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
106	[BUG]  [BUGGY]  result  =  previous.getRawClass();  [CE]  cannot  find  symbol  previous  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  previous.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  previous.getRawClass();	  result    =    fieldType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  previous	17	None	replace
107	[BUG]  [BUGGY]  result  =  first.getRawClass();  [CE]  cannot  find  symbol  first  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  first.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  first.getRawClass();	  result    =    fieldType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  first	17	None	replace
108	[BUG]  [BUGGY]  result  =  original.getRawType();  [CE]  cannot  find  symbol  original  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  original.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  original.getRawType();	  result    =    boundField.getRawType();    	non-compiled	[CE]  cannot  find  symbol  original	49	None	replace
109	[BUG]  [BUGGY]  result  =  replaced.getRawType();  [CE]  cannot  find  symbol  replaced  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  replaced.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  replaced.getRawType();	  result    =    boundField.getRawType();    	non-compiled	[CE]  cannot  find  symbol  replaced	49	None	replace
110	[BUG]  [BUGGY]  result  =  fields.getRawType();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fields.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fields.getRawType();	  result    =    declaredType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
111	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields    ==    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	5	None	replace
112	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields    ==    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	5	None	replace
113	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields    ==    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	5	None	replace
114	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  field.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields    ==    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	5	None	replace
115	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  context.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields    ==    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	5	None	replace
116	[BUG]  [BUGGY]  result  =  fieldType.getRawType(),  type;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fieldType.getRawType(),  type;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fieldType.getRawType(),  type;	  result    =    type.getRawType(),    fieldType;    	non-compiled	[CE]  ';'  expected	40	None	replace
117	[BUG]  [BUGGY]  result  =  type.getRawType(),  declaredType;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawType(),  declaredType;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawType(),  declaredType;	  result    =    type.getRawType(),    fieldType;    	non-compiled	[CE]  ';'  expected	40	None	replace
118	[BUG]  [BUGGY]  result  =  context.getRawType(),  fieldType;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  context.getRawType(),  fieldType;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  context.getRawType(),  fieldType;	  result    =    type.getRawType(),    fieldType;    	non-compiled	[CE]  ';'  expected	40	None	replace
119	[BUG]  [BUGGY]  result  =  field.getRawType(),  type;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  field.getRawType(),  type;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  field.getRawType(),  type;	  result    =    type.getRawType(),    fieldType;    	non-compiled	[CE]  ';'  expected	40	None	replace
120	[BUG]  [BUGGY]  result  =  type.getRawType(),  fieldNamingPolicy;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawType(),  fieldNamingPolicy;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawType(),  fieldNamingPolicy;	  result    =    type.getRawType(),    fieldType;    	non-compiled	[CE]  ';'  expected	40	None	replace
121	[BUG]  [BUGGY]  result  =  type.getReturnType(),  fieldType;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getReturnType(),  fieldType;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getReturnType(),  fieldType;	  result    =    type.getRawType(),    fieldType;    	non-compiled	[CE]  ';'  expected	40	None	replace
122	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    field.name);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	58	None	replace
123	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    field.name);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	58	None	replace
124	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    field.name);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	58	None	replace
125	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    field.name);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	58	None	replace
126	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields!=    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	4	None	replace
127	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields!=    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	4	None	replace
128	[BUG]  [BUGGY]  raw  =  fields[field.getRawType()  ];  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fields[field.getRawType()  ];  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fields[field.getRawType()  ];	  raw    =    fields.getRawType();    	non-compiled	[CE]  cannot  find  symbol  field	37	None	replace
129	[BUG]  [BUGGY]  raw  =  fields[fieldType.getRawType()  ];  [CE]  cannot  find  symbol  fieldType  [FE]                          ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fields[fieldType.getRawType()  ];  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fields[fieldType.getRawType()  ];	  raw    =    fields.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldType	37	None	replace
130	[BUG]  [BUGGY]  result  =  fieldNames.getRawType();  [CE]  cannot  find  symbol  fieldNames  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fieldNames.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fieldNames.getRawType();	  raw    =    fieldNames.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	36	None	replace
131	[BUG]  [BUGGY]  raw  =  previous.fieldNames.getRawType();  [CE]  package  previous  does  not  exist  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  previous.fieldNames.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  previous.fieldNames.getRawType();	  raw    =    fieldNames.getRawType();    	non-compiled	[CE]  package  previous  does  not  exist	36	None	replace
132	[BUG]  [BUGGY]  raw  =  boundFields.getRawType();  [CE]  cannot  find  symbol  boundFields  [FE]                          ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  boundFields.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  boundFields.getRawType();	  raw    =    fieldNames.getRawType();    	non-compiled	[CE]  cannot  find  symbol  boundFields	36	None	replace
133	[BUG]  [BUGGY]  result  =  fieldNamingPolicy.getGenericSuperclass();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fieldNamingPolicy.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fieldNamingPolicy.getGenericSuperclass();	  raw    =    fieldNamingPolicy.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
134	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.findGenericSuperclass(fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.findGenericSuperclass(fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.findGenericSuperclass(fieldType);	  raw    =    fieldNamingPolicy.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  fieldType	61	None	replace
135	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.getGenericSuperclass(type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.getGenericSuperclass(type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.getGenericSuperclass(type);	  raw    =    fieldNamingPolicy.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
136	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.generateSuperclass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.generateSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.generateSuperclass();	  raw    =    fieldNamingPolicy.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
137	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.findGenericSuperclass(type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.findGenericSuperclass(type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.findGenericSuperclass(type);	  raw    =    fieldNamingPolicy.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
138	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.getGenericSuperclass(),  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.getGenericSuperclass(),  type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.getGenericSuperclass(),  type);	  raw    =    fieldNamingPolicy.getGenericSuperclass();    	non-compiled	[CE]  ';'  expected	61	None	replace
139	[BUG]  [BUGGY]  result  =  _context.getRawType();  [CE]  cannot  find  symbol  _context  [FE]                          ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  _context.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  _context.getRawType();	  result    =    context.getRawType();    	non-compiled	[CE]  cannot  find  symbol  _context	11	None	replace
140	[BUG]  [BUGGY]  result  =  raw.getRawType();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  raw.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  raw.getRawType();	  result    =    context.getRawType();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
141	[BUG]  [BUGGY]  If(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }  [CE]  [FE]          IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  If(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	If(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }	          if(type!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    name);    }    	non-compiled	[CE]  	44	None	replace
142	[BUG]  [BUGGY]  result  =  declaredType.getGenericSuperclass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  declaredType.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  declaredType.getGenericSuperclass();	  result    =    fieldType.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
143	[BUG]  [BUGGY]  result  =  previous.getGenericSuperclass();  [CE]  cannot  find  symbol  previous  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  previous.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  previous.getGenericSuperclass();	  result    =    fieldType.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  previous	48	None	replace
144	[BUG]  [BUGGY]  result  =  first.getGenericSuperclass();  [CE]  cannot  find  symbol  first  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  first.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  first.getGenericSuperclass();	  result    =    fieldType.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  first	48	None	replace
145	[BUG]  [BUGGY]  raw  =  this.context.getGenericSuperclass();  [CE]  cannot  find  symbol  context  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  this.context.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  this.context.getGenericSuperclass();	  raw    =    context.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  context	27	None	replace
146	[BUG]  [BUGGY]  raw  =  _context.getGenericSuperclass();  [CE]  cannot  find  symbol  _context  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  _context.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  _context.getGenericSuperclass();	  raw    =    context.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  _context	27	None	replace
147	[BUG]  [BUGGY]  result  =  type.getRawType(),  field.getGenericSuperclass());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawType(),  field.getGenericSuperclass());  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawType(),  field.getGenericSuperclass());	  result    =    type.getRawType(),    raw.getGenericSuperclass());    	non-compiled	[CE]  ';'  expected	23	None	replace
148	[BUG]  [BUGGY]  result  =  fieldType.getRawType(),  raw.getGenericSuperclass());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fieldType.getRawType(),  raw.getGenericSuperclass());  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fieldType.getRawType(),  raw.getGenericSuperclass());	  result    =    type.getRawType(),    raw.getGenericSuperclass());    	non-compiled	[CE]  ';'  expected	23	None	replace
149	[BUG]  [BUGGY]  result  =  type.getRawType(),  raw.getGenericSuperclass(),  fieldType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawType(),  raw.getGenericSuperclass(),  fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawType(),  raw.getGenericSuperclass(),  fieldType);	  result    =    type.getRawType(),    raw.getGenericSuperclass());    	non-compiled	[CE]  ';'  expected	23	None	replace
150	[BUG]  [BUGGY]  result  =  type.getRawType(),  boundField.getGenericSuperclass());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawType(),  boundField.getGenericSuperclass());  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawType(),  boundField.getGenericSuperclass());	  result    =    type.getRawType(),    raw.getGenericSuperclass());    	non-compiled	[CE]  ';'  expected	23	None	replace
151	[BUG]  [BUGGY]  result  =  type.getRawType(),  raw.getGenericSuperclass(),  deserialize);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawType(),  raw.getGenericSuperclass(),  deserialize);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawType(),  raw.getGenericSuperclass(),  deserialize);	  result    =    type.getRawType(),    raw.getGenericSuperclass());    	non-compiled	[CE]  ';'  expected	23	None	replace
152	[BUG]  [BUGGY]  result  =  context.getRawType(),  raw.getGenericSuperclass());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  context.getRawType(),  raw.getGenericSuperclass());  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  context.getRawType(),  raw.getGenericSuperclass());	  result    =    type.getRawType(),    raw.getGenericSuperclass());    	non-compiled	[CE]  ';'  expected	23	None	replace
153	[BUG]  [BUGGY]  result.put(type,  boundField);  [CE]  cannot  find  symbol  boundField  [FE]                  IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(type,  boundField);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(type,  boundField);	          result.put(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  boundField	6	None	replace
154	[BUG]  [BUGGY]  result.put(field,  boundField);  [CE]  cannot  find  symbol  field  [FE]                    IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(field,  boundField);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(field,  boundField);	          result.put(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  field	6	None	replace
155	[BUG]  [BUGGY]  result.put(fieldName,  boundField);  [CE]  cannot  find  symbol  fieldName  [FE]                      IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(fieldName,  boundField);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(fieldName,  boundField);	          result.put(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  fieldName	6	None	replace
156	[BUG]  [BUGGY]  result.put(serializedName,  boundField);  [CE]  cannot  find  symbol  serializedName  [FE]                        IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(serializedName,  boundField);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(serializedName,  boundField);	          result.put(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  serializedName	6	None	replace
157	[BUG]  [BUGGY]  result.put(fieldType,  boundField);  [CE]  cannot  find  symbol  fieldType  [FE]                          IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(fieldType,  boundField);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(fieldType,  boundField);	          result.put(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  fieldType	6	None	replace
158	[BUG]  [BUGGY]  result.put(serializableName,  boundField);  [CE]  cannot  find  symbol  serializableName  [FE]                            IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(serializableName,  boundField);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(serializableName,  boundField);	          result.put(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  serializableName	6	None	replace
159	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.getRawType(type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.getRawType(type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.getRawType(type);	  raw    =    fieldNamingPolicy.getRawType();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
160	[BUG]  [BUGGY]  result  =  fieldNamingPolicy.getRawType();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fieldNamingPolicy.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fieldNamingPolicy.getRawType();	  raw    =    fieldNamingPolicy.getRawType();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
161	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.constructType(type.getRawType());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.constructType(type.getRawType());  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.constructType(type.getRawType());	  raw    =    fieldNamingPolicy.getRawType();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
162	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.getRawType(),  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.getRawType(),  type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.getRawType(),  type);	  raw    =    fieldNamingPolicy.getRawType();    	non-compiled	[CE]  ';'  expected	35	None	replace
163	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.findRawType(fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.findRawType(fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.findRawType(fieldType);	  raw    =    fieldNamingPolicy.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldType	35	None	replace
164	[BUG]  [BUGGY]  raw  =  fields[field.getRawClass()  ];  [CE]  cannot  find  symbol  field  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fields[field.getRawClass()  ];  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fields[field.getRawClass()  ];	  raw    =    fields.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  field	50	None	replace
165	[BUG]  [BUGGY]  result  =  fields.getRawClass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fields.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fields.getRawClass();	  raw    =    fields.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
166	[BUG]  [BUGGY]  result  =  type.getRawType(),  fieldNamingPolicy);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawType(),  fieldNamingPolicy);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawType(),  fieldNamingPolicy);	  result    =    type.getRawType(),    fieldType);    	non-compiled	[CE]  ';'  expected	22	None	replace
167	[BUG]  [BUGGY]  result  =  type.getRawType(),  fieldType,  declaredType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawType(),  fieldType,  declaredType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawType(),  fieldType,  declaredType);	  result    =    type.getRawType(),    fieldType);    	non-compiled	[CE]  ';'  expected	22	None	replace
168	[BUG]  [BUGGY]  result  =  fields.getRawType().restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fields.getRawType().restrictByNotNullOrUndefined();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fields.getRawType().restrictByNotNullOrUndefined();	  result    =    type.getRawType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
169	[BUG]  [BUGGY]  result  =  factory.getRawType().restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  factory  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  factory.getRawType().restrictByNotNullOrUndefined();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  factory.getRawType().restrictByNotNullOrUndefined();	  result    =    type.getRawType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  factory	21	None	replace
170	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [CE]  cannot  find  symbol  fieldName  [FE]            IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }	          if(type!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    previous.name);    }    	non-compiled	[CE]  cannot  find  symbol  fieldName	3	None	replace
171	[BUG]  [BUGGY]  raw  =  parent.getRawClass();  [CE]  cannot  find  symbol  parent  [FE]            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  parent.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  parent.getRawClass();	  raw    =    boundField.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  parent	38	None	replace
172	[BUG]  [BUGGY]  raw  =  fieldName.getRawType();  [CE]  cannot  find  symbol  fieldName  [FE]            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldName.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldName.getRawType();	  raw    =    name.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldName	46	None	replace
173	[BUG]  [BUGGY]  result  =  new  TypeToken(type.getName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  new  TypeToken(type.getName());  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  new  TypeToken(type.getName());	  result    =    new    TypeToken(type.getRawType());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
174	[BUG]  [BUGGY]  raw  =  constructor.getRawType();  [CE]  cannot  find  symbol  constructor  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  constructor.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  constructor.getRawType();	  raw    =    _context.getRawType();    	non-compiled	[CE]  cannot  find  symbol  constructor	34	None	replace
175	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.getRawClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.getRawClass();	  raw    =    context.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
176	[BUG]  [BUGGY]  raw  =  type.getRawClass(),  fieldType  +  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  type.getRawClass(),  fieldType  +  1;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  type.getRawClass(),  fieldType  +  1;	  raw    =    type.getRawClass(),    fieldType;    	non-compiled	[CE]  ';'  expected	32	None	replace
177	[BUG]  [BUGGY]  result  =  fieldType.getRawClass(),  type;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fieldType.getRawClass(),  type;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fieldType.getRawClass(),  type;	  raw    =    type.getRawClass(),    fieldType;    	non-compiled	[CE]  ';'  expected	32	None	replace
178	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.getGenericSuperclass(fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.getGenericSuperclass(fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.getGenericSuperclass(fieldType);	  raw    =    fieldNamingPolicy.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  fieldType	61	None	replace
179	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.findSuperclass(fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.findSuperclass(fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.findSuperclass(fieldType);	  raw    =    fieldNamingPolicy.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  fieldType	61	None	replace
180	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.getGeographicSuperclass();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.getGeographicSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.getGeographicSuperclass();	  raw    =    fieldNamingPolicy.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
181	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.getGenericSuperclass(field);  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.getGenericSuperclass(field);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.getGenericSuperclass(field);	  raw    =    fieldNamingPolicy.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  field	61	None	replace
182	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.getGenericSuperclass(fieldName);  [CE]  cannot  find  symbol  fieldName  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.getGenericSuperclass(fieldName);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.getGenericSuperclass(fieldName);	  raw    =    fieldNamingPolicy.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  fieldName	61	None	replace
183	[BUG]  [BUGGY]  raw  =  field,  field.getGenericSuperclass();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  field,  field.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  field,  field.getGenericSuperclass();	  raw    =    fields.getGenericSuperclass();    	non-compiled	[CE]  ';'  expected	29	None	replace
184	[BUG]  [BUGGY]  result  =  new  TypeToken(type.getRawType(),  fieldNamingPolicy);  [CE]  no  suitable  constructor  found  for  TypeToken(Class<CAP#1>,FieldNamingStrategy)  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  new  TypeToken(type.getRawType(),  fieldNamingPolicy);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  new  TypeToken(type.getRawType(),  fieldNamingPolicy);	  result    =    new    TypeToken(type.getRawType(),    fieldType);    	non-compiled	[CE]  no  suitable  constructor  found  for  TypeToken(Class<CAP#1>,FieldNamingStrategy)	54	None	replace
185	[BUG]  [BUGGY]  result  =  new  TypeToken(type.getRawType(),  name);  [CE]  cannot  find  symbol  name  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  new  TypeToken(type.getRawType(),  name);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  new  TypeToken(type.getRawType(),  name);	  result    =    new    TypeToken(type.getRawType(),    fieldType);    	non-compiled	[CE]  cannot  find  symbol  name	54	None	replace
186	[BUG]  [BUGGY]  if(fieldType!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [CE]  cannot  find  symbol  fieldType  [FE]        IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  if(fieldType!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	if(fieldType!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }	          if(type!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    field.name);    }    	non-compiled	[CE]  cannot  find  symbol  fieldType	43	None	replace
187	[BUG]  [BUGGY]  raw  =  boundFields.getGenericSuperclass();  [CE]  cannot  find  symbol  boundFields  [FE]            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  boundFields.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  boundFields.getGenericSuperclass();	  raw    =    fieldNames.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  boundFields	47	None	replace
188	[BUG]  [BUGGY]  raw  =  jsonAdapterPresent.getGenericSuperclass();  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  jsonAdapterPresent.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  jsonAdapterPresent.getGenericSuperclass();	  raw    =    context.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	27	None	replace
189	[BUG]  [BUGGY]  result  =  type.getNativeType(value);  [CE]  cannot  find  symbol  value  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getNativeType(value);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getNativeType(value);	  result    =    type.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol  value	41	None	replace
190	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  fieldType.getFields();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  fieldType.getFields();	          Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    field.name);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	replace
191	[BUG]  [BUGGY]  Type[]  fields  =  type.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Type[]  fields  =  type.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Type[]  fields  =  type.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields!=    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	4	None	replace
192	[BUG]  [BUGGY]  Field[]  fieldFields  =  type.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fieldFields  =  type.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fieldFields  =  type.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields!=    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
193	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.getRawType(fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.getRawType(fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.getRawType(fieldType);	  raw    =    fieldNamingPolicy.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldType	35	None	replace
194	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.getRawType(replacement);  [CE]  cannot  find  symbol  replacement  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.getRawType(replacement);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.getRawType(replacement);	  raw    =    fieldNamingPolicy.getRawType();    	non-compiled	[CE]  cannot  find  symbol  replacement	35	None	replace
195	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.getRawType(replacements[i]);  [CE]  cannot  find  symbol  replacements  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.getRawType(replacements[i]);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.getRawType(replacements[i]);	  raw    =    fieldNamingPolicy.getRawType();    	non-compiled	[CE]  cannot  find  symbol  replacements	35	None	replace
196	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.constructType(fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                          ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.constructType(fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.constructType(fieldType);	  raw    =    fieldNamingPolicy.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldType	35	None	replace
197	[BUG]  [BUGGY]  raw  =  fieldName.getRawClass();  [CE]  cannot  find  symbol  fieldName  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldName.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldName.getRawClass();	  raw    =    name.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  fieldName	39	None	replace
198	[BUG]  [BUGGY]  result.put(value,  boundField);  [CE]  cannot  find  symbol  value  [FE]                  IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(value,  boundField);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(value,  boundField);	          result.put(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  value	6	None	replace
199	[BUG]  [BUGGY]  raw  =  result.getGenericSuperclass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  result.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  result.getGenericSuperclass();	  raw    =    field.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
200	[BUG]  [BUGGY]  result  =  raw.getRawClass();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  raw.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  raw.getRawClass();	  result    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
201	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldName);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	56	None	replace
202	[BUG]  [BUGGY]  result  =  type.getRawType(),  fieldType  +  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawType(),  fieldType  +  1;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawType(),  fieldType  +  1;	  result    =    type.getRawType(),    fieldType;    	non-compiled	[CE]  ';'  expected	40	None	replace
203	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldName);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	57	None	replace
204	[BUG]  [BUGGY]  result  =  replacement.getRawType();  [CE]  cannot  find  symbol  replacement  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  replacement.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  replacement.getRawType();	  result    =    boundField.getRawType();    	non-compiled	[CE]  cannot  find  symbol  replacement	49	None	replace
205	[BUG]  [BUGGY]  if(fieldType!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType.name);  }  [CE]  cannot  find  symbol  fieldType  [FE]                      IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  if(fieldType!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	if(fieldType!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType.name);  }	          if(type!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldType.name);    }    	non-compiled	[CE]  cannot  find  symbol  fieldType	8	None	replace
206	[BUG]  [BUGGY]  result.put(type,  name);  [CE]  cannot  find  symbol  name  [FE]        IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(type,  name);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(type,  name);	          result.put(name,    type);    	non-compiled	[CE]  cannot  find  symbol  name	1	None	replace
207	[BUG]  [BUGGY]  result  =  raw.getRawType(),  type.getGenericSuperclass());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  raw.getRawType(),  type.getGenericSuperclass());  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  raw.getRawType(),  type.getGenericSuperclass());	  result    =    type.getRawType(),    raw.getGenericSuperclass());    	non-compiled	[CE]  ';'  expected	23	None	replace
208	[BUG]  [BUGGY]  result  =  type.getRawType(),  fieldType.getGenericSuperclass());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawType(),  fieldType.getGenericSuperclass());  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawType(),  fieldType.getGenericSuperclass());	  result    =    type.getRawType(),    raw.getGenericSuperclass());    	non-compiled	[CE]  ';'  expected	23	None	replace
209	[BUG]  [BUGGY]  raw  =  type.getGenericSuperclass(),  declaredType;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  type.getGenericSuperclass(),  declaredType;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  type.getGenericSuperclass(),  declaredType;	  raw    =    type.getGenericSuperclass(),    boundField;    	non-compiled	[CE]  ';'  expected	30	None	replace
210	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(fieldType  + "  declares  multiple  JSON  fields  named   "  +  type.name);  }  [CE]  cannot  find  symbol  fieldType  [FE]                    IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(fieldType  + "  declares  multiple  JSON  fields  named   "  +  type.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException(fieldType  + "  declares  multiple  JSON  fields  named   "  +  type.name);  }	          if(type!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    type.name);    }    	non-compiled	[CE]  cannot  find  symbol  fieldType	7	None	replace
211	[BUG]  [BUGGY]  raw  =  fields[fields.getRawClass()  ];  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fields[fields.getRawClass()  ];  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fields[fields.getRawClass()  ];	  raw    =    fields.getRawClass();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
212	[BUG]  [BUGGY]  raw  =  _constructor.getRawClass();  [CE]  cannot  find  symbol  _constructor  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  _constructor.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  _constructor.getRawClass();	  raw    =    context.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  _constructor	15	None	replace
213	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  declaredType.name);  }  [CE]  cannot  find  symbol  name  [FE]                      IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  declaredType.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  declaredType.name);  }	          if(type!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldType.name);    }    	non-compiled	[CE]  cannot  find  symbol  name	8	None	replace
214	[BUG]  [BUGGY]  result  =  replaced.getRawClass();  [CE]  cannot  find  symbol  replaced  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  replaced.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  replaced.getRawClass();	  result    =    type.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  replaced	31	None	replace
215	[BUG]  [BUGGY]  result  =  type.getRawType(),  fieldType,  deserialized);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  type.getRawType(),  fieldType,  deserialized);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  type.getRawType(),  fieldType,  deserialized);	  result    =    type.getRawType(),    fieldType);    	non-compiled	[CE]  ';'  expected	22	None	replace
216	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields!=  null  &&  fields.size()  >  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields!=  null  &&  fields.size()  >  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields!=  null  &&  fields.size()  >  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldName);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	57	None	replace
217	[BUG]  [BUGGY]  raw  =  fields[fields.getRawType()  ];  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fields[fields.getRawType()  ];  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fields[fields.getRawType()  ];	  raw    =    fields.getRawType();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
218	[BUG]  [BUGGY]  raw  =  replaced.getGenericSuperclass();  [CE]  cannot  find  symbol  replaced  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  replaced.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  replaced.getGenericSuperclass();	  raw    =    fields.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  replaced	29	None	replace
219	[BUG]  [BUGGY]  raw  =  parentContext.getRawType();  [CE]  cannot  find  symbol  parentContext  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  parentContext.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  parentContext.getRawType();	  raw    =    _context.getRawType();    	non-compiled	[CE]  cannot  find  symbol  parentContext	34	None	replace
220	[BUG]  [BUGGY]  result.put(serializers,  type);  [CE]  cannot  find  symbol  serializers  [FE]        IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(serializers,  type);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(serializers,  type);	          result.put(name,    type);    	non-compiled	[CE]  cannot  find  symbol  serializers	1	None	replace
221	[BUG]  [BUGGY]  result  =  predecessor.getRawClass();  [CE]  cannot  find  symbol  predecessor  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  predecessor.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  predecessor.getRawClass();	  result    =    fieldType.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  predecessor	17	None	replace
222	[BUG]  [BUGGY]  raw  =  predecessor.getGenericSuperclass();  [CE]  cannot  find  symbol  predecessor  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  predecessor.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  predecessor.getGenericSuperclass();	  raw    =    field.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  predecessor	26	None	replace
223	[BUG]  [BUGGY]  raw  =  replacement.getGenericSuperclass();  [CE]  cannot  find  symbol  replacement  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  replacement.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  replacement.getGenericSuperclass();	  raw    =    field.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  replacement	26	None	replace
224	[BUG]  [BUGGY]  result  =  predecessor.getGenericSuperclass();  [CE]  cannot  find  symbol  predecessor  [FE]              ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  predecessor.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  predecessor.getGenericSuperclass();	  result    =    fieldType.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  predecessor	48	None	replace
225	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fieldNames  =  type.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fieldNames  =  type.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields    ==    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
226	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields!=  null  &&  fields.length  >  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields!=  null  &&  fields.length  >  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields!=  null  &&  fields.length  >  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldType);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldType);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	59	None	replace
227	[BUG]  [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  old.name);  }  [CE]  cannot  find  symbol  old  [FE]            IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  if(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  old.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	if(type!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  old.name);  }	          if(type!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldType);    }    	non-compiled	[CE]  cannot  find  symbol  old	45	None	replace
228	[BUG]  [BUGGY]  raw  =  replacement.getRawType();  [CE]  cannot  find  symbol  replacement  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  replacement.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  replacement.getRawType();	  raw    =    boundField.getRawType();    	non-compiled	[CE]  cannot  find  symbol  replacement	24	None	replace
229	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.fieldNamingStrategy.getRawType();  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                    ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.fieldNamingStrategy.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.fieldNamingStrategy.getRawType();	  raw    =    fieldNamingPolicy.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	35	None	replace
230	[BUG]  [BUGGY]  result  =  fieldNames.getRawType().restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  fieldNames  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  fieldNames.getRawType().restrictByNotNullOrUndefined();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  fieldNames.getRawType().restrictByNotNullOrUndefined();	  result    =    type.getRawType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	21	None	replace
231	[BUG]  [BUGGY]  result.put(serializers,  fieldType);  [CE]  cannot  find  symbol  serializers  [FE]          IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(serializers,  fieldType);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(serializers,  fieldType);	          result.put(name,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  serializers	2	None	replace
232	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fieldNames  =  type.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fieldNames  =  type.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields!=    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
233	[BUG]  [BUGGY]  Field[]  fields  =  name.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  name.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  name.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields!=    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	4	None	replace
234	[BUG]  [BUGGY]  raw  =  type.getRawClass(),  fieldType,  null);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  type.getRawClass(),  fieldType,  null);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  type.getRawClass(),  fieldType,  null);	  raw    =    type.getRawClass(),    fieldType;    	non-compiled	[CE]  ';'  expected	32	None	replace
235	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  field.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    field.name);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	58	None	replace
236	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields!=  null  &&  fields.length  >  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields!=  null  &&  fields.length  >  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields!=  null  &&  fields.length  >  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    field.name);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	58	None	replace
237	[BUG]  [BUGGY]  raw  =  previous.getGenericSuperclass(),  boundField;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  previous.getGenericSuperclass(),  boundField;  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  previous.getGenericSuperclass(),  boundField;	  raw    =    type.getGenericSuperclass(),    boundField;    	non-compiled	[CE]  ';'  expected	30	None	replace
238	[BUG]  [BUGGY]  result  =  new  TypeToken(type.getRawType(),  factory);  [CE]  cannot  find  symbol  factory  [FE]                ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  new  TypeToken(type.getRawType(),  factory);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  new  TypeToken(type.getRawType(),  factory);	  result    =    new    TypeToken(type.getRawType(),    fieldType);    	non-compiled	[CE]  cannot  find  symbol  factory	54	None	replace
239	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields!=  null  &&  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields!=  null  &&  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields!=  null  &&  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }	          Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    field.name);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	replace
240	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  field.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }	          Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    field.name);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	replace
241	[BUG]  [BUGGY]  raw  =  replacement.getRawClass();  [CE]  cannot  find  symbol  replacement  [FE]            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  replacement.getRawClass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  replacement.getRawClass();	  raw    =    boundField.getRawClass();    	non-compiled	[CE]  cannot  find  symbol  replacement	38	None	replace
242	[BUG]  [BUGGY]  raw  =  fieldNamingPolicy.fieldNamingStrategy.getGenericSuperclass();  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]            ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldNamingPolicy.fieldNamingStrategy.getGenericSuperclass();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldNamingPolicy.fieldNamingStrategy.getGenericSuperclass();	  raw    =    fieldNamingPolicy.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	61	None	replace
243	[BUG]  [BUGGY]  result.put(serializers,  boundField);  [CE]  cannot  find  symbol  serializers  [FE]                  IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result.put(serializers,  boundField);  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result.put(serializers,  boundField);	          result.put(name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  serializers	6	None	replace
244	[BUG]  [BUGGY]  result  =  new  TypeToken(type.getRawParameterType(0));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  result  =  new  TypeToken(type.getRawParameterType(0));  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	result  =  new  TypeToken(type.getRawParameterType(0));	  result    =    new    TypeToken(type.getRawType());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
245	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields!=  null  &&  fields.length  >  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        IllegalArgumentException      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields!=  null  &&  fields.length  >  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields!=  null  &&  fields.length  >  0)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  fieldName);  }	  Field[]    fields    =    fieldType.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    fieldName);    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	56	None	replace
246	[BUG]  [BUGGY]  raw  =  fieldTypes.getRawType();  [CE]  cannot  find  symbol  fieldTypes  [FE]                      ComparisonFailure      [CONTEXT]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));      [BUGGY]  raw  =  fieldTypes.getRawType();  [BUGGY]      }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	174	174	1	replace	raw  =  fieldTypes.getRawType();	  raw    =    fieldNames.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	36	None	replace
