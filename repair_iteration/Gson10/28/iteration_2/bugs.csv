bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  while(raw!=  null  &&  declaredType.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null  &&  declaredType.isPrimitive())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=  null  &&  declaredType.isPrimitive())  {	  while(raw!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
2	[BUG]  [BUGGY]  while(raw!=  null  &&  declaredType.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null  &&  declaredType.isAssignableFrom(raw))  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=  null  &&  declaredType.isAssignableFrom(raw))  {	  while(raw!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
3	[BUG]  [BUGGY]  while(raw!=  null  &&  declaredType.getSuperclass()!=  context.getSuperclass())  {  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null  &&  declaredType.getSuperclass()!=  context.getSuperclass())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=  null  &&  declaredType.getSuperclass()!=  context.getSuperclass())  {	  while(raw!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
4	[BUG]  [BUGGY]  while(raw!=  null  &&  declaredType.isArray())  {  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null  &&  declaredType.isArray())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=  null  &&  declaredType.isArray())  {	  while(raw!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
5	[BUG]  [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  while  (raw!=  null  &&  raw!=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  while  (raw!=  null  &&  raw!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    raw!=    Object.class)    {    while  (raw!=  null  &&  raw!=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
6	[BUG]  [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  while  (raw!=  null  &&  raw  >=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  while  (raw!=  null  &&  raw  >=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    raw!=    Object.class)    {    while  (raw!=  null  &&  raw  >=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
7	[BUG]  [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    raw!=    Object.class)    {    Field[]  fields  =  raw.getDeclaredFields();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
8	[BUG]  [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  while  (raw!=  null  &&  raw  ==  Object.class)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  while  (raw!=  null  &&  raw  ==  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    raw!=    Object.class)    {    while  (raw!=  null  &&  raw  ==  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
9	[BUG]  [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  while  (raw  ==  null  &&  raw!=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  while  (raw  ==  null  &&  raw!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    raw!=    Object.class)    {    while  (raw  ==  null  &&  raw!=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
10	[BUG]  [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  While  (raw!=  null  &&  raw!=  Object.class)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  While  (raw!=  null  &&  raw!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    raw!=    Object.class)    {    While  (raw!=  null  &&  raw!=  Object.class)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
11	[BUG]  [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  while  (raw!=  null  &&  raw  >>  Object.class)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  while  (raw!=  null  &&  raw  >>  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    raw!=    Object.class)    {    while  (raw!=  null  &&  raw  >>  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
12	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType  ==  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while  (raw!=  null  &&  declaredType  ==  Object.class)  {	  while    (raw!=    null    &&    declaredType!=    Object.class)    {    	compilable	  [FE]  ComparisonFailure  	2	8	replace
13	[BUG]  [BUGGY]  while  (raw!=  null  &&  declaredType  ==  Object.class)  {  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType  ==  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (raw!=  null  &&  declaredType  ==  Object.class)  {	  while    (raw!=    null    &&    declaredType!=    Object.class)    {    	compilable	  [FE]  ComparisonFailure  	2	8	replace
14	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType!=  Field.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while  (raw!=  null  &&  declaredType!=  Field.class)  {	  while    (raw!=    null    &&    declaredType!=    Object.class)    {    	compilable	  [FE]  NullPointerException  	2	9	replace
15	[BUG]  [BUGGY]  while  (raw!=  null  &&  declaredType!=  Field.class)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType!=  Field.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (raw!=  null  &&  declaredType!=  Field.class)  {	  while    (raw!=    null    &&    declaredType!=    Object.class)    {    	compilable	  [FE]  NullPointerException  	2	9	replace
16	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType!=  Type.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while  (raw!=  null  &&  declaredType!=  Type.class)  {	  while    (raw!=    null    &&    declaredType!=    Object.class)    {    	compilable	  [FE]  NullPointerException  	2	9	replace
17	[BUG]  [BUGGY]  while  (raw!=  null  &&  declaredType!=  Type.class)  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType!=  Type.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (raw!=  null  &&  declaredType!=  Type.class)  {	  while    (raw!=    null    &&    declaredType!=    Object.class)    {    	compilable	  [FE]  NullPointerException  	2	9	replace
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw  ==  null  &&  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while  (raw  ==  null  &&  declaredType!=  Object.class)  {	  while    (raw!=    null    ||    declaredType!=    Object.class)    {    	compilable	  [FE]  ComparisonFailure  	4	8	replace
19	[BUG]  [BUGGY]  while  (raw  ==  null  &&  declaredType!=  Object.class)  {  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw  ==  null  &&  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (raw  ==  null  &&  declaredType!=  Object.class)  {	  while    (raw!=    null    ||    declaredType!=    Object.class)    {    	compilable	  [FE]  ComparisonFailure  	4	8	replace
20	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  ||  declaredType  ==  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while  (raw!=  null  ||  declaredType  ==  Object.class)  {	  while    (raw!=    null    ||    declaredType!=    Object.class)    {    	compilable	  [FE]  NullPointerException  	4	9	replace
21	[BUG]  [BUGGY]  while  (raw!=  null  ||  declaredType  ==  Object.class)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  ||  declaredType  ==  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (raw!=  null  ||  declaredType  ==  Object.class)  {	  while    (raw!=    null    ||    declaredType!=    Object.class)    {    	compilable	  [FE]  NullPointerException  	4	9	replace
22	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw  ==  null  ||  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while  (raw  ==  null  ||  declaredType!=  Object.class)  {	  while    (raw!=    null    ||    declaredType!=    Object.class)    {    	compilable	  [FE]  NullPointerException  	4	9	replace
23	[BUG]  [BUGGY]  while  (raw  ==  null  ||  declaredType!=  Object.class)  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw  ==  null  ||  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (raw  ==  null  ||  declaredType!=  Object.class)  {	  while    (raw!=    null    ||    declaredType!=    Object.class)    {    	compilable	  [FE]  NullPointerException  	4	9	replace
24	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  ||  raw!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while  (raw!=  null  ||  raw!=  Object.class)  {	  while    (raw!=    null    &&    raw!=    Object.class)    {    	compilable	  [FE]  NullPointerException  	6	9	replace
25	[BUG]  [BUGGY]  while  (raw!=  null  ||  raw!=  Object.class)  {  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  ||  raw!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (raw!=  null  ||  raw!=  Object.class)  {	  while    (raw!=    null    &&    raw!=    Object.class)    {    	compilable	  [FE]  NullPointerException  	6	9	replace
26	[BUG]  [BUGGY]  while(raw!=  null)  {  while(raw!=  null)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  while(raw!=  null)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    while(raw!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
27	[BUG]  [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.getGenericType()!=  type.getGenericType())  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.getGenericType()!=  type.getGenericType())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    while(raw!=  null  &&  declaredType.getGenericType()!=  type.getGenericType())  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
28	[BUG]  [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.isInterface())  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.isInterface())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    while(raw!=  null  &&  declaredType.isInterface())  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
29	[BUG]  [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.getGenericType()  ==  type.getGenericType())  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.getGenericType()  ==  type.getGenericType())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    while(raw!=  null  &&  declaredType.getGenericType()  ==  type.getGenericType())  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
30	[BUG]  [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.equals(type.getGenericType()))  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.equals(type.getGenericType()))  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    while(raw!=  null  &&  declaredType.equals(type.getGenericType()))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
31	[BUG]  [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.getGenericType()!=  null)  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.getGenericType()!=  null)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    while(raw!=  null  &&  declaredType.getGenericType()!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
32	[BUG]  [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.isPrimitive())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    while(raw!=  null  &&  declaredType.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
33	[BUG]  [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.getDeclaredFields().length  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.getDeclaredFields().length  >  0)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    while(raw!=  null  &&  declaredType.getDeclaredFields().length  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
34	[BUG]  [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  while  (raw!=  null  &&  declaredType!=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  while  (raw!=  null  &&  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    declaredType!=    Object.class)    {    while  (raw!=  null  &&  declaredType!=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
35	[BUG]  [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    declaredType!=    Object.class)    {    Field[]  fields  =  raw.getDeclaredFields();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
36	[BUG]  [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  while  (raw  ==  null  &&  declaredType!=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  while  (raw  ==  null  &&  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    declaredType!=    Object.class)    {    while  (raw  ==  null  &&  declaredType!=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
37	[BUG]  [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  while  (raw!=  null  &&  declaredType  ==  Object.class)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  while  (raw!=  null  &&  declaredType  ==  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    declaredType!=    Object.class)    {    while  (raw!=  null  &&  declaredType  ==  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
38	[BUG]  [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  while  (raw!=  null  &&  declaredType  >=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  while  (raw!=  null  &&  declaredType  >=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    declaredType!=    Object.class)    {    while  (raw!=  null  &&  declaredType  >=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
39	[BUG]  [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  While  (raw!=  null  &&  declaredType!=  Object.class)  {  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  While  (raw!=  null  &&  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    declaredType!=    Object.class)    {    While  (raw!=  null  &&  declaredType!=  Object.class)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
40	[BUG]  [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  for  (raw!=  null  &&  declaredType!=  Object.class)  {  [CE]  not  a  statement  [FE]                NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  for  (raw!=  null  &&  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    declaredType!=    Object.class)    {    for  (raw!=  null  &&  declaredType!=  Object.class)  {	  	non-compiled	[CE]  not  a  statement	1	None	add
41	[BUG]  [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  while  (raw!=  null  ||  declaredType!=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  while  (raw!=  null  ||  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    ||    declaredType!=    Object.class)    {    while  (raw!=  null  ||  declaredType!=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
42	[BUG]  [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  while  (raw  ==  null  ||  declaredType!=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  while  (raw  ==  null  ||  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    ||    declaredType!=    Object.class)    {    while  (raw  ==  null  ||  declaredType!=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
43	[BUG]  [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    ||    declaredType!=    Object.class)    {    Field[]  fields  =  raw.getDeclaredFields();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
44	[BUG]  [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  while  (raw!=  null  ||  declaredType  ==  Object.class)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  while  (raw!=  null  ||  declaredType  ==  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    ||    declaredType!=    Object.class)    {    while  (raw!=  null  ||  declaredType  ==  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
45	[BUG]  [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  While  (raw!=  null  ||  declaredType!=  Object.class)  {  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  While  (raw!=  null  ||  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    ||    declaredType!=    Object.class)    {    While  (raw!=  null  ||  declaredType!=  Object.class)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
46	[BUG]  [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  Field[]  fieldNames  =  raw.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  Field[]  fieldNames  =  raw.getDeclaredFields();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    ||    declaredType!=    Object.class)    {    Field[]  fieldNames  =  raw.getDeclaredFields();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
47	[BUG]  [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  while  (raw!=  null  ||  declaredType  >=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  while  (raw!=  null  ||  declaredType  >=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    ||    declaredType!=    Object.class)    {    while  (raw!=  null  ||  declaredType  >=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
48	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (declaredType!=  null  ||  raw.isInterface())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while  (declaredType!=  null  ||  raw.isInterface())  {	  while    (raw!=    null    ||    declaredType.isInterface())    {    	compilable	  [FE]  NullPointerException  	7	9	replace
49	[BUG]  [BUGGY]  while  (declaredType!=  null  ||  raw.isInterface())  {  [FE]  NullPointerException  [FE]              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (declaredType!=  null  ||  raw.isInterface())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (declaredType!=  null  ||  raw.isInterface())  {	  while    (raw!=    null    ||    declaredType.isInterface())    {    	compilable	  [FE]  NullPointerException  	7	9	replace
50	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (declaredType!=  null  &&  raw.isInterface())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while  (declaredType!=  null  &&  raw.isInterface())  {	  while    (raw!=    null    ||    declaredType.isInterface())    {    	compilable	  [FE]  ComparisonFailure  	7	8	replace
51	[BUG]  [BUGGY]  while  (declaredType!=  null  &&  raw.isInterface())  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (declaredType!=  null  &&  raw.isInterface())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (declaredType!=  null  &&  raw.isInterface())  {	  while    (raw!=    null    ||    declaredType.isInterface())    {    	compilable	  [FE]  ComparisonFailure  	7	8	replace
52	[BUG]  [BUGGY]  while  (declaredType!=  null  &&  declaredType.isInterface())  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (declaredType!=  null  &&  declaredType.isInterface())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (declaredType!=  null  &&  declaredType.isInterface())  {	  while    (raw!=    null    ||    declaredType.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
53	[BUG]  [BUGGY]  while  (type!=  null  ||  declaredType.isInterface())  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (type!=  null  ||  declaredType.isInterface())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (type!=  null  ||  declaredType.isInterface())  {	  while    (raw!=    null    ||    declaredType.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
54	[BUG]  [BUGGY]  Field[]  fields  =  type.getDeclaredFields();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  Field[]  fields  =  type.getDeclaredFields();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	Field[]  fields  =  type.getDeclaredFields();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
55	[BUG]  [BUGGY]  Constructor  <?>  factory  =  context.getConstructor();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  Constructor  <?>  factory  =  context.getConstructor();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	Constructor  <?>  factory  =  context.getConstructor();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
56	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  Field[]  fields  =  raw.getFields();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	Field[]  fields  =  raw.getFields();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
57	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	Constructor  <?>  constructor  =  context.getConstructor();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
58	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  Field[]  fields  =  context.getFields();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	Field[]  fields  =  context.getFields();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
59	[BUG]  [BUGGY]  Collections.sort(result);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  Collections.sort(result);  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	Collections.sort(result);	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
60	[BUG]  [BUGGY]  result.put(type,  declaredType);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  result.put(type,  declaredType);  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	result.put(type,  declaredType);	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
61	[BUG]  [BUGGY]  while  (type!=  null  &&  declaredType.isInterface())  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (type!=  null  &&  declaredType.isInterface())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (type!=  null  &&  declaredType.isInterface())  {	  while    (raw!=    null    &&    declaredType.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
62	[BUG]  [BUGGY]  while  (context!=  null  &&  declaredType.isInterface())  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (context!=  null  &&  declaredType.isInterface())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (context!=  null  &&  declaredType.isInterface())  {	  while    (raw!=    null    &&    declaredType.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
63	[BUG]  [BUGGY]  while  (result!=  null  &&  declaredType.isInterface())  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (result!=  null  &&  declaredType.isInterface())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (result!=  null  &&  declaredType.isInterface())  {	  while    (raw!=    null    &&    declaredType.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
64	[BUG]  [BUGGY]  while  (constructor!=  null  &&  declaredType.isInterface())  {  [CE]  cannot  find  symbol  constructor  [FE]                      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (constructor!=  null  &&  declaredType.isInterface())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (constructor!=  null  &&  declaredType.isInterface())  {	  while    (raw!=    null    &&    declaredType.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol  constructor	8	None	replace
65	[BUG]  [BUGGY]  while  (raw!=  null?  null  :  raw,  declaredType.class)  {  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null?  null  :  raw,  declaredType.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (raw!=  null?  null  :  raw,  declaredType.class)  {	  while    (raw!=    null?    null    :    raw.class)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
66	[BUG]  [BUGGY]  while  (raw!=  null?  null  :  declaredType.class)  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null?  null  :  declaredType.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (raw!=  null?  null  :  declaredType.class)  {	  while    (raw!=    null?    null    :    raw.class)    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
67	[BUG]  [BUGGY]  while  (raw!=  null?  null  :  raw.type.getRawClass())  {  [CE]  cannot  find  symbol  type  [FE]                      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null?  null  :  raw.type.getRawClass())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (raw!=  null?  null  :  raw.type.getRawClass())  {	  while    (raw!=    null?    null    :    raw.class)    {    	non-compiled	[CE]  cannot  find  symbol  type	9	None	replace
68	[BUG]  [BUGGY]  while  (raw!=  null?  null  :  raw.getClass())  {  [CE]  incompatible  types  [FE]                        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null?  null  :  raw.getClass())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (raw!=  null?  null  :  raw.getClass())  {	  while    (raw!=    null?    null    :    raw.class)    {    	non-compiled	[CE]  incompatible  types	9	None	replace
69	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (declaredType!=  Object.class  &&  raw.isPrimitive())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while  (declaredType!=  Object.class  &&  raw.isPrimitive())  {	  while    (raw!=    Object.class    &&    declaredType.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	13	8	replace
70	[BUG]  [BUGGY]  while  (declaredType!=  Object.class  &&  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (declaredType!=  Object.class  &&  raw.isPrimitive())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (declaredType!=  Object.class  &&  raw.isPrimitive())  {	  while    (raw!=    Object.class    &&    declaredType.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	13	8	replace
71	[BUG]  [BUGGY]  while  (type!=  Object.class  &&  declaredType.isPrimitive())  {  [CE]  incomparable  types:  TypeToken<CAP#1>  and  Class<Object>  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (type!=  Object.class  &&  declaredType.isPrimitive())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (type!=  Object.class  &&  declaredType.isPrimitive())  {	  while    (raw!=    Object.class    &&    declaredType.isPrimitive())    {    	non-compiled	[CE]  incomparable  types:  TypeToken<CAP#1>  and  Class<Object>	13	None	replace
72	[BUG]  [BUGGY]  while  (constructor!=  Object.class  &&  declaredType.isPrimitive())  {  [CE]  cannot  find  symbol  constructor  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (constructor!=  Object.class  &&  declaredType.isPrimitive())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (constructor!=  Object.class  &&  declaredType.isPrimitive())  {	  while    (raw!=    Object.class    &&    declaredType.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  constructor	13	None	replace
73	[BUG]  [BUGGY]  while  (class!=  Object.class  &&  declaredType.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (class!=  Object.class  &&  declaredType.isPrimitive())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (class!=  Object.class  &&  declaredType.isPrimitive())  {	  while    (raw!=    Object.class    &&    declaredType.isPrimitive())    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
74	[BUG]  [BUGGY]  while  (collection!=  Object.class  &&  declaredType.isPrimitive())  {  [CE]  cannot  find  symbol  collection  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (collection!=  Object.class  &&  declaredType.isPrimitive())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (collection!=  Object.class  &&  declaredType.isPrimitive())  {	  while    (raw!=    Object.class    &&    declaredType.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  collection	13	None	replace
75	[BUG]  [BUGGY]  while(raw!=  null)  {  Field[]  fields  =  raw.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  Field[]  fields  =  raw.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    Field[]  fields  =  raw.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
76	[BUG]  [BUGGY]  while(raw!=  null)  {  Field[]  fields  =  raw.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  Field[]  fields  =  raw.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    Field[]  fields  =  raw.getDeclaredFields();  for(int  i  =  0;  i  <  fields.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
77	[BUG]  [BUGGY]  while(raw!=  null)  {  Field[]  fields  =  raw.getDeclaredFields();  while(raw!=  null)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  Field[]  fields  =  raw.getDeclaredFields();  while(raw!=  null)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    Field[]  fields  =  raw.getDeclaredFields();  while(raw!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
78	[BUG]  [BUGGY]  while(raw!=  null)  {  Field[]  fields  =  raw.getDeclaredFields();  for(int  i  =  0;  i  <  fields.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  Field[]  fields  =  raw.getDeclaredFields();  for(int  i  =  0;  i  <  fields.size();  i++)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    Field[]  fields  =  raw.getDeclaredFields();  for(int  i  =  0;  i  <  fields.size();  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
79	[BUG]  [BUGGY]  while(raw!=  null)  {  Field[]  fields  =  raw.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  Field[]  fields  =  raw.getDeclaredFields();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    Field[]  fields  =  raw.getDeclaredFields();	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
80	[BUG]  [BUGGY]  while(raw!=  null)  {  Field[]  fields  =  raw.getDeclaredFields();  for(int  i  =  0;  i  <  fields.size();  ++i)  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  Field[]  fields  =  raw.getDeclaredFields();  for(int  i  =  0;  i  <  fields.size();  ++i)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    Field[]  fields  =  raw.getDeclaredFields();  for(int  i  =  0;  i  <  fields.size();  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
81	[BUG]  [BUGGY]  while(raw!=  null)  {  Field[]  fields  =  raw.getDeclaredFields();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  Field[]  fields  =  raw.getDeclaredFields();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    Field[]  fields  =  raw.getDeclaredFields();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
82	[BUG]  [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  while  (raw!=  null  &&  declaredType!=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  while  (raw!=  null  &&  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    declaredType!=    Object.class)    {    Field[]  fields  =  raw.getDeclaredFields();  while  (raw!=  null  &&  declaredType!=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
83	[BUG]  [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  Field[]  fieldNames  =  raw.getDeclaredFields();  while  (raw!=  null  &&  declaredType!=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  Field[]  fieldNames  =  raw.getDeclaredFields();  while  (raw!=  null  &&  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    declaredType!=    Object.class)    {    Field[]  fieldNames  =  raw.getDeclaredFields();  while  (raw!=  null  &&  declaredType!=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
84	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null  &&  declaredType!=  null)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while(raw!=  null  &&  declaredType!=  null)  {	  while(raw!=    null)    {    	compilable	  [FE]  NullPointerException  	12	9	replace
85	[BUG]  [BUGGY]  while(raw!=  null  &&  declaredType!=  null)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null  &&  declaredType!=  null)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=  null  &&  declaredType!=  null)  {	  while(raw!=    null)    {    	compilable	  [FE]  NullPointerException  	12	9	replace
86	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw  ==  null)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while(raw  ==  null)  {	  while(raw!=    null)    {    	compilable	  [FE]  ComparisonFailure  	12	8	replace
87	[BUG]  [BUGGY]  while(raw  ==  null)  {  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw  ==  null)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw  ==  null)  {	  while(raw!=    null)    {    	compilable	  [FE]  ComparisonFailure  	12	8	replace
88	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw  ==  null  &&  declaredType!=  null)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while(raw  ==  null  &&  declaredType!=  null)  {	  while(raw!=    null)    {    	compilable	  [FE]  ComparisonFailure  	12	8	replace
89	[BUG]  [BUGGY]  while(raw  ==  null  &&  declaredType!=  null)  {  [FE]  ComparisonFailure  [FE]        NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw  ==  null  &&  declaredType!=  null)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw  ==  null  &&  declaredType!=  null)  {	  while(raw!=    null)    {    	compilable	  [FE]  ComparisonFailure  	12	8	replace
90	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null  &&  declaredType  ==  null)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while(raw!=  null  &&  declaredType  ==  null)  {	  while(raw!=    null)    {    	compilable	  [FE]  ComparisonFailure  	12	8	replace
91	[BUG]  [BUGGY]  while(raw!=  null  &&  declaredType  ==  null)  {  [FE]  ComparisonFailure  [FE]          NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null  &&  declaredType  ==  null)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=  null  &&  declaredType  ==  null)  {	  while(raw!=    null)    {    	compilable	  [FE]  ComparisonFailure  	12	8	replace
92	[BUG]  [BUGGY]  while  (excludedType!=  null  &&  declaredType.isInterface())  {  [CE]  cannot  find  symbol  excludedType  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (excludedType!=  null  &&  declaredType.isInterface())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (excludedType!=  null  &&  declaredType.isInterface())  {	  while    (raw!=    null    &&    declaredType.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol  excludedType	8	None	replace
93	[BUG]  [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  Field[]  fieldNames  =  raw.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  Field[]  fieldNames  =  raw.getDeclaredFields();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    raw!=    Object.class)    {    Field[]  fieldNames  =  raw.getDeclaredFields();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
94	[BUG]  [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  Field[]  fields  =  raw.getFields();  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  Field[]  fields  =  raw.getFields();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    raw!=    Object.class)    {    Field[]  fields  =  raw.getFields();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
95	[BUG]  [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  Field[]  raw  =  context.getFields();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  Field[]  raw  =  context.getFields();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    raw!=    Object.class)    {    Field[]  raw  =  context.getFields();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
96	[BUG]  [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  Field[]  fieldNames  =  raw.getFieldNames();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  Field[]  fieldNames  =  raw.getFieldNames();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    raw!=    Object.class)    {    Field[]  fieldNames  =  raw.getFieldNames();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
97	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(declaredType!=  null  &&  raw!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while(declaredType!=  null  &&  raw!=  Object.class)  {	  while    (raw!=    null    &&    declaredType!=    Object.class)    {    	compilable	  [FE]  ComparisonFailure  	2	1	replace
98	[BUG]  [BUGGY]  while(declaredType!=  null  &&  raw!=  Object.class)  {  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(declaredType!=  null  &&  raw!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(declaredType!=  null  &&  raw!=  Object.class)  {	  while    (raw!=    null    &&    declaredType!=    Object.class)    {    	compilable	  [FE]  ComparisonFailure  	2	1	replace
99	[BUG]  [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  while  (raw!=  null  ||  declaredType!=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  while  (raw!=  null  ||  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    ||    declaredType!=    Object.class)    {    Field[]  fields  =  raw.getDeclaredFields();  while  (raw!=  null  ||  declaredType!=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
100	[BUG]  [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  Field[]  fieldNames  =  raw.getDeclaredFields();  while  (raw!=  null  ||  declaredType!=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  Field[]  fieldNames  =  raw.getDeclaredFields();  while  (raw!=  null  ||  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    ||    declaredType!=    Object.class)    {    Field[]  fieldNames  =  raw.getDeclaredFields();  while  (raw!=  null  ||  declaredType!=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
101	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  context.getObjectConstructor();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  ObjectConstructor  constructor  =  context.getObjectConstructor();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	ObjectConstructor  constructor  =  context.getObjectConstructor();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
102	[BUG]  [BUGGY]  Constructor  <?>  factory  =  context.getConstructor(declaredType);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  Constructor  <?>  factory  =  context.getConstructor(declaredType);  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	Constructor  <?>  factory  =  context.getConstructor(declaredType);	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
103	[BUG]  [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  while  (raw  >=  null  &&  raw!=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  raw!=  Object.class)  {  while  (raw  >=  null  &&  raw!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    raw!=    Object.class)    {    while  (raw  >=  null  &&  raw!=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
104	[BUG]  [BUGGY]  while  (declaredType!=  Object.class  &&  declaredType.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (declaredType!=  Object.class  &&  declaredType.isPrimitive())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while  (declaredType!=  Object.class  &&  declaredType.isPrimitive())  {	  while    (raw!=    Object.class    &&    declaredType.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
105	[BUG]  [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  while  (raw  >=  null  ||  declaredType!=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  while  (raw  >=  null  ||  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    ||    declaredType!=    Object.class)    {    while  (raw  >=  null  ||  declaredType!=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
106	[BUG]  [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  while  (raw!=  null  ||  declaredType  >>  Object.class)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  ||  declaredType!=  Object.class)  {  while  (raw!=  null  ||  declaredType  >>  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    ||    declaredType!=    Object.class)    {    while  (raw!=  null  ||  declaredType  >>  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
107	[BUG]  [BUGGY]  while(raw!=  null  &&  declaredType.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null  &&  declaredType.isUnknownType())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=  null  &&  declaredType.isUnknownType())  {	  while(raw!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
108	[BUG]  [BUGGY]  while(raw!=  null  &&  declaredType.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null  &&  declaredType.isAssignableFrom(type))  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=  null  &&  declaredType.isAssignableFrom(type))  {	  while(raw!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
109	[BUG]  [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  while  (raw!=  null  &&  declaredType  >>  Object.class)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  while  (raw!=  null  &&  declaredType  >>  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    declaredType!=    Object.class)    {    while  (raw!=  null  &&  declaredType  >>  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
110	[BUG]  [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  while  (raw  >=  null  &&  declaredType!=  Object.class)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while  (raw!=  null  &&  declaredType!=  Object.class)  {  while  (raw  >=  null  &&  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while    (raw!=    null    &&    declaredType!=    Object.class)    {    while  (raw  >=  null  &&  declaredType!=  Object.class)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
111	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(declaredType!=  null  &&  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	add	while(declaredType!=  null  &&  declaredType!=  Object.class)  {	  while    (raw!=    null    &&    declaredType!=    Object.class)    {    	compilable	  [FE]  NullPointerException  	2	9	replace
112	[BUG]  [BUGGY]  while(declaredType!=  null  &&  declaredType!=  Object.class)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(declaredType!=  null  &&  declaredType!=  Object.class)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(declaredType!=  null  &&  declaredType!=  Object.class)  {	  while    (raw!=    null    &&    declaredType!=    Object.class)    {    	compilable	  [FE]  NullPointerException  	2	9	replace
113	[BUG]  [BUGGY]  Field[]  fields  =  declaredType.getDeclaredFields();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  Field[]  fields  =  declaredType.getDeclaredFields();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	Field[]  fields  =  declaredType.getDeclaredFields();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
114	[BUG]  [BUGGY]  result.put(type.getName(),  declaredType);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  result.put(type.getName(),  declaredType);  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	result.put(type.getName(),  declaredType);	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
115	[BUG]  [BUGGY]  Field[]  fields  =  declaredType.getFields();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  Field[]  fields  =  declaredType.getFields();  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	Field[]  fields  =  declaredType.getFields();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
116	[BUG]  [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.getGenericType()!=  context.getGenericType())  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.getGenericType()!=  context.getGenericType())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    while(raw!=  null  &&  declaredType.getGenericType()!=  context.getGenericType())  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
117	[BUG]  [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.isAssignableFrom(type))  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    while(raw!=  null  &&  declaredType.isAssignableFrom(type))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
118	[BUG]  [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.getGenericType()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(raw!=  null)  {  while(raw!=  null  &&  declaredType.getGenericType()  ==  null)  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(raw!=    null)    {    while(raw!=  null  &&  declaredType.getGenericType()  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
119	[BUG]  [BUGGY]  while(resolvedType!=  null  &&  declaredType.isInterface())  {  [CE]  cannot  find  symbol  resolvedType  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {  Map<String,  BoundField>  result  =  new  LinkedHashMap<String,  BoundField>();  if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();    [BUGGY]  while(resolvedType!=  null  &&  declaredType.isInterface())  {  [BUGGY]    Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	148	148	1	replace	while(resolvedType!=  null  &&  declaredType.isInterface())  {	  while    (raw!=    null    &&    declaredType.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol  resolvedType	8	None	replace
