bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.length  +  2;  ++i)  {  [CE]  cannot  find  symbol  length  [FE]                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.length  +  2;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.length  +  2;  ++i)  {	  for(int    i    =    0;    i    <    fieldNames.length    +    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  length	25	None	replace
2	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length  +  1;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	add	for(int  i  =  0;  i  <  fields.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    fieldNames.length    +    1;    ++i)    {    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	25	9	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length  +  1;  ++i)  {  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length  +  1;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fields.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    fieldNames.length    +    1;    ++i)    {    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	25	9	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.length  +  3;  ++i)  {  [CE]  cannot  find  symbol  length  [FE]                    ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.length  +  3;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.length  +  3;  ++i)  {	  for(int    i    =    0;    i    <    fieldNames.length    +    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  length	25	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.length  +  4;  ++i)  {  [CE]  cannot  find  symbol  length  [FE]                      ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.length  +  4;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.length  +  4;  ++i)  {	  for(int    i    =    0;    i    <    fieldNames.length    +    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  length	25	None	replace
6	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.get(i);  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  fieldNames.get(i);  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  fieldNames.get(i);  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    Field[]    fieldNames    =    fieldNames.get(i);    for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
7	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.get(0);  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  fieldNames.get(0);  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  fieldNames.get(0);  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    Field[]    fieldNames    =    fieldNames.get(i);    for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
8	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length-1;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	add	for(int  i  =  0;  i  <  fields.length-1;  ++i)  {	  for(int    i    =    0;    i    <    fieldNames.length-1;    ++i)    {    	compilable	  [FE]  ComparisonFailure  	26	8	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length-1;  ++i)  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length-1;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fields.length-1;  ++i)  {	  for(int    i    =    0;    i    <    fieldNames.length-1;    ++i)    {    	compilable	  [FE]  ComparisonFailure  	26	8	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.length-2;  ++i)  {  [CE]  cannot  find  symbol  length  [FE]                    ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.length-2;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.length-2;  ++i)  {	  for(int    i    =    0;    i    <    fieldNames.length-1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  length	26	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.length-3;  ++i)  {  [CE]  cannot  find  symbol  length  [FE]                      ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.length-3;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.length-3;  ++i)  {	  for(int    i    =    0;    i    <    fieldNames.length-1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  length	26	None	replace
12	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.length-1;  ++i)  {  [CE]  '.class'  expected  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.length-1;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  <  fieldNames.length-1;  ++i)  {	  for(int    i    =    0;    i    <    fieldNames.length-1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	26	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size-1;  ++i)  {  [CE]  cannot  find  symbol  size  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size-1;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size-1;  ++i)  {	  for(int    i    =    0;    i    <    fieldNames.length-1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  size	26	None	replace
14	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  1]);  [CE]  ']'  expected  [FE]                              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  1]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  1]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    +    1]);    	non-compiled	[CE]  ']'  expected	20	None	replace
15	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  *  1]);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  *  1]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  *  1]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    +    1]);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
16	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  FieldNames.size();  ++i)  {  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  <  FieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  <  FieldNames.size();  ++i)  {	  For(int    i    =    0;    i    <    fieldNames.size()    +    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
17	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  -  1]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
18	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  new  Field[fields.size()  ];	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
19	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fieldNames.size()  ];  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  new  Field[fieldNames.size()  ];  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  new  Field[fieldNames.size()  ];	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
20	[BUG]  [BUGGY]  Field[]  fields  =  previous.fields.toArray(new  Field[fields.size()  ]);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  previous.fields.toArray(new  Field[fields.size()  ]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  previous.fields.toArray(new  Field[fields.size()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
21	[BUG]  [BUGGY]  Field[]  fields  =  previous.toArray(new  Field[fields.size()  ]);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  previous.toArray(new  Field[fields.size()  ]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  previous.toArray(new  Field[fields.size()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
22	[BUG]  [BUGGY]  For(int  i  =  0,  len  =  fieldNames.size();  ++i)  {  [CE]  '.class'  expected  [FE]                    ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0,  len  =  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0,  len  =  fieldNames.size();  ++i)  {	  For(int    i    =    0;    i    <    fieldNames.size()    >    0;    ++i)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
23	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  fields.size();  ++i)  {  [CE]  '.class'  expected  [FE]                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  1;  i  <  fields.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  1;  i  <  fields.size();  ++i)  {	  For(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  '.class'  expected	10	None	replace
24	[BUG]  [BUGGY]  For(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  2;  i  <  fieldNames.size();  ++i)  {	  For(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  '.class'  expected	10	None	replace
25	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  1;  i!=  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	add	for(int  i  =  1;  i!=  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    for(int    i    =    1;    i    >=    fieldNames.size();    ++i)    {    	compilable	  [FE]  ComparisonFailure  	7	8	replace
26	[BUG]  [BUGGY]  for(int  i  =  1;  i!=  fieldNames.size();  ++i)  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  1;  i!=  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  1;  i!=  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    for(int    i    =    1;    i    >=    fieldNames.size();    ++i)    {    	compilable	  [FE]  ComparisonFailure  	7	8	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CE]  >  expected  [FE]          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  int  i  =  0;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    (int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  >  expected	33	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  int  i  =  1;  i  <  fieldNames.size();  ++i)  {  [CE]  >  expected  [FE]            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  int  i  =  1;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  int  i  =  1;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    (int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  >  expected	33	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    (int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  ')'  expected	33	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  [CE]  variable  name  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    (int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  variable  name  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	33	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.get(i);  ++i)  {  [CE]  >  expected  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.get(i);  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.get(i);  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    (int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  >  expected	33	None	replace
32	[BUG]  [BUGGY]  int  i  =  fieldNames.size()  -  1;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  int  i  =  fieldNames.size()  -  1;  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	int  i  =  fieldNames.size()  -  1;	  int    i    =    fieldNames.size();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
33	[BUG]  [BUGGY]  int  i  =  fieldNames.size()  +  1;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  int  i  =  fieldNames.size()  +  1;  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	int  i  =  fieldNames.size()  +  1;	  int    i    =    fieldNames.size();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
34	[BUG]  [BUGGY]  int  i  =  fields.size();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  int  i  =  fields.size();  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	int  i  =  fields.size();	  int    i    =    fieldNames.size();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
35	[BUG]  [BUGGY]  int  i  =  fieldNames.size()  -  2;  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  int  i  =  fieldNames.size()  -  2;  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	int  i  =  fieldNames.size()  -  2;	  int    i    =    fieldNames.size();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
36	[BUG]  [BUGGY]  int  i  =  previous.fieldNames.size();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  int  i  =  previous.fieldNames.size();  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	int  i  =  previous.fieldNames.size();	  int    i    =    fieldNames.size();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.get(0);  ++i)  {  [CE]  >  expected  [FE]        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.get(0);  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.get(0);  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    Integer    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  >  expected	32	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  1;  i  <  fieldNames.get(i);  ++i)  {  [CE]  >  expected  [FE]          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  1;  i  <  fieldNames.get(i);  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  1;  i  <  fieldNames.get(i);  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    Integer    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  >  expected	32	None	replace
39	[BUG]  [BUGGY]  Integer  i  =  1;  i  <  fieldNames.size();  ++i)  {  [CE]  >  expected  [FE]            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Integer  i  =  1;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Integer  i  =  1;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    Integer    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  >  expected	32	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.get(i);  [CE]  >  expected  [FE]              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.get(i);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.get(i);	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    Integer    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  >  expected	32	None	replace
41	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fields.length;  ++i)  {  [CE]  '.class'  expected  [FE]                      ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  <  fields.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  <  fields.length;  ++i)  {	  For(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	13	None	replace
42	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.length  +  1;  ++i)  {  [CE]  '.class'  expected  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.length  +  1;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  <  fieldNames.length  +  1;  ++i)  {	  For(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	13	None	replace
43	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  fieldNames.length;  ++i)  {  [CE]  '.class'  expected  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  1;  i  <  fieldNames.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  1;  i  <  fieldNames.length;  ++i)  {	  For(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	13	None	replace
44	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.length  -  2;  ++i)  {  [CE]  '.class'  expected  [FE]                            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.length  -  2;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  <  fieldNames.length  -  2;  ++i)  {	  For(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	13	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    2;    i    <    fieldNames.size();    ++i)    {    for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
46	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  For(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [CE]  '.class'  expected  [FE]      ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  For(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    2;    i    <    fieldNames.size();    ++i)    {    For(int  i  =  2;  i  <  fieldNames.size();  ++i)  {	  	non-compiled	[CE]  '.class'  expected	38	None	add
47	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [CE]  >  expected  [FE]        ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    2;    i    <    fieldNames.size();    ++i)    {    int  i  =  2;  i  <  fieldNames.size();  ++i)  {	  	non-compiled	[CE]  >  expected	38	None	add
48	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  for(int  i  =  2;  i  <  fieldNames.size());  ++i)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  for(int  i  =  2;  i  <  fieldNames.size());  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    2;    i    <    fieldNames.size();    ++i)    {    for(int  i  =  2;  i  <  fieldNames.size());  ++i)  {	  	non-compiled	[CE]  ';'  expected	38	None	add
49	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  for(int  i  =  2;  i  <  fields.size();  ++i)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  for(int  i  =  2;  i  <  fields.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    2;    i    <    fieldNames.size();    ++i)    {    for(int  i  =  2;  i  <  fields.size();  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
50	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  FOR(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [CE]  '.class'  expected  [FE]              ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  FOR(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    2;    i    <    fieldNames.size();    ++i)    {    FOR(int  i  =  2;  i  <  fieldNames.size();  ++i)  {	  	non-compiled	[CE]  '.class'  expected	38	None	add
51	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  2;  i  <  fieldNames.size();  ++i)  {  [CE]  >  expected  [FE]                ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  2;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    2;    i    <    fieldNames.size();    ++i)    {    Integer  i  =  2;  i  <  fieldNames.size();  ++i)  {	  	non-compiled	[CE]  >  expected	38	None	add
52	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  for(int  i  =  2;  i  >=  fieldNames.size();  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  for(int  i  =  2;  i  >=  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    2;    i    <    fieldNames.size();    ++i)    {    for(int  i  =  2;  i  >=  fieldNames.size();  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
53	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  previous);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  previous);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  getFieldNames(field,  previous);	  Field[]    fieldNames    =    getFieldNames(field);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
54	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getGenericType());  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getGenericType());  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  getFieldNames(field.getGenericType());	  Field[]    fieldNames    =    getFieldNames(field);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
55	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  prev);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  prev);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  getFieldNames(field,  prev);	  Field[]    fieldNames    =    getFieldNames(field);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
56	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  i);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  i);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  getFieldNames(field,  i);	  Field[]    fieldNames    =    getFieldNames(field);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
57	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(fieldType);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  getFieldNames(fieldType);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  getFieldNames(fieldType);	  Field[]    fieldNames    =    getFieldNames(field);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
58	[BUG]  [BUGGY]  FOR(int  i  =  1;  i  <  fieldNames.size();  ++i)  {  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  FOR(int  i  =  1;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	FOR(int  i  =  1;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    FOR(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  '.class'  expected	6	None	replace
59	[BUG]  [BUGGY]  FOR(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CE]  '.class'  expected  [FE]                    ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  FOR(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	FOR(int  i  =  0;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    FOR(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  '.class'  expected	6	None	replace
60	[BUG]  [BUGGY]  Field[]  fieldNames  =  previous.getFieldNames();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  previous.getFieldNames();  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  previous.getFieldNames();	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
61	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldType.getFieldNames();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  fieldType.getFieldNames();  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  fieldType.getFieldNames();	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
62	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(fieldType);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(fieldType);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  field.getFieldNames(fieldType);	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
63	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(i);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(i);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  field.getFieldNames(i);	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
64	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(previous);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(previous);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  field.getFieldNames(previous);	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
65	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(null);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(null);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  field.getFieldNames(null);	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    List    <    ComparisonFailure>    result    =    new    ArrayList    <    ComparisonFailure>(fieldNames.size());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  }  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  }	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    List    <    ComparisonFailure>    result    =    new    ArrayList    <    ComparisonFailure>(fieldNames.size());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.get(i);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.get(i);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.get(i);	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    List    <    ComparisonFailure>    result    =    new    ArrayList    <    ComparisonFailure>(fieldNames.size());    	non-compiled	[CE]  ')'  expected	34	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.get(0));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.get(0));  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.get(0));	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    List    <    ComparisonFailure>    result    =    new    ArrayList    <    ComparisonFailure>(fieldNames.size());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fields.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    List    <    ComparisonFailure>    result    =    new    ArrayList    <    ComparisonFailure>(fieldNames.size());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.get(i));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  1;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.get(i));  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  1;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.get(i));	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    List    <    ComparisonFailure>    result    =    new    ArrayList    <    ComparisonFailure>(fieldNames.size());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
72	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  [CE]  '.class'  expected  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    List    <    ComparisonFailure>    result    =    new    ArrayList    <    ComparisonFailure>(fieldNames.size());    	non-compiled	[CE]  '.class'  expected	34	None	replace
73	[BUG]  [BUGGY]  Field[]  fieldNames  =  fields.toArray(new  Field[fields.size()  ]);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  fields.toArray(new  Field[fields.size()  ]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  fields.toArray(new  Field[fields.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
74	[BUG]  [BUGGY]  Field[]  fieldNames  =  new  Field[fields.size()  ];  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  new  Field[fields.size()  ];  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  new  Field[fields.size()  ];	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
75	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  -  1]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
76	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  +  1]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
77	[BUG]  [BUGGY]  Field[]  fieldNames  =  previous.fields.toArray(new  Field[fields.size()  ]);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  previous.fields.toArray(new  Field[fields.size()  ]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  previous.fields.toArray(new  Field[fields.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
78	[BUG]  [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  context.getFieldNames();	  Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
79	[BUG]  [BUGGY]  Field[]  fieldNames  =  currentType.getFieldNames();  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  currentType.getFieldNames();  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  currentType.getFieldNames();	  Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
80	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFieldNames(field);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  type.getFieldNames(field);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  type.getFieldNames(field);	  Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
81	[BUG]  [BUGGY]  For(int  i  =  0;  i  >=  fieldNames.size();  ++i)  {  [CE]  '.class'  expected  [FE]            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  >=  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  >=  fieldNames.size();  ++i)  {	  For(int    i    =    0;    i!=    fieldNames.size();    ++i)    {    	non-compiled	[CE]  '.class'  expected	35	None	replace
82	[BUG]  [BUGGY]  For(int  i  =  0;  i  ==  fieldNames.size();  ++i)  {  [CE]  '.class'  expected  [FE]              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  ==  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  ==  fieldNames.size();  ++i)  {	  For(int    i    =    0;    i!=    fieldNames.size();    ++i)    {    	non-compiled	[CE]  '.class'  expected	35	None	replace
83	[BUG]  [BUGGY]  For(int  i  =  1;  i!=  fieldNames.size();  ++i)  {  [CE]  '.class'  expected  [FE]                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  1;  i!=  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  1;  i!=  fieldNames.size();  ++i)  {	  For(int    i    =    0;    i!=    fieldNames.size();    ++i)    {    	non-compiled	[CE]  '.class'  expected	35	None	replace
84	[BUG]  [BUGGY]  For(int  i  =  0;  i!=  fields.size();  ++i)  {  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i!=  fields.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i!=  fields.size();  ++i)  {	  For(int    i    =    0;    i!=    fieldNames.size();    ++i)    {    	non-compiled	[CE]  '.class'  expected	35	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  name.size();  ++i)  {  [CE]  cannot  find  symbol  name  [FE]              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  name.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  name.size();  ++i)  {	  for(int    i    =    0;    i    <    fieldsNames.size();    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  name	24	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  previous.fields.size();  ++i)  {  [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  previous.fields.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  previous.fields.size();  ++i)  {	  for(int    i    =    0;    i    <    fieldsNames.size();    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  fields	24	None	replace
87	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
88	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
89	[BUG]  [BUGGY]  Field[]  fields  =  previous.toArray(new  Field[fieldNames.size()  ]);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  previous.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  previous.toArray(new  Field[fieldNames.size()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
90	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  raw);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  raw);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  raw);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
91	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  --i)  {  [CE]  '.class'  expected  [FE]              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  --i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  --i)  {	  For(int    i    =    0;    i    <    fieldNames.size()    -    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	9	None	replace
92	[BUG]  [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fieldNames.size()  ]);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  result  =  fields.toArray(new  Field[fieldNames.size()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
93	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
94	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
95	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  raw);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  raw);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  raw);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
96	[BUG]  [BUGGY]  Field[]  fieldNames  =  fields.toArray(new  Field[fieldNames.size()  ]);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  fields.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  fields.toArray(new  Field[fieldNames.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
97	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
98	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
99	[BUG]  [BUGGY]  Field[]  fieldNames  =  new  Field[fieldNames.size()  ];  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  new  Field[fieldNames.size()  ];  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  new  Field[fieldNames.size()  ];	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
100	[BUG]  [BUGGY]  Field[]  fieldNames  =  previous.fieldNames.toArray(new  Field[fieldNames.size()  ]);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  previous.fieldNames.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  previous.fieldNames.toArray(new  Field[fieldNames.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
101	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fields.size()  -  1;  ++i)  {  [CE]  '.class'  expected  [FE]            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  <  fields.size()  -  1;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  <  fields.size()  -  1;  ++i)  {	  For(int    i    =    0;    i    <    fields.size();    ++i)    {    	non-compiled	[CE]  '.class'  expected	8	None	replace
102	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fields.size()  +  1;  ++i)  {  [CE]  '.class'  expected  [FE]              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  <  fields.size()  +  1;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  <  fields.size()  +  1;  ++i)  {	  For(int    i    =    0;    i    <    fields.size();    ++i)    {    	non-compiled	[CE]  '.class'  expected	8	None	replace
103	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fields.size()  -  2;  ++i)  {  [CE]  '.class'  expected  [FE]                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  <  fields.size()  -  2;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  <  fields.size()  -  2;  ++i)  {	  For(int    i    =    0;    i    <    fields.size();    ++i)    {    	non-compiled	[CE]  '.class'  expected	8	None	replace
104	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  1;  i  <  fields.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	add	for(int  i  =  1;  i  <  fields.length;  ++i)  {	  for(int    i    =    0;    i    <    fields.length;    ++i)    {    	compilable	  [FE]  ComparisonFailure  	23	8	replace
105	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  fields.length;  ++i)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  1;  i  <  fields.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  1;  i  <  fields.length;  ++i)  {	  for(int    i    =    0;    i    <    fields.length;    ++i)    {    	compilable	  [FE]  ComparisonFailure  	23	8	replace
106	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length  -  2;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	add	for(int  i  =  0;  i  <  fields.length  -  2;  ++i)  {	  for(int    i    =    0;    i    <    fields.length;    ++i)    {    	compilable	  [FE]  ComparisonFailure  	23	8	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length  -  2;  ++i)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length  -  2;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fields.length  -  2;  ++i)  {	  for(int    i    =    0;    i    <    fields.length;    ++i)    {    	compilable	  [FE]  ComparisonFailure  	23	8	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  field.length;  ++i)  {  [CE]  cannot  find  symbol  length  [FE]                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  field.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  field.length;  ++i)  {	  for(int    i    =    0;    i    <    nameNames.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  length	36	None	replace
109	[BUG]  [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fields.size()  ]);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fields.size()  ]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  result  =  fields.toArray(new  Field[fields.size()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
110	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  -  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
111	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  +  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
112	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ],  raw);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ],  raw);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ],  raw);	  Field[]    result    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    0;    i    <    fields.length;    ++i)    {    for(int  i  =  0;  i  <  fields.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  For(int  i  =  0;  i  <  fields.length;  ++i)  {  [CE]  '.class'  expected  [FE]      ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  For(int  i  =  0;  i  <  fields.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    0;    i    <    fields.length;    ++i)    {    For(int  i  =  0;  i  <  fields.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	22	None	add
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  int  i  =  0;  i  <  fields.length;  ++i)  {  [CE]  >  expected  [FE]        ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  int  i  =  0;  i  <  fields.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    0;    i    <    fields.length;    ++i)    {    int  i  =  0;  i  <  fields.length;  ++i)  {	  	non-compiled	[CE]  >  expected	22	None	add
116	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    0;    i    <    fields.length;    ++i)    {    for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
117	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  FOR(int  i  =  0;  i  <  fields.length;  ++i)  {  [CE]  '.class'  expected  [FE]            ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  FOR(int  i  =  0;  i  <  fields.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    0;    i    <    fields.length;    ++i)    {    FOR(int  i  =  0;  i  <  fields.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	22	None	add
118	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  Integer  i  =  0;  i  <  fields.length;  ++i)  {  [CE]  >  expected  [FE]              ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  Integer  i  =  0;  i  <  fields.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    0;    i    <    fields.length;    ++i)    {    Integer  i  =  0;  i  <  fields.length;  ++i)  {	  	non-compiled	[CE]  >  expected	22	None	add
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  for(int  i  =  0;  i  <  fields.length);  ++i)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  for(int  i  =  0;  i  <  fields.length);  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    0;    i    <    fields.length;    ++i)    {    for(int  i  =  0;  i  <  fields.length);  ++i)  {	  	non-compiled	[CE]  ';'  expected	22	None	add
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  Field[]  fields  =  fieldNames.toArray(new  Field[fields.length]);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  Field[]  fields  =  fieldNames.toArray(new  Field[fields.length]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    0;    i    <    fields.length;    ++i)    {    Field[]  fields  =  fieldNames.toArray(new  Field[fields.length]);	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
121	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.get(i);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames.get(i);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames.get(i);	  Field[]    fields    =    fieldNames.getArrays();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
122	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.getFields();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames.getFields();  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames.getFields();	  Field[]    fields    =    fieldNames.getArrays();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
123	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.getAllFields();  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames.getAllFields();  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames.getAllFields();	  Field[]    fields    =    fieldNames.getArrays();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
124	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames  ==  null?  null  :  fieldNames.getArrays();  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames  ==  null?  null  :  fieldNames.getArrays();  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames  ==  null?  null  :  fieldNames.getArrays();	  Field[]    fields    =    fieldNames.getArrays();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
125	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames!=  null?  null  :  fieldNames.getArrays();  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames!=  null?  null  :  fieldNames.getArrays();  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames!=  null?  null  :  fieldNames.getArrays();	  Field[]    fields    =    fieldNames.getArrays();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(fieldNames.size()  ==  1);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Preconditions.checkState(fieldNames.size()  ==  1);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Preconditions.checkState(fieldNames.size()  ==  1);	  Preconditions.checkState(fieldNames.size()    ==    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(fieldNames.size()!=  0);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Preconditions.checkState(fieldNames.size()!=  0);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Preconditions.checkState(fieldNames.size()!=  0);	  Preconditions.checkState(fieldNames.size()    ==    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(fieldNames.size()  >  0);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Preconditions.checkState(fieldNames.size()  >  0);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Preconditions.checkState(fieldNames.size()  >  0);	  Preconditions.checkState(fieldNames.size()    ==    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(fieldNames.size()  ==  2);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Preconditions.checkState(fieldNames.size()  ==  2);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Preconditions.checkState(fieldNames.size()  ==  2);	  Preconditions.checkState(fieldNames.size()    ==    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(fieldNames.size()!=  1);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Preconditions.checkState(fieldNames.size()!=  1);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Preconditions.checkState(fieldNames.size()!=  1);	  Preconditions.checkState(fieldNames.size()    ==    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(fieldNames.size()  >=  0);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Preconditions.checkState(fieldNames.size()  >=  0);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Preconditions.checkState(fieldNames.size()  >=  0);	  Preconditions.checkState(fieldNames.size()    ==    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  int  i  =  0;  i  <  fieldNames.get(i);  ++i)  {  [CE]  >  expected  [FE]            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  int  i  =  0;  i  <  fieldNames.get(i);  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  int  i  =  0;  i  <  fieldNames.get(i);  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  >  expected	3	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  fieldNames.length;  ++i)  {  [CE]  cannot  find  symbol  length  [FE]        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  1;  i  <  fieldNames.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  1;  i  <  fieldNames.length;  ++i)  {	  for(int    i    =    1;    i    <    fields.size();    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  length	21	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  list.size();  ++i)  {  [CE]  cannot  find  symbol  list  [FE]          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  1;  i  <  list.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  1;  i  <  list.size();  ++i)  {	  for(int    i    =    1;    i    <    fields.size();    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  list	21	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.get(i);  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  1;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.get(i);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  1;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.get(i);	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    List    <    ComparisonFailure>    result    =    new    ArrayList    <    ComparisonFailure>(fieldNames.size());    	non-compiled	[CE]  ')'  expected	34	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.get(i);  }  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.get(i);  }  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.get(i);  }	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    List    <    ComparisonFailure>    result    =    new    ArrayList    <    ComparisonFailure>(fieldNames.size());    	non-compiled	[CE]  ')'  expected	34	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    2;    i    <    fieldNames.size();    ++i)    {    List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
138	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    2;    i    <    fieldNames.size();    ++i)    {    List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
139	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fields.size());  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fields.size());  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    2;    i    <    fieldNames.size();    ++i)    {    List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fields.size());  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
140	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>();  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>();  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    2;    i    <    fieldNames.size();    ++i)    {    List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>();  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
141	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  1;  i  <  fieldNames.size();  ++i)  {  }  [CE]  cannot  find  symbol  i  [FE]        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  1;  i  <  fieldNames.size();  ++i)  {  }  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	if(fieldNames!=  null)  {  for(int  i  =  1;  i  <  fieldNames.size();  ++i)  {  }	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    Field[]    fieldNames    =    fieldNames.get(i);    for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  i	37	None	replace
142	[BUG]  [BUGGY]  for(Field[]  fieldNames  =  fieldNames.get(i);  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(Field[]  fieldNames  =  fieldNames.get(i);  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(Field[]  fieldNames  =  fieldNames.get(i);  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    Field[]    fieldNames    =    fieldNames.get(i);    for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
143	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.get(i);  for(int  i  =  1;  i  <  fieldNames.size();  ++i)  {  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  fieldNames.get(i);  for(int  i  =  1;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  fieldNames.get(i);  for(int  i  =  1;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    Field[]    fieldNames    =    fieldNames.get(i);    for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
144	[BUG]  [BUGGY]  Field[]  fields  =  currentFieldNames.toArray(new  Field[fieldNames.size()  ]);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  currentFieldNames.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  currentFieldNames.toArray(new  Field[fieldNames.size()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CE]  >  expected  [FE]          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    (int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  >  expected	33	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  1;  i  <  fieldNames.size();  ++i)  {  [CE]  >  expected  [FE]        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  1;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  1;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    Integer    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  >  expected	32	None	replace
147	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CE]  '.class'  expected  [FE]          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    Integer    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  '.class'  expected	32	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fields.size();  ++i)  {  [CE]  >  expected  [FE]            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fields.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Integer  i  =  0;  i  <  fields.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    Integer    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  >  expected	32	None	replace
149	[BUG]  [BUGGY]  Field[]  fields  =  currentFieldNames.toArray(new  Field[fields.size()  ]);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  currentFieldNames.toArray(new  Field[fields.size()  ]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  currentFieldNames.toArray(new  Field[fields.size()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nameNames.size();  ++i)  {  [CE]  cannot  find  symbol  nameNames  [FE]              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  nameNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  nameNames.size();  ++i)  {	  for(int    i    =    0;    i    <    fieldsNames.size();    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  nameNames	24	None	replace
151	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size()  --i;  ++i)  {  [CE]  '.class'  expected  [FE]                    ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size()  --i;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  <  fieldNames.size()  --i;  ++i)  {	  For(int    i    =    0;    i    <    fieldNames.size()    >    0;    ++i)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  fieldsNames.size();  ++i)  {  [CE]  cannot  find  symbol  fieldsNames  [FE]        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  1;  i  <  fieldsNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  1;  i  <  fieldsNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fields.size();    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  fieldsNames	21	None	replace
153	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldsNames.size();  ++i)  {  [CE]  '.class'  expected  [FE]            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  <  fieldsNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  <  fieldsNames.size();  ++i)  {	  For(int    i    =    0;    i    <    fields.size();    ++i)    {    	non-compiled	[CE]  '.class'  expected	8	None	replace
154	[BUG]  [BUGGY]  For(Field  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(Field  i  =  0;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(Field  i  =  0;  i  <  fieldNames.size();  ++i)  {	  For(int    i    =    0;    i    <    fields.size();    ++i)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CE]  >  expected  [FE]            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fields.size();  ++i)  {  int  i  =  0;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  >  expected	3	None	replace
156	[BUG]  [BUGGY]  For(int  i  =  0;  i!=  fieldNames.length;  ++i)  {  [CE]  '.class'  expected  [FE]                      ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i!=  fieldNames.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i!=  fieldNames.length;  ++i)  {	  For(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	13	None	replace
157	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  predicate);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  predicate);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  getFieldNames(field,  predicate);	  Field[]    fieldNames    =    getFieldNames(field);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
158	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  original);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  original);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  getFieldNames(field,  original);	  Field[]    fieldNames    =    getFieldNames(field);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
159	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  null);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  null);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  getFieldNames(field,  null);	  Field[]    fieldNames    =    getFieldNames(field);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
160	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  0]);  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  0]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  0]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  ']'  expected	28	None	replace
161	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  2]);  [CE]  ']'  expected  [FE]                              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  2]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  2]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    +    1]);    	non-compiled	[CE]  ']'  expected	20	None	replace
162	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  domainNames.size();  ++i)  {  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  <  domainNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  <  domainNames.size();  ++i)  {	  For(int    i    =    0;    i    <    fieldNames.size()    +    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	11	None	replace
163	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  (int  i  =  0;  i  <  fields.length;  ++i)  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  (int  i  =  0;  i  <  fields.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    0;    i    <    fields.length;    ++i)    {    (int  i  =  0;  i  <  fields.length;  ++i)  {	  	non-compiled	[CE]  ')'  expected	22	None	add
164	[BUG]  [BUGGY]  Field[]  fieldNames  =  predicate.getFieldNames();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  predicate.getFieldNames();  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  predicate.getFieldNames();	  Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
165	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(field);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(field);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  field.getFieldNames(field);	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
166	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.getFieldNames();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  fieldNames.getFieldNames();  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  fieldNames.getFieldNames();	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
167	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.get(fieldNames.size()  -  1);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames.get(fieldNames.size()  -  1);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames.get(fieldNames.size()  -  1);	  Field[]    fields    =    fieldNames.getArrays();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
168	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  String[fieldNames.size()  ]);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  String[fieldNames.size()  ]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames.toArray(new  String[fieldNames.size()  ]);	  Field[]    fields    =    fieldNames.getArrays();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
169	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldsNames.length;  ++i)  {  [CE]  cannot  find  symbol  fieldsNames  [FE]    ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldsNames.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldsNames.length;  ++i)  {	  for(int    i    =    0;    i    <    fields.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  fieldsNames	23	None	replace
170	[BUG]  [BUGGY]  int  i  =  1;  i  <  fieldNames.size();  ++i)  {  [CE]  >  expected  [FE]            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  int  i  =  1;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	int  i  =  1;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  >  expected	3	None	replace
171	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  1;  i  <  fieldNames.size();  ++i)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  1;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	if(fieldNames!=  null)  {  for(int  i  =  1;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
172	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ],  raw);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ],  raw);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ],  raw);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
173	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  false);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  false);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  getFieldNames(field,  false);	  Field[]    fieldNames    =    getFieldNames(field);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  list.size();  ++i)  {  [CE]  cannot  find  symbol  list  [FE]              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  list.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  list.size();  ++i)  {	  for(int    i    =    0;    i    <    fieldsNames.size();    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  list	24	None	replace
175	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.getAll();  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  fieldNames.getAll();  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  fieldNames.getAll();  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    Field[]    fieldNames    =    fieldNames.get(i);    for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
176	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.get(field);  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  fieldNames.get(field);  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  fieldNames.get(field);  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    Field[]    fieldNames    =    fieldNames.get(i);    for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  for(int  i  =  0;  i  <  field.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.length;  ++i)  {  for(int  i  =  0;  i  <  field.length;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    0;    i    <    fields.length;    ++i)    {    for(int  i  =  0;  i  <  field.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  }  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fields.size();  ++i)  {  List  <  ComparisonFailure>  result  =  new  ArrayList  <  ComparisonFailure>(fieldNames.size());  }	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    List    <    ComparisonFailure>    result    =    new    ArrayList    <    ComparisonFailure>(fieldNames.size());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
179	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  boxNames.size();  ++i)  {  [CE]  '.class'  expected  [FE]              ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  For(int  i  =  0;  i  <  boxNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	For(int  i  =  0;  i  <  boxNames.size();  ++i)  {	  For(int    i    =    0;    i    <    fieldNames.size()    -    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	9	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  Field[]  fieldNames  =  fieldNames.get(i);  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  Field[]  fieldNames  =  fieldNames.get(i);  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int    i    =    2;    i    <    fieldNames.size();    ++i)    {    Field[]  fieldNames  =  fieldNames.get(i);  for(int  i  =  2;  i  <  fieldNames.size();  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
181	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldTypes.size()  ]);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldTypes.size()  ]);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldTypes.size()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
182	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(field,  false);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(field,  false);  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fieldNames  =  field.getFieldNames(field,  false);	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.size();  ++i)  {  [CE]  >  expected  [FE]        ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.size();  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fields.size();  ++i)  {  Integer  i  =  0;  i  <  fieldNames.size();  ++i)  {	  for(int    i    =    1;    i    <    fieldNames.size();    ++i)    {    Integer    i    =    1;    i    <    fieldNames.size();    ++i)    {    	non-compiled	[CE]  >  expected	32	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size  +  1;  ++i)  {  [CE]  cannot  find  symbol  size  [FE]                ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size  +  1;  ++i)  {  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	for(int  i  =  0;  i  <  fieldNames.size  +  1;  ++i)  {	  for(int    i    =    0;    i    <    fieldNames.length    +    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  size	25	None	replace
185	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.values();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;      [BUGGY]  Field[]  fields  =  fieldNames.values();  [BUGGY]      String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	160	160	1	replace	Field[]  fields  =  fieldNames.values();	  Field[]    fields    =    fieldNames.getArrays();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
