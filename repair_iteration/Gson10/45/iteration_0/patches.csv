bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]    ComparisonFailure  [CONTEXT]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  raw.getGenericSuperclass()));  [BUGGY]  raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  raw.getGenericSuperclass()));	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  	non-compiled	[CE]  cannot  find  symbol  field	89	None	replace
2	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType.getGenericSuperclass()));  [BUGGY]  raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType.getGenericSuperclass()));	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  	non-compiled	[CE]  cannot  find  symbol	89	None	replace
3	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]        ComparisonFailure  [CONTEXT]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  field.getGenericSuperclass()));  [BUGGY]  raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  field.getGenericSuperclass()));	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  	non-compiled	[CE]  cannot  find  symbol  field	89	None	replace
4	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  boundField.getGenericSuperclass()));  [CE]  cannot  find  symbol  boundField  [FE]          ComparisonFailure  [CONTEXT]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  boundField.getGenericSuperclass()));  [BUGGY]  raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  boundField.getGenericSuperclass()));	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  	non-compiled	[CE]  cannot  find  symbol  boundField	89	None	replace
5	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure  [CONTEXT]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]  raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	89	None	replace
6	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  returned.getGenericSuperclass()));  [CE]  cannot  find  symbol  returned  [FE]              ComparisonFailure  [CONTEXT]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  returned.getGenericSuperclass()));  [BUGGY]  raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  returned.getGenericSuperclass()));	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  	non-compiled	[CE]  cannot  find  symbol  returned	89	None	replace
7	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure  [CONTEXT]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  result.getGenericSuperclass()));  [BUGGY]  raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  result.getGenericSuperclass()));	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  	non-compiled	[CE]  cannot  find  symbol	89	None	replace
8	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  ComparisonFailure  [CONTEXT]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  [BUGGY]    [BUGGY]  raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	  	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  	compilable	  [FE]  IllegalArgumentException  	89	9	replace
9	[BUG]  [BUGGY]    [FE]  IllegalArgumentException  [FE]                  ComparisonFailure  [CONTEXT]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  [BUGGY]    [BUGGY]  raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	  	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  	compilable	  [FE]  IllegalArgumentException  	89	9	replace
10	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  factory  [FE]    ComparisonFailure  [CONTEXT]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  factory.getGenericSuperclass()));  [BUGGY]  raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  factory.getGenericSuperclass()));	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  	non-compiled	[CE]  cannot  find  symbol  factory	89	None	replace
11	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      ComparisonFailure  [CONTEXT]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]  raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  	compilable	  [FE]  NullPointerException  	89	9	replace
12	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [FE]  NullPointerException  [FE]      ComparisonFailure  [CONTEXT]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]  raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  	compilable	  [FE]  NullPointerException  	89	9	replace
13	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]    ComparisonFailure  [CONTEXT]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +   "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  }  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType.getGenericSuperclass()));  [BUGGY]  raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType.getGenericSuperclass()));	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  	non-compiled	[CE]  cannot  find  symbol  fieldType	89	None	replace
