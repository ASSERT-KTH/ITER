bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  name,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  name  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  name,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  name,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  name	85	None	replace
2	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result,  raw.getGenericSuperclass()));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	85	None	replace
3	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  fieldType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  fieldType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  fieldType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
4	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  null,  raw.getGenericSuperclass()));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  null,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  null,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	85	None	replace
5	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  factory  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  factory	85	None	replace
6	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  type,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  type,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  type,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    context,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
7	[BUG]  [BUGGY]  type  =  TypeToken.get(result.resolve(context.getType(),  type,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(result.resolve(context.getType(),  type,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result.resolve(context.getType(),  type,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    context,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
8	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(context.getType(),  type,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(context.getType(),  type,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(context.getType(),  type,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    context,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
9	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy,  raw.getGenericSuperclass()));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldNamingStrategy,    raw.getGenericSuperclass()));    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	86	None	replace
10	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  boundField,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  boundField,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  boundField,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldNamingStrategy,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  boundField	86	None	replace
11	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	50	None	replace
12	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  declaredType.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  declaredType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  declaredType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	50	None	replace
13	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field,  declaredType.getType(),  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field,  declaredType.getType(),  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field,  declaredType.getType(),  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	50	None	replace
14	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
15	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  name.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  name.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  name.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	50	None	replace
16	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  previous,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  previous  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  previous,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  previous,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  previous	53	None	replace
17	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  item,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  item  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  item,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  item,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  item	53	None	replace
18	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  selectedField,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  selectedField  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  selectedField,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  selectedField,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  selectedField	53	None	replace
19	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  name));  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  name));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  name));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    name));    	non-compiled	[CE]  cannot  find  symbol  field	76	None	replace
20	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory.getGenericSuperclass(),  name));  [CE]  cannot  find  symbol  factory  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory.getGenericSuperclass(),  name));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory.getGenericSuperclass(),  name));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    name));    	non-compiled	[CE]  cannot  find  symbol  factory	76	None	replace
21	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result.getGenericSuperclass(),  name));  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result.getGenericSuperclass(),  name));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result.getGenericSuperclass(),  name));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    name));    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
22	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  serializedName));  [CE]  cannot  find  symbol  serializedName  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  serializedName));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  serializedName));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    name));    	non-compiled	[CE]  cannot  find  symbol  serializedName	76	None	replace
23	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  field.getGenericSuperclass(),  name));  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  field.getGenericSuperclass(),  name));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  field.getGenericSuperclass(),  name));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    name));    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
24	[BUG]  [BUGGY]  type  =  TypeToken.get(context.resolve(raw.getType(),  declaredType,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(context.resolve(raw.getType(),  declaredType,  result.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(context.resolve(raw.getType(),  declaredType,  result.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
25	[BUG]  [BUGGY]  type  =  TypeToken.get(result.resolve(context,  field.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(result.resolve(context,  field.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result.resolve(context,  field.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	31	None	replace
26	[BUG]  [BUGGY]  type  =  TypeToken.get(context.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(context.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(context.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
27	[BUG]  [BUGGY]  type  =  TypeToken.get(declaredType.resolve(context.getType(),  result,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(declaredType.resolve(context.getType(),  result,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(declaredType.resolve(context.getType(),  result,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
28	[BUG]  [BUGGY]  type  =  TypeToken.get(context.resolve(declaredType.getType(),  result,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(context.resolve(declaredType.getType(),  result,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(context.resolve(declaredType.getType(),  result,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
29	[BUG]  [BUGGY]  type  =  TypeToken.get(context.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(context.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(context.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
30	[BUG]  [BUGGY]  type  =  TypeToken.get(context.resolve(raw.getType(),  declaredType,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(context.resolve(raw.getType(),  declaredType,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(context.resolve(raw.getType(),  declaredType,  context.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
31	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    field,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	80	None	replace
32	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  field,  declaredType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  field,  declaredType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  field,  declaredType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    field,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
33	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  field,  declaredType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  field,  declaredType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  field,  declaredType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    field,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
34	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  result.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  result.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    field,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
35	[BUG]  [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  context.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames!=    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
36	[BUG]  [BUGGY]  Field[]  fields  =  type.getFieldNames();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  type.getFieldNames();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  type.getFieldNames();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames!=    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	43	None	replace
37	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames!=  null  ||  fieldNames.length  >  0)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames!=  null  ||  fieldNames.length  >  0)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames!=  null  ||  fieldNames.length  >  0)  {  result  =  new  Field[fieldNames.size()  ];  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames!=    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
38	[BUG]  [BUGGY]  Field[]  fieldNames  =  boundField.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  boundField  [FE]                          IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  boundField.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  boundField.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames!=    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  boundField	43	None	replace
39	[BUG]  [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  context.getFieldNames();	          Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
40	[BUG]  [BUGGY]  Field[]  fieldNames  =  jsonAdapterPresent.getFieldNames();  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]            IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  jsonAdapterPresent.getFieldNames();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  jsonAdapterPresent.getFieldNames();	          Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	38	None	replace
41	[BUG]  [BUGGY]  Field[]  fields  =  type.getFieldNames();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  type.getFieldNames();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  type.getFieldNames();	          Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	38	None	replace
42	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.fieldNames();  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  type.fieldNames();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  type.fieldNames();	          Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
43	[BUG]  [BUGGY]  Field[]  fieldNames  =  declaredType.getFieldNames();  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  declaredType.getFieldNames();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  declaredType.getFieldNames();	          Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
44	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    factory,    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	83	None	replace
45	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    factory,    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	83	None	replace
46	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    factory,    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	83	None	replace
47	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  constructor,  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  constructor  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  constructor,  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  constructor,  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    factory,    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  constructor	83	None	replace
48	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    factory,    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	83	None	replace
49	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    factory,    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	83	None	replace
50	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	type        =        TypeToken.get($Gson$Types.resolve(type.getType(),        raw,        null));        type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	compilable	  [FE]  NullPointerException  	8	9	add
51	[BUG]  [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type        =        TypeToken.get($Gson$Types.resolve(type.getType(),        raw,        null));        type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	compilable	  [FE]  NullPointerException  	8	9	add
52	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	type        =        TypeToken.get($Gson$Types.resolve(type.getType(),        raw,        null));        type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	compilable	  [FE]  NullPointerException  	8	9	add
53	[BUG]  [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type        =        TypeToken.get($Gson$Types.resolve(type.getType(),        raw,        null));        type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	compilable	  [FE]  NullPointerException  	8	9	add
54	[BUG]  [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Serializers.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Serializers.resolve(type.getType(),  raw,  null));  [CE]  cannot  find  symbol  $Serializers  [FE]        NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Serializers.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Serializers.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type        =        TypeToken.get($Gson$Types.resolve(type.getType(),        raw,        null));        type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Serializers.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Serializers.resolve(type.getType(),  raw,  null));	  	non-compiled	[CE]  cannot  find  symbol  $Serializers	8	None	add
55	[BUG]  [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType()  [CE]  ')'  expected  [FE]          NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType()  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type        =        TypeToken.get($Gson$Types.resolve(type.getType(),        raw,        null));        type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType()	  	non-compiled	[CE]  ')'  expected	8	None	add
56	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  type,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  type,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  type,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
57	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
58	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingStrategy.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingStrategy.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingStrategy.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	20	None	replace
59	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  subtype.getGenericSuperclass()));  [CE]  cannot  find  symbol  subtype  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  subtype.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  subtype.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  subtype	20	None	replace
60	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	34	None	replace
61	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  result,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  result,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  result,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	34	None	replace
62	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  result,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  name  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  result,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  result,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  name	34	None	replace
63	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  description,  result,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  description  [FE]                                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  description,  result,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  description,  result,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  description	34	None	replace
64	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  previous,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  previous  [FE]                                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  previous,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  previous,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  previous	34	None	replace
65	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  returned,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  returned  [FE]                                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  returned,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  returned,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  returned	34	None	replace
66	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  result,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]                                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  result,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  result,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	34	None	replace
67	[BUG]  [BUGGY]  type  =  TypeToken.get(type.resolve(raw.getType(),  declaredType,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(type.resolve(raw.getType(),  declaredType,  result.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(type.resolve(raw.getType(),  declaredType,  result.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
68	[BUG]  [BUGGY]  type  =  TypeToken.get(context.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(context.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(context.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
69	[BUG]  [BUGGY]  type  =  TypeToken.get(declaredType.resolve(raw.getType(),  result,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(declaredType.resolve(raw.getType(),  result,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(declaredType.resolve(raw.getType(),  result,  type.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
70	[BUG]  [BUGGY]  type  =  TypeToken.get(result,  field.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(result,  field.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result,  field.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
71	[BUG]  [BUGGY]  type  =  TypeToken.get(raw.resolve(type.getType(),  declaredType,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(raw.resolve(type.getType(),  declaredType,  result.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(raw.resolve(type.getType(),  declaredType,  result.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
72	[BUG]  [BUGGY]  type  =  TypeToken.get(type.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(type.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(type.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
73	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }	          Field[]    fieldNames    =    field.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.length];    }    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
74	[BUG]  [BUGGY]  Field[]  fieldNames  =  boundField.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [CE]  cannot  find  symbol  boundField  [FE]                    IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  boundField.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  boundField.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }	          Field[]    fieldNames    =    field.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.length];    }    	non-compiled	[CE]  cannot  find  symbol  boundField	70	None	replace
75	[BUG]  [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  context.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }	          Field[]    fieldNames    =    field.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.length];    }    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
76	[BUG]  [BUGGY]  Field[]  fieldNames  =  name.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [CE]  cannot  find  symbol  name  [FE]                        IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  name.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  name.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }	          Field[]    fieldNames    =    field.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.length];    }    	non-compiled	[CE]  cannot  find  symbol  name	70	None	replace
77	[BUG]  [BUGGY]  Field[]  fieldNames  =  declaredType.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  declaredType.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  declaredType.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }	          Field[]    fieldNames    =    field.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.length];    }    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
78	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.length];  }  [CE]  cannot  find  symbol  [FE]                            IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.length];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.length];  }	          Field[]    fieldNames    =    field.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.length];    }    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
79	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [CE]  method  getFieldNames  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }	          Field[]    fieldNames    =    field.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.length];    }    	non-compiled	[CE]  method  getFieldNames  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	70	None	replace
80	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType,  field.getType(),  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType,  field.getType(),  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType,  field.getType(),  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type,    declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	51	None	replace
81	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  declaredType.getType(),  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  declaredType.getType(),  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context,  declaredType.getType(),  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type,    declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
82	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  result,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  result,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  result,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type,    declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
83	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  name,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  name,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  name,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type,    declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
84	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field,  declaredType.getType(),  raw,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field,  declaredType.getType(),  raw,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field,  declaredType.getType(),  raw,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type,    declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	51	None	replace
85	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type,    declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
86	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  name,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  name,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  name,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(field.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	61	None	replace
87	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  previous,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  previous,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  previous,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(field.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	61	None	replace
88	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  description,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  description,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  description,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(field.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	61	None	replace
89	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  item,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  item,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  item,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(field.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	61	None	replace
90	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  serializedName	46	None	replace
91	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  name,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  name,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  name,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
92	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  serialize  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  serialize	46	None	replace
93	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  serializedName,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  serializedName,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  serializedName,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
94	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  description,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  description  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  description,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  description,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  description	46	None	replace
95	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  context.getObjectConstructor(i);  [CE]  cannot  find  symbol  i  [FE]          IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  context.getObjectConstructor(i);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  context.getObjectConstructor(i);	          ObjectConstructor    constructor    =    context.getObjectConstructor();    	non-compiled	[CE]  cannot  find  symbol  i	90	None	replace
96	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  context.getObjectConstructor(field);  [CE]  cannot  find  symbol  field  [FE]            IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  context.getObjectConstructor(field);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  context.getObjectConstructor(field);	          ObjectConstructor    constructor    =    context.getObjectConstructor();    	non-compiled	[CE]  cannot  find  symbol  field	90	None	replace
97	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getObjectConstructor();  [CE]  cannot  find  symbol  field  [FE]              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  field.getObjectConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  field.getObjectConstructor();	          ObjectConstructor    constructor    =    context.getObjectConstructor();    	non-compiled	[CE]  cannot  find  symbol  field	90	None	replace
98	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  context.getObjectConstructor(fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  context.getObjectConstructor(fieldType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  context.getObjectConstructor(fieldType);	          ObjectConstructor    constructor    =    context.getObjectConstructor();    	non-compiled	[CE]  cannot  find  symbol  fieldType	90	None	replace
99	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  context,  field.getObjectConstructor();  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  context,  field.getObjectConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  context,  field.getObjectConstructor();	          ObjectConstructor    constructor    =    context.getObjectConstructor();    	non-compiled	[CE]  ';'  expected	90	None	replace
100	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    factory,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
101	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
102	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declarationType.getGenericSuperclass()));  [CE]  cannot  find  symbol  declarationType  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declarationType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declarationType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  declarationType	48	None	replace
103	[BUG]  [BUGGY]  TypeToken  type  =  type.resolve(declaredType.getType(),  raw,  type.getGenericSuperclass()));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  type.resolve(declaredType.getType(),  raw,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  type.resolve(declaredType.getType(),  raw,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    type.getGenericSuperclass()));    	non-compiled	[CE]  ';'  expected	48	None	replace
104	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  declaredType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  declaredType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  declaredType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    result,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
105	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  boundField.getGenericSuperclass()));  [CE]  cannot  find  symbol  boundField  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  boundField.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  boundField.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    result,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  boundField	24	None	replace
106	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  constructor);  [CE]  cannot  find  symbol  constructor  [FE]        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  constructor);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  constructor);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  constructor	62	None	replace
107	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	62	9	replace
108	[BUG]  [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	62	9	replace
109	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  nu  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  nu  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  nu	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  ')'  expected	62	None	replace
110	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null  [CE]  ')'  expected  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  ')'  expected	62	None	replace
111	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null)  [CE]  ')'  expected  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null)  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null)	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  ')'  expected	62	None	replace
112	[BUG]  [BUGGY]  Field[]  fieldNames  =  declaredType.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  declaredType.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  declaredType.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }	          Field[]    fieldNames    =    fieldType.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
113	[BUG]  [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  context.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }	          Field[]    fieldNames    =    fieldType.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
114	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  field.getFieldNames();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fieldNames    =    fieldType.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	69	None	replace
115	[BUG]  [BUGGY]  Field[]  fieldNames  =  boundField.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  boundField  [FE]                      IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  boundField.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  boundField.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }	          Field[]    fieldNames    =    fieldType.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  boundField	69	None	replace
116	[BUG]  [BUGGY]  Field[]  fields  =  type.getFieldNames();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  type.getFieldNames();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  type.getFieldNames();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fieldNames    =    fieldType.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	69	None	replace
117	[BUG]  [BUGGY]  result  =  type.getRawType();  [CE]  incompatible  types  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  result  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	result  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  incompatible  types	16	None	replace
118	[BUG]  [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  [CE]  incompatible  types  [FE]                      NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  incompatible  types	16	None	replace
119	[BUG]  [BUGGY]  result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  incompatible  types  [FE]                        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  incompatible  types	16	None	replace
120	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  [CE]  incompatible  types  [FE]                          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  incompatible  types	16	None	replace
121	[BUG]  [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  type.getRawType());  [CE]  no  suitable  method  found  for  get(Type,Class<CAP#1>)  [FE]                            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  type.getRawType());  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  type.getRawType());	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  no  suitable  method  found  for  get(Type,Class<CAP#1>)	16	None	replace
122	[BUG]  [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  false));  result  =  type.getRawType();  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  false));  result  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  false));  result  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	16	None	replace
123	[BUG]  [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  result);  [CE]  no  suitable  method  found  for  get(Type,Map<String,BoundField>)  [FE]                                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  result);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  result);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  no  suitable  method  found  for  get(Type,Map<String,BoundField>)	16	None	replace
124	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  raw,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  raw,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  raw,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
125	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  type.getType(),  raw,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  type.getType(),  raw,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context,  type.getType(),  raw,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
126	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	18	None	replace
127	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
128	[BUG]  [BUGGY]  result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  incompatible  types  [FE]    NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  incompatible  types	9	None	replace
129	[BUG]  [BUGGY]  result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  incompatible  types  [FE]      NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  incompatible  types	9	None	replace
130	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  declaredType,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	56	None	replace
131	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  declaredType.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  declaredType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  declaredType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	56	None	replace
132	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
133	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	56	None	replace
134	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  name  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  result.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  result.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  name	32	None	replace
135	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  reference,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  reference  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  reference,  result.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  reference,  result.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  reference	32	None	replace
136	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  deserialize));  [CE]  cannot  find  symbol  serialize  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  deserialize));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  deserialize));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  serialize	2	None	replace
137	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  isPrimitive));  [CE]  cannot  find  symbol  serialize  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  isPrimitive));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  isPrimitive));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  serialize	2	None	replace
138	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  raw));  [CE]  cannot  find  symbol  serializedName  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  raw));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  raw));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  serializedName	2	None	replace
139	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  value));  [CE]  cannot  find  symbol  serialize  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  value));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  value));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  serialize	2	None	replace
140	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  offset));  [CE]  cannot  find  symbol  serialize  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  offset));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  offset));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  serialize	2	None	replace
141	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  null));  [CE]  cannot  find  symbol  serialize  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  serialize	2	None	replace
142	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  isPrimitive));  [CE]  cannot  find  symbol  isPrimitive  [FE]                      NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  isPrimitive));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  isPrimitive));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	2	None	replace
143	[BUG]  [BUGGY]  type  =  TypeToken.get(result.getType(),  type,  raw.getGenericSuperclass()));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(result.getType(),  type,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result.getType(),  type,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    result,    raw.getGenericSuperclass()));    	non-compiled	[CE]  ';'  expected	45	None	replace
144	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  result,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  result,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  result,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    result,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
145	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  result,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  result,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  result,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    result,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	45	None	replace
146	[BUG]  [BUGGY]  type  =  TypeToken.get(result,  type.getType(),  result,  raw.getGenericSuperclass()));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(result,  type.getType(),  result,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result,  type.getType(),  result,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    result,    raw.getGenericSuperclass()));    	non-compiled	[CE]  ';'  expected	45	None	replace
147	[BUG]  [BUGGY]  type  =  TypeToken.get(rootType.getType(),  result,  raw.getGenericSuperclass()));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(rootType.getType(),  result,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(rootType.getType(),  result,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    result,    raw.getGenericSuperclass()));    	non-compiled	[CE]  ';'  expected	45	None	replace
148	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  raw,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  raw,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  raw,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
149	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
150	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  type.getType(),  declaredType,  raw,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  type.getType(),  declaredType,  raw,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context,  type.getType(),  declaredType,  raw,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
151	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  raw,  name.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  raw,  name.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  raw,  name.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
152	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	30	None	replace
153	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  raw,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  raw,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  raw,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
154	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
155	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(context,  raw.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(context,  raw.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(context,  raw.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get(resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
156	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(declaredType.getType(),  raw,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(declaredType.getType(),  raw,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(declaredType.getType(),  raw,  type.getGenericSuperclass()));	  type    =    TypeToken.get(resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
157	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(raw,  field.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(raw,  field.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(raw,  field.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get(resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	29	None	replace
158	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(context.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(context.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(context.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get(resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
159	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(raw.getType(),  declaredType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(raw.getType(),  declaredType,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(raw.getType(),  declaredType,  field.getGenericSuperclass()));	  type    =    TypeToken.get(resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
160	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(context.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(context.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(context.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
161	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldNamingPolicy.getType(),  raw,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldNamingPolicy.getType(),  raw,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(fieldNamingPolicy.getType(),  raw,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNamingPolicy.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
162	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fieldNamingPolicy,  fieldNamingPolicy.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fieldNamingPolicy,  fieldNamingPolicy.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fieldNamingPolicy,  fieldNamingPolicy.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNamingPolicy.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
163	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  fieldNamingPolicy.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  fieldNamingPolicy.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  fieldNamingPolicy.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNamingPolicy.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
164	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  fieldNamingPolicy.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  fieldNamingPolicy.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  fieldNamingPolicy.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNamingPolicy.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
165	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  fieldNamingPolicy.getType(),  raw,  fieldNamingPolicy.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  fieldNamingPolicy.getType(),  raw,  fieldNamingPolicy.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type,  fieldNamingPolicy.getType(),  raw,  fieldNamingPolicy.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNamingPolicy.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
166	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldNamingPolicy.getType(),  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldNamingPolicy.getType(),  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(fieldNamingPolicy.getType(),  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNamingPolicy.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
167	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.size()  ==  0)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.size()  ==  0)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.size()  ==  0)  {  result  =  new  Field[fieldNames.size()  ];  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
168	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames    ==    null    ||    fieldNames.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
169	[BUG]  [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  context.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames    ==    null    ||    fieldNames.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
170	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames!=  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames!=  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames!=  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames    ==    null    ||    fieldNames.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
171	[BUG]  [BUGGY]  Field[]  fields  =  type.getFieldNames();  if(fields  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  type.getFieldNames();  if(fields  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  type.getFieldNames();  if(fields  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames    ==    null    ||    fieldNames.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
172	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames    ==    null    ||    fieldNames.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
173	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                          IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames    ==    null    ||    fieldNames.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
174	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  fieldName));  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  fieldName));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  fieldName));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldName));    	non-compiled	[CE]  cannot  find  symbol  field	87	None	replace
175	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory.getGenericSuperclass(),  fieldName));  [CE]  cannot  find  symbol  factory  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory.getGenericSuperclass(),  fieldName));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory.getGenericSuperclass(),  fieldName));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldName));    	non-compiled	[CE]  cannot  find  symbol  factory	87	None	replace
176	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result.getGenericSuperclass(),  fieldName));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result.getGenericSuperclass(),  fieldName));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result.getGenericSuperclass(),  fieldName));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldName));    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
177	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  boundField.getGenericSuperclass(),  fieldName));  [CE]  cannot  find  symbol  boundField  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  boundField.getGenericSuperclass(),  fieldName));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  boundField.getGenericSuperclass(),  fieldName));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldName));    	non-compiled	[CE]  cannot  find  symbol  boundField	87	None	replace
178	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  value));  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  value));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  value));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldName));    	non-compiled	[CE]  cannot  find  symbol  field	87	None	replace
179	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
180	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  type,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  type,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  type,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
181	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  type.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  type.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context,  type.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
182	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  type.getType(),  declaredType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  type.getType(),  declaredType,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context,  type.getType(),  declaredType,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	52	None	replace
183	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  field.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  field.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context,  field.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	52	None	replace
184	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  previous,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  previous  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  previous,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  previous,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  previous	64	None	replace
185	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  type,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  type,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  type,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	64	None	replace
186	[BUG]  [BUGGY]  Field[]  fieldNames  =  row.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  row  [FE]            IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  row.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  row.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }	          Field[]    fieldNames    =    field.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  row	67	None	replace
187	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  previous,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  previous  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  previous,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  previous,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    boundField,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  previous	72	None	replace
188	[BUG]  [BUGGY]  Field[]  fieldNames  =  row.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  row  [FE]              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  row.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  row.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }	          Field[]    fieldNames    =    field.getFieldNames();    if(fieldNames!=    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  row	68	None	replace
189	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  field.getFieldNames();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fieldNames    =    field.getFieldNames();    if(fieldNames!=    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	68	None	replace
190	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  source  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    source.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  source	57	None	replace
191	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  source.getGenericSuperclass()));  [CE]  cannot  find  symbol  source  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  source.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  source.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    source.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  source	57	None	replace
192	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  source  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    source.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  source	57	None	replace
193	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  source  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    source.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  source	57	None	replace
194	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  source.getGenericSuperclass()));  [CE]  cannot  find  symbol  source  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  source.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  source.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    source.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  source	57	None	replace
195	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  source  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  result.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  result.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    source.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  source	57	None	replace
196	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  declaredType.getGenericSuperclass()));  [CE]  cannot  find  symbol  source  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  declaredType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  declaredType,  declaredType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    source.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  source	57	None	replace
197	[BUG]  [BUGGY]  type  =  TypeToken.get(type.getType(),  declaredType,  null);  [CE]  no  suitable  method  found  for  get(Type,Type,<null>)  [FE]        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(type.getType(),  declaredType,  null);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(type.getType(),  declaredType,  null);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    declaredType);    	non-compiled	[CE]  no  suitable  method  found  for  get(Type,Type,<null>)	96	None	replace
198	[BUG]  [BUGGY]  type  =  TypeToken.get(type.getType(),  field,  null,  declaredType);  [CE]  cannot  find  symbol  field  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(type.getType(),  field,  null,  declaredType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(type.getType(),  field,  null,  declaredType);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    declaredType);    	non-compiled	[CE]  cannot  find  symbol  field	96	None	replace
199	[BUG]  [BUGGY]  type  =  TypeToken.get(result,  type.getType(),  raw,  null),  declaredType);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(result,  type.getType(),  raw,  null),  declaredType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result,  type.getType(),  raw,  null),  declaredType);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    declaredType);    	non-compiled	[CE]  ';'  expected	96	None	replace
200	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  null),  raw);  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  null),  raw);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  null),  raw);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    declaredType);    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	96	None	replace
201	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null,  declaredType);  [CE]  ')'  expected  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null,  declaredType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null,  declaredType);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    declaredType);    	non-compiled	[CE]  ')'  expected	96	None	replace
202	[BUG]  [BUGGY]  type  =  TypeToken.get(resolved.getType(),  raw,  null),  type);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolved.getType(),  raw,  null),  type);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolved.getType(),  raw,  null),  type);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    declaredType);    	non-compiled	[CE]  ';'  expected	96	None	replace
203	[BUG]  [BUGGY]  type  =  TypeToken.get(declaredType.getType(),  raw,  null,  type);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(declaredType.getType(),  raw,  null,  type);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(declaredType.getType(),  raw,  null,  type);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    declaredType);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
204	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(field.getType(),    raw,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	60	None	replace
205	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  name,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  name,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  name,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(field.getType(),    raw,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	60	None	replace
206	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  serializedName,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  serializedName,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  serializedName,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(field.getType(),    raw,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	60	None	replace
207	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  previous,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  previous,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  previous,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(field.getType(),    raw,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	60	None	replace
208	[BUG]  [BUGGY]  Field[]  fields  =  boundFields.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  boundFields.getFields();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  boundFields.getFields();	          Field[]    fields    =    fieldType.getFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
209	[BUG]  [BUGGY]  Field[]  fields  =  boundField.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  boundField.getFields();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  boundField.getFields();	          Field[]    fields    =    fieldType.getFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
210	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  context.getFields();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  context.getFields();	          Field[]    fields    =    fieldType.getFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
211	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields(jsonAdapterPresent);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  fieldType.getFields(jsonAdapterPresent);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  fieldType.getFields(jsonAdapterPresent);	          Field[]    fields    =    fieldType.getFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
212	[BUG]  [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	replace
213	[BUG]  [BUGGY]  result  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));  [CE]  cannot  find  symbol  fieldType  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  result  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	result  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldType	63	None	replace
214	[BUG]  [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  false));  result  =  type.getRawType();  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  false));  result  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  false));  result  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	replace
215	[BUG]  [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  result);  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  result);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  result);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	63	None	replace
216	[BUG]  [BUGGY]  type  =  TypeToken.get(raw.resolve(type.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(raw.resolve(type.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(raw.resolve(type.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
217	[BUG]  [BUGGY]  type  =  TypeToken.get(result,  field.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(result,  field.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result,  field.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	25	None	replace
218	[BUG]  [BUGGY]  type  =  TypeToken.get(type.resolve(result.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(type.resolve(result.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(type.resolve(result.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
219	[BUG]  [BUGGY]  type  =  TypeToken.get(result.resolve(raw.getType(),  declaredType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(result.resolve(raw.getType(),  declaredType,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result.resolve(raw.getType(),  declaredType,  field.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
220	[BUG]  [BUGGY]  type  =  TypeToken.get(type.resolve(result.getType(),  declaredType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(type.resolve(result.getType(),  declaredType,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(type.resolve(result.getType(),  declaredType,  field.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
221	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  serializedName,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  serializedName,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  serializedName,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldName,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  serializedName	88	None	replace
222	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  fieldName,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  fieldName,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  fieldName,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldName,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
223	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  itemName,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  itemName  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  itemName,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  itemName,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldName,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  itemName	88	None	replace
224	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  name,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  name,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  name,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldName,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
225	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  name,  fieldName,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  name,  fieldName,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  name,  fieldName,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldName,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
226	[BUG]  [BUGGY]  TypeToken  type  =  fieldType.getType();  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  fieldType.getType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  fieldType.getType();	          TypeToken    type    =    field.getType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	replace
227	[BUG]  [BUGGY]  TypeToken  type  =  boundField.getType();  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  boundField.getType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  boundField.getType();	          TypeToken    type    =    field.getType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	replace
228	[BUG]  [BUGGY]  TypeToken  type  =  jsonAdapterPresent.getType();  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  jsonAdapterPresent.getType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  jsonAdapterPresent.getType();	          TypeToken    type    =    field.getType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	replace
229	[BUG]  [BUGGY]  TypeToken  type  =  declaredType.getType();  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  declaredType.getType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  declaredType.getType();	          TypeToken    type    =    field.getType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	replace
230	[BUG]  [BUGGY]  TypeToken  type  =  field.getDeclaredType();  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  field.getDeclaredType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  field.getDeclaredType();	          TypeToken    type    =    field.getType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	replace
231	[BUG]  [BUGGY]  TypeToken  type  =  field.getReturnType();  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  field.getReturnType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  field.getReturnType();	          TypeToken    type    =    field.getType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	replace
232	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  isPrimitive));  [CE]  cannot  find  symbol  isPrimitive  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  isPrimitive));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  isPrimitive));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	3	None	replace
233	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  serialize));  [CE]  cannot  find  symbol  serialize  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  serialize));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  serialize));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  serialize	3	None	replace
234	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  null,  deserialize));  [CE]  cannot  find  symbol  serialize  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  null,  deserialize));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  null,  deserialize));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  serialize	3	None	replace
235	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  null,  deserialize));  [CE]  cannot  find  symbol  serializedName  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  null,  deserialize));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  null,  deserialize));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  serializedName	3	None	replace
236	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  declaredType));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  declaredType));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  declaredType));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null,    deserialize));    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	3	None	replace
237	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null,  deserialize));  [CE]  cannot  find  symbol  field  [FE]                      NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null,  deserialize));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null,  deserialize));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  field	3	None	replace
238	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  result));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  result));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  result));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null,    deserialize));    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	3	None	replace
239	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  type,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  type,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  type,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
240	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
241	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  boundField.getGenericSuperclass()));  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  boundField.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  boundField.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  boundField	49	None	replace
242	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  field,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  field,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  field,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
243	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  raw.getType(),  type,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  raw.getType(),  type,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context,  raw.getType(),  type,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
244	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  raw.getType(),  type,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  raw.getType(),  type,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context,  raw.getType(),  type,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
245	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  raw,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  raw,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  raw,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
246	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[field.getFields()  ];  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  new  Field[field.getFields()  ];  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  new  Field[field.getFields()  ];	          Field[]    fields    =    field.getFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
247	[BUG]  [BUGGY]  Type[]  raw  =  type.getRawTypes();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Type[]  raw  =  type.getRawTypes();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Type[]  raw  =  type.getRawTypes();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawTypes();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	15	None	replace
248	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null));  Type[]  raw  =  type.getRawTypes();  [CE]  cannot  find  symbol  field  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null));  Type[]  raw  =  type.getRawTypes();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null));  Type[]  raw  =  type.getRawTypes();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawTypes();    	non-compiled	[CE]  cannot  find  symbol  field	15	None	replace
249	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  null));  Type[]  raw  =  type.getRawTypes();  [CE]  cannot  find  symbol  name  [FE]                      NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  null));  Type[]  raw  =  type.getRawTypes();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  null));  Type[]  raw  =  type.getRawTypes();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawTypes();    	non-compiled	[CE]  cannot  find  symbol  name	15	None	replace
250	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fields,  null));  Type[]  raw  =  type.getRawTypes();  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fields,  null));  Type[]  raw  =  type.getRawTypes();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fields,  null));  Type[]  raw  =  type.getRawTypes();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawTypes();    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	15	None	replace
251	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  false));  Type[]  raw  =  type.getRawTypes();  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  false));  Type[]  raw  =  type.getRawTypes();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  false));  Type[]  raw  =  type.getRawTypes();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawTypes();    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	15	None	replace
252	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType));  Type[]  raw  =  type.getRawTypes();  [CE]  cannot  find  symbol  fieldType  [FE]                            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType));  Type[]  raw  =  type.getRawTypes();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType));  Type[]  raw  =  type.getRawTypes();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawTypes();    	non-compiled	[CE]  cannot  find  symbol  fieldType	15	None	replace
253	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    name));    	compilable	  [FE]  IllegalArgumentException  	79	9	replace
254	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType));  [FE]  IllegalArgumentException  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    name));    	compilable	  [FE]  IllegalArgumentException  	79	9	replace
255	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  item));  [CE]  cannot  find  symbol  item  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  item));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  item));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    name));    	non-compiled	[CE]  cannot  find  symbol  item	79	None	replace
256	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  serializedName));  [CE]  cannot  find  symbol  serializedName  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  serializedName));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  serializedName));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    name));    	non-compiled	[CE]  cannot  find  symbol  serializedName	79	None	replace
257	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  previous));  [CE]  cannot  find  symbol  previous  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  previous));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  previous));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    name));    	non-compiled	[CE]  cannot  find  symbol  previous	79	None	replace
258	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  originalName));  [CE]  cannot  find  symbol  originalName  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  originalName));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  originalName));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    name));    	non-compiled	[CE]  cannot  find  symbol  originalName	79	None	replace
259	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  serializedName	54	None	replace
260	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  serialize  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  serialize	54	None	replace
261	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  description,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  description  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  description,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  description,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  description	54	None	replace
262	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  field.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  field.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context,  field.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	28	None	replace
263	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
264	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
265	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  declaredType.getType(),  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  declaredType.getType(),  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context,  declaredType.getType(),  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
266	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  declaredType.getType(),  field,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  declaredType.getType(),  field,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context,  declaredType.getType(),  field,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
267	[BUG]  [BUGGY]  Collections.sort(result,  fields);  [CE]  no  suitable  method  found  for  sort(Map<String,BoundField>,Field[])  [FE]            IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Collections.sort(result,  fields);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Collections.sort(result,  fields);	          Collections.sort(fields);    	non-compiled	[CE]  no  suitable  method  found  for  sort(Map<String,BoundField>,Field[])	91	None	replace
268	[BUG]  [BUGGY]  Collections.sort(boundFields,  fieldNames);  [CE]  cannot  find  symbol  boundFields  [FE]              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Collections.sort(boundFields,  fieldNames);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Collections.sort(boundFields,  fieldNames);	          Collections.sort(fields);    	non-compiled	[CE]  cannot  find  symbol  boundFields	91	None	replace
269	[BUG]  [BUGGY]  Collections.sort(boundFields,  field);  [CE]  cannot  find  symbol  boundFields  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Collections.sort(boundFields,  field);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Collections.sort(boundFields,  field);	          Collections.sort(fields);    	non-compiled	[CE]  cannot  find  symbol  boundFields	91	None	replace
270	[BUG]  [BUGGY]  Collections.sort(fields,  result);  [CE]  no  suitable  method  found  for  sort(Field[],Map<String,BoundField>)  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Collections.sort(fields,  result);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Collections.sort(fields,  result);	          Collections.sort(fields);    	non-compiled	[CE]  no  suitable  method  found  for  sort(Field[],Map<String,BoundField>)	91	None	replace
271	[BUG]  [BUGGY]  Collections.sort(result,  fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]                    IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Collections.sort(result,  fieldNames);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Collections.sort(result,  fieldNames);	          Collections.sort(fields);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	91	None	replace
272	[BUG]  [BUGGY]  Collections.sort(reversed,  fields);  [CE]  cannot  find  symbol  reversed  [FE]                      IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Collections.sort(reversed,  fields);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Collections.sort(reversed,  fields);	          Collections.sort(fields);    	non-compiled	[CE]  cannot  find  symbol  reversed	91	None	replace
273	[BUG]  [BUGGY]  Collections.sort(boundFields);  [CE]  cannot  find  symbol  boundFields  [FE]                        IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Collections.sort(boundFields);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Collections.sort(boundFields);	          Collections.sort(fields);    	non-compiled	[CE]  cannot  find  symbol  boundFields	91	None	replace
274	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  result,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  name  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  result,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  result,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    result,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  name	21	None	replace
275	[BUG]  [BUGGY]  Field[]  fieldNames  =  boundField.getFieldNames();  [CE]  cannot  find  symbol  boundField  [FE]        IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  boundField.getFieldNames();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  boundField.getFieldNames();	          Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  boundField	65	None	replace
276	[BUG]  [BUGGY]  Field[]  fieldNames  =  jsonAdapter.getFieldNames();  [CE]  cannot  find  symbol  jsonAdapter  [FE]          IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  jsonAdapter.getFieldNames();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  jsonAdapter.getFieldNames();	          Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	65	None	replace
277	[BUG]  [BUGGY]  Field[]  fields  =  context.getFieldNames();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  context.getFieldNames();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  context.getFieldNames();	          Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	65	None	replace
278	[BUG]  [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	10	None	replace
279	[BUG]  [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType);  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	10	None	replace
280	[BUG]  [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  deserialize);  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  deserialize);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  deserialize);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	10	None	replace
281	[BUG]  [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  false));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  false));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  false));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	10	None	replace
282	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  raw,  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  raw,  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  raw,  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
283	[BUG]  [BUGGY]  type  =  TypeToken.get(type.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(type.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(type.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  ';'  expected	73	None	replace
284	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(context.getType(),  raw,  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(context.getType(),  raw,  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(context.getType(),  raw,  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
285	[BUG]  [BUGGY]  type  =  TypeToken.get(result.resolve(raw.getType(),  type,  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(result.resolve(raw.getType(),  type,  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result.resolve(raw.getType(),  type,  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
286	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	type        =        TypeToken.get($Gson$Types.resolve(type.getType(),        raw,        null));        TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	compilable	  [FE]  NullPointerException  	11	9	add
287	[BUG]  [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type        =        TypeToken.get($Gson$Types.resolve(type.getType(),        raw,        null));        TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	compilable	  [FE]  NullPointerException  	11	9	add
288	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	type        =        TypeToken.get($Gson$Types.resolve(type.getType(),        raw,        null));        TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	compilable	  [FE]  NullPointerException  	11	9	add
289	[BUG]  [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type        =        TypeToken.get($Gson$Types.resolve(type.getType(),        raw,        null));        TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	compilable	  [FE]  NullPointerException  	11	9	add
290	[BUG]  [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type        =        TypeToken.get($Gson$Types.resolve(type.getType(),        raw,        null));        TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	11	None	add
291	[BUG]  [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Serializers.resolve(type.getType(),  raw,  null));  TypeToken.get($Serializers.resolve(type.getType(),  raw,  null));  [CE]  cannot  find  symbol  $Serializers  [FE]          NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Serializers.resolve(type.getType(),  raw,  null));  TypeToken.get($Serializers.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type        =        TypeToken.get($Gson$Types.resolve(type.getType(),        raw,        null));        TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Serializers.resolve(type.getType(),  raw,  null));  TypeToken.get($Serializers.resolve(type.getType(),  raw,  null));	  	non-compiled	[CE]  cannot  find  symbol  $Serializers	11	None	add
292	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
293	[BUG]  [BUGGY]  TypeToken  type  =  type.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  type.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  type.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  ';'  expected	26	None	replace
294	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  serialize);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  serialize);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serialize	7	None	replace
295	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                      NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  serializedName);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  serializedName);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	7	None	replace
296	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null),  deserialize);  [CE]  cannot  find  symbol  field  [FE]                        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null),  deserialize);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null),  deserialize);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  field	7	None	replace
297	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  serialized);  [CE]  cannot  find  symbol  serialized  [FE]                          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  serialized);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  serialized);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serialized	7	None	replace
298	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  name);  [CE]  cannot  find  symbol  name  [FE]                            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  name);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  name);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  name	7	None	replace
299	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  serialization);  [CE]  cannot  find  symbol  serialization  [FE]                              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  serialization);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  serialization);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serialization	7	None	replace
300	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  type.getConstructor();  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  type.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  type.getConstructor();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
301	[BUG]  [BUGGY]  TypeToken  type  =  type.resolve(raw.getType(),  null));  ObjectConstructor  constructor  =  type.getConstructor();  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  type.resolve(raw.getType(),  null));  ObjectConstructor  constructor  =  type.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  type.resolve(raw.getType(),  null));  ObjectConstructor  constructor  =  type.getConstructor();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  ';'  expected	95	None	replace
302	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  context.getConstructor();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  context.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  context.getConstructor();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
303	[BUG]  [BUGGY]  TypeToken  type  =  type.resolve(raw.getType(),  null));  ObjectConstructor  constructor  =  field.getConstructor();  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  type.resolve(raw.getType(),  null));  ObjectConstructor  constructor  =  field.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  type.resolve(raw.getType(),  null));  ObjectConstructor  constructor  =  field.getConstructor();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  ';'  expected	95	None	replace
304	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null));  ObjectConstructor  constructor  =  field.getConstructor();  [CE]  cannot  find  symbol  field  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null));  ObjectConstructor  constructor  =  field.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null));  ObjectConstructor  constructor  =  field.getConstructor();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  field	95	None	replace
305	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  scope.getConstructor();  [CE]  cannot  find  symbol  scope  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  scope.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  scope.getConstructor();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  scope	95	None	replace
306	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  boundField.getGenericSuperclass(),  fieldType));  [CE]  cannot  find  symbol  boundField  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  boundField.getGenericSuperclass(),  fieldType));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  boundField.getGenericSuperclass(),  fieldType));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldType));    	non-compiled	[CE]  cannot  find  symbol  boundField	74	None	replace
307	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result.getGenericSuperclass(),  fieldType));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result.getGenericSuperclass(),  fieldType));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  result.getGenericSuperclass(),  fieldType));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldType));    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
308	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory.getGenericSuperclass(),  fieldType));  [CE]  cannot  find  symbol  factory  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory.getGenericSuperclass(),  fieldType));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory.getGenericSuperclass(),  fieldType));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldType));    	non-compiled	[CE]  cannot  find  symbol  factory	74	None	replace
309	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  context));  [CE]  cannot  find  symbol  field  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  context));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  context));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldType));    	non-compiled	[CE]  cannot  find  symbol  field	74	None	replace
310	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  type));  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  type));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  type));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldType));    	non-compiled	[CE]  cannot  find  symbol  field	74	None	replace
311	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  raw));  [CE]  cannot  find  symbol  name  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  raw));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  raw));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNames));    	non-compiled	[CE]  cannot  find  symbol  name	4	None	replace
312	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  name));  [CE]  cannot  find  symbol  field  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  name));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  name));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNames));    	non-compiled	[CE]  cannot  find  symbol  field	4	None	replace
313	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  description));  [CE]  cannot  find  symbol  description  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  description));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  description));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNames));    	non-compiled	[CE]  cannot  find  symbol  description	4	None	replace
314	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  null));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    boundField,    null));    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	6	None	replace
315	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  null));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    boundField,    null));    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	6	None	replace
316	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  previous,  null));  [CE]  cannot  find  symbol  previous  [FE]                      NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  previous,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  previous,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    boundField,    null));    	non-compiled	[CE]  cannot  find  symbol  previous	6	None	replace
317	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  replaced,  null));  [CE]  cannot  find  symbol  replaced  [FE]                        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  replaced,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  replaced,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    boundField,    null));    	non-compiled	[CE]  cannot  find  symbol  replaced	6	None	replace
318	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  null));  [CE]  cannot  find  symbol  name  [FE]                          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    boundField,    null));    	non-compiled	[CE]  cannot  find  symbol  name	6	None	replace
319	[BUG]  [BUGGY]  Type[]  raw  =  type.getRawType();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Type[]  raw  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Type[]  raw  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawType();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	14	None	replace
320	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null));  Type[]  raw  =  type.getRawType();  [CE]  cannot  find  symbol  field  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null));  Type[]  raw  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null));  Type[]  raw  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol  field	14	None	replace
321	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  null));  Type[]  raw  =  type.getRawType();  [CE]  cannot  find  symbol  name  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  null));  Type[]  raw  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  null));  Type[]  raw  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol  name	14	None	replace
322	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fields,  null));  Type[]  raw  =  type.getRawType();  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fields,  null));  Type[]  raw  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fields,  null));  Type[]  raw  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawType();    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	14	None	replace
323	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType));  Type[]  raw  =  type.getRawType();  [CE]  cannot  find  symbol  fieldType  [FE]                        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType));  Type[]  raw  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType));  Type[]  raw  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldType	14	None	replace
324	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  false));  Type[]  raw  =  type.getRawType();  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  false));  Type[]  raw  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  false));  Type[]  raw  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawType();    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	14	None	replace
325	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  sourceName,  null));  [CE]  cannot  find  symbol  sourceName  [FE]        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  sourceName,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  sourceName,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    null));    	non-compiled	[CE]  cannot  find  symbol  sourceName	1	None	replace
326	[BUG]  [BUGGY]  TypeToken  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    type.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	13	None	replace
327	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    type.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	13	9	replace
328	[BUG]  [BUGGY]  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    type.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	13	9	replace
329	[BUG]  [BUGGY]  TypeToken  type  =  type.get($Gson$Types.resolve(raw.getType(),  null));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  type.get($Gson$Types.resolve(raw.getType(),  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  type.get($Gson$Types.resolve(raw.getType(),  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    type.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	13	None	replace
330	[BUG]  [BUGGY]  TypeToken  type  =  type.get($Gson$Types.resolve(raw.getType(),  raw,  null));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  type.get($Gson$Types.resolve(raw.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  type.get($Gson$Types.resolve(raw.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    type.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	13	None	replace
331	[BUG]  [BUGGY]  TypeToken  type  =  type.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  type.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  type.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    type.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	13	None	replace
332	[BUG]  [BUGGY]  TypeToken  type  =  type.get($Gson$Types.resolve(source.getType(),  raw,  null));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  type.get($Gson$Types.resolve(source.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  type.get($Gson$Types.resolve(source.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    type.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	13	None	replace
333	[BUG]  [BUGGY]  type  =  type.get($Gson$Types.resolve(raw.getType(),  null));  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  type.get($Gson$Types.resolve(raw.getType(),  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  type.get($Gson$Types.resolve(raw.getType(),  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    type.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
334	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	12	9	replace
335	[BUG]  [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	12	9	replace
336	[BUG]  [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  cannot  find  symbol  typeToken  [FE]      NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  typeToken	12	None	replace
337	[BUG]  [BUGGY]  result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  incompatible  types	12	None	replace
338	[BUG]  [BUGGY]  result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  incompatible  types  [FE]          NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  incompatible  types	12	None	replace
339	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  cannot  find  symbol  typeToken  [FE]            NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  typeToken	12	None	replace
340	[BUG]  [BUGGY]  TypeToken  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
341	[BUG]  [BUGGY]  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
342	[BUG]  [BUGGY]  TypeToken  type  =  get($Gson$Types.resolve(source.getType(),  raw,  null));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  get($Gson$Types.resolve(source.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  get($Gson$Types.resolve(source.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
343	[BUG]  [BUGGY]  TypeToken  type  =  get($Gson$Types.resolve(raw.getType(),  raw,  null));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  get($Gson$Types.resolve(raw.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  get($Gson$Types.resolve(raw.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
344	[BUG]  [BUGGY]  TypeToken  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType);  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
345	[BUG]  [BUGGY]  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
346	[BUG]  [BUGGY]  result  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  result  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	result  =  get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
347	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	35	None	replace
348	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  field,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  field,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  field,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	35	None	replace
349	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  field,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  field,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  field,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	35	None	replace
350	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field,  field.getType(),  type,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field,  field.getType(),  type,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field,  field.getType(),  type,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	35	None	replace
351	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields    ==    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	44	None	replace
352	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  type.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields    ==    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	44	None	replace
353	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields    ==    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	44	None	replace
354	[BUG]  [BUGGY]  Field[]  fields  =  boundFields.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  boundFields.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  boundFields.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields    ==    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	44	None	replace
355	[BUG]  [BUGGY]  Field[]  fields  =  boundField.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  boundField.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  boundField.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields    ==    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	44	None	replace
356	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields    ==    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	44	None	replace
357	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  context.getConstructor();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  context.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  context.getConstructor();	          ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
358	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldType.getConstructor();  [CE]  cannot  find  symbol  fieldType  [FE]          IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  fieldType.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  fieldType.getConstructor();	          ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  fieldType	89	None	replace
359	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  type.getConstructor();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  type.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  type.getConstructor();	          ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
360	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  boundField.getConstructor();  [CE]  cannot  find  symbol  boundField  [FE]              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  boundField.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  boundField.getConstructor();	          ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  boundField	89	None	replace
361	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  declaredType.getConstructor();  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  declaredType.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  declaredType.getConstructor();	          ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
362	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  scope.getConstructor();  [CE]  cannot  find  symbol  scope  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  scope.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  scope.getConstructor();	          ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  scope	89	None	replace
363	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  name  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  factory.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  name	17	None	replace
364	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  previous,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  previous  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  previous,  factory.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  previous,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  previous	17	None	replace
365	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  factory  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  factory.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  factory	17	None	replace
366	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  factory.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	17	None	replace
367	[BUG]  [BUGGY]  Field[]  fields  =  declaredType.getFieldNames();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  declaredType.getFieldNames();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  declaredType.getFieldNames();	          Field[]    fieldNames    =    fieldType.getFieldNames();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	66	None	replace
368	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  condition));  [CE]  cannot  find  symbol  condition  [FE]        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  condition));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  condition));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldType));    	non-compiled	[CE]  cannot  find  symbol  condition	78	None	replace
369	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  raw,  declaredType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  raw,  declaredType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  raw,  declaredType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
370	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  declaredType.getType(),  raw,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context,  declaredType.getType(),  raw,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context,  declaredType.getType(),  raw,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
371	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  field,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  field,  factory.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  field,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
372	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(factory.getType(),  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  factory  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(factory.getType(),  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(factory.getType(),  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  factory	71	None	replace
373	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw,  field.getType(),  type,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw,  field.getType(),  type,  factory.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw,  field.getType(),  type,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	71	None	replace
374	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw,  context.getType(),  type,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw,  context.getType(),  type,  factory.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw,  context.getType(),  type,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
375	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  factory,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  factory,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  factory,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
376	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  getConstructor(type);  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  getConstructor(type);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  getConstructor(type);	          ObjectConstructor    constructor    =    getConstructor(fieldType);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
377	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  getConstructor(declaredType);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  getConstructor(declaredType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  getConstructor(declaredType);	          ObjectConstructor    constructor    =    getConstructor(fieldType);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
378	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  getConstructor(context);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  getConstructor(context);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  getConstructor(context);	          ObjectConstructor    constructor    =    getConstructor(fieldType);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
379	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  getConstructor(type.getRawType());  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  getConstructor(type.getRawType());  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  getConstructor(type.getRawType());	          ObjectConstructor    constructor    =    getConstructor(fieldType);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
380	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  getConstructor(i);  [CE]  cannot  find  symbol  i  [FE]                      IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  getConstructor(i);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  getConstructor(i);	          ObjectConstructor    constructor    =    getConstructor(fieldType);    	non-compiled	[CE]  cannot  find  symbol  i	92	None	replace
381	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  name.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  name.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  name.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    declaredType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
382	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  type,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  type,  factory.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  type,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
383	[BUG]  [BUGGY]  type  =  TypeToken.get(raw.resolve(raw.getType(),  declaredType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(raw.resolve(raw.getType(),  declaredType,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(raw.resolve(raw.getType(),  declaredType,  field.getGenericSuperclass()));	  type    =    TypeToken.get(type.resolve(raw.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
384	[BUG]  [BUGGY]  type  =  TypeToken.get(raw.resolve(type.getType(),  declaredType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(raw.resolve(type.getType(),  declaredType,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(raw.resolve(type.getType(),  declaredType,  field.getGenericSuperclass()));	  type    =    TypeToken.get(type.resolve(raw.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	77	None	replace
385	[BUG]  [BUGGY]  type  =  TypeToken.get(raw.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(raw.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(raw.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(type.resolve(raw.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
386	[BUG]  [BUGGY]  type  =  TypeToken.get(raw.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(raw.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(raw.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get(type.resolve(raw.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
387	[BUG]  [BUGGY]  type  =  TypeToken.get(type.resolve(raw.getType(),  declaredType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(type.resolve(raw.getType(),  declaredType,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(type.resolve(raw.getType(),  declaredType,  field.getGenericSuperclass()));	  type    =    TypeToken.get(type.resolve(raw.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
388	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  context,  declaredType,  raw.getGenericSuperclass()));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  context,  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  context,  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	75	None	replace
389	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  declaredType,  raw.getGenericSuperclass()));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	75	None	replace
390	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	75	None	replace
391	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  replaced));  [CE]  cannot  find  symbol  replaced  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  replaced));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  replaced));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    boundField));    	non-compiled	[CE]  cannot  find  symbol  replaced	5	None	replace
392	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  original));  [CE]  cannot  find  symbol  original  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  original));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  original));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    boundField));    	non-compiled	[CE]  cannot  find  symbol  original	5	None	replace
393	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  result));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  result));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  result));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    boundField));    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	5	None	replace
394	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  factory));  [CE]  cannot  find  symbol  factory  [FE]                      NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  factory));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  factory));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    boundField));    	non-compiled	[CE]  cannot  find  symbol  factory	5	None	replace
395	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  serializedName	22	None	replace
396	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  serialize  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serialize,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  serialize	22	None	replace
397	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  description,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  description  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  description,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  description,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  description	22	None	replace
398	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  name,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  name,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  name,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	22	None	replace
399	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  item,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  item  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  item,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  item,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  item	22	None	replace
400	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields(fieldType);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  type.getFields(fieldType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  type.getFields(fieldType);	          Field[]    fields    =    type.getFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
401	[BUG]  [BUGGY]  Field[]  fields  =  jsonAdapterPresent.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  jsonAdapterPresent.getFields();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  jsonAdapterPresent.getFields();	          Field[]    fields    =    type.getFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
402	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  field,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  field,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  field,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
403	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  result,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  result,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  result,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
404	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw,  context.getType(),  type,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw,  context.getType(),  type,  result.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw,  context.getType(),  type,  result.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
405	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  result,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  result,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  result,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
406	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  field  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames    ==    null    ||    fieldNames.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  field	41	None	replace
407	[BUG]  [BUGGY]  Field[]  fieldNames  =  name.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  name  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  name.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  name.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames    ==    null    ||    fieldNames.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  name	41	None	replace
408	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldType.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  fieldType  [FE]                    IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  fieldType.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  fieldType.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames    ==    null    ||    fieldNames.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  fieldType	41	None	replace
409	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  field));  [CE]  cannot  find  symbol  field  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  field));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  field));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    boundField));    	non-compiled	[CE]  cannot  find  symbol  field	5	None	replace
410	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  raw,  declaredType.getGenericSuperclass()));  [CE]  cannot  find  symbol  source  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  raw,  declaredType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  raw,  declaredType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    source.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  source	57	None	replace
411	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  raw,  declarationType.getGenericSuperclass()));  [CE]  cannot  find  symbol  source  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  raw,  declarationType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(source.getType(),  raw,  declarationType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    source.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  source	57	None	replace
412	[BUG]  [BUGGY]  Field[]  fieldNames  =  name.getFieldNames();  [CE]  cannot  find  symbol  name  [FE]        IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  name.getFieldNames();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  name.getFieldNames();	          Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  name	65	None	replace
413	[BUG]  [BUGGY]  Field[]  fieldNames  =  this.fieldNames.getFieldNames();  [CE]  cannot  find  symbol  fieldNames  [FE]          IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  this.fieldNames.getFieldNames();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  this.fieldNames.getFieldNames();	          Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	65	None	replace
414	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getConstructor();  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  cannot  find  symbol  field  [FE]        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  field.getConstructor();  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  field.getConstructor();  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  field	62	None	replace
415	[BUG]  [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  constructor);  [CE]  cannot  find  symbol  constructor  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  constructor);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  constructor);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  constructor	62	None	replace
416	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  fieldType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  fieldType);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  fieldType	62	None	replace
417	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));  Type[]  raw  =  type.getRawType();  [CE]  cannot  find  symbol  fieldType  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));  Type[]  raw  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));  Type[]  raw  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldType	14	None	replace
418	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  null));  Type[]  raw  =  type.getRawType();  [CE]  cannot  find  symbol  boundField  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  null));  Type[]  raw  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  null));  Type[]  raw  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol  boundField	14	None	replace
419	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  null));  Type[]  raw  =  type.getRawType();  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  null));  Type[]  raw  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  null));  Type[]  raw  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawType();    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	14	None	replace
420	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.length];  }  [CE]  cannot  find  symbol  field  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.length];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.length];  }	          Field[]    fieldNames    =    field.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.length];    }    	non-compiled	[CE]  cannot  find  symbol  field	70	None	replace
421	[BUG]  [BUGGY]  Field[]  fieldNames  =  row.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [CE]  cannot  find  symbol  row  [FE]                    IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  row.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  row.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }	          Field[]    fieldNames    =    field.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.length];    }    	non-compiled	[CE]  cannot  find  symbol  row	70	None	replace
422	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fieldType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fieldType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fieldType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    factory,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	84	None	replace
423	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  fieldType,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  fieldType,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  fieldType,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
424	[BUG]  [BUGGY]  Field[]  fieldNames  =  name.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  name  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  name.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  name.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  name	42	None	replace
425	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  name,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  name,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  name,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
426	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  serializedName,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  serializedName,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  serializedName,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
427	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  field.getFieldNames();	          Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	38	None	replace
428	[BUG]  [BUGGY]  Field[]  fieldNames  =  fields.getFieldNames();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  fields.getFieldNames();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  fields.getFieldNames();	          Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
429	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  context,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  context,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  context,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    context,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
430	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  field,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  field,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  field,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    context,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
431	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  result,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  result,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  result,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(field.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	61	None	replace
432	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(field.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	61	None	replace
433	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(field.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	61	None	replace
434	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  label,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  label  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  label,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  label,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldName,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  label	88	None	replace
435	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType,  fieldType.getType(),  raw,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType,  fieldType.getType(),  raw,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType,  fieldType.getType(),  raw,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	56	None	replace
436	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  declarationType.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  declarationType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  declarationType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	56	None	replace
437	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  name));  [CE]  cannot  find  symbol  name  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  name));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  name));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  name	3	None	replace
438	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  fieldType));  [CE]  cannot  find  symbol  fieldType  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  fieldType));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  fieldType));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  fieldType	3	None	replace
439	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  offset));  [CE]  cannot  find  symbol  offset  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  offset));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  offset));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  offset	3	None	replace
440	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  declarationType.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  declarationType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  declarationType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	50	None	replace
441	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  name,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  name,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  name,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	22	None	replace
442	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  field.getType(),  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  field.getType(),  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type,  field.getType(),  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type,    declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	51	None	replace
443	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldType,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldType,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldType,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	30	None	replace
444	[BUG]  [BUGGY]  Field[]  fieldNames  =  name.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  name  [FE]              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  name.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  name.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }	          Field[]    fieldNames    =    field.getFieldNames();    if(fieldNames!=    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  name	68	None	replace
445	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldType.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  fieldType  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  fieldType.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  fieldType.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }	          Field[]    fieldNames    =    field.getFieldNames();    if(fieldNames!=    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  fieldType	68	None	replace
446	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  fieldType,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  fieldType,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  fieldType,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
447	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	36	None	replace
448	[BUG]  [BUGGY]  Collections.sort(fields,  type);  [CE]  no  suitable  method  found  for  sort(Field[],TypeToken<CAP#1>)  [FE]            IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Collections.sort(fields,  type);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Collections.sort(fields,  type);	          Collections.sort(fields);    	non-compiled	[CE]  no  suitable  method  found  for  sort(Field[],TypeToken<CAP#1>)	91	None	replace
449	[BUG]  [BUGGY]  Collections.sort(fields,  null);  [CE]  no  suitable  method  found  for  sort(Field[],<null>)  [FE]              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Collections.sort(fields,  null);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Collections.sort(fields,  null);	          Collections.sort(fields);    	non-compiled	[CE]  no  suitable  method  found  for  sort(Field[],<null>)	91	None	replace
450	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	73	None	replace
451	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType,  fieldName,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldName  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType,  fieldName,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType,  fieldName,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldName	73	None	replace
452	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
453	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  boundField  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  boundField	64	None	replace
454	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  fieldType,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  fieldType,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  fieldType,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	64	None	replace
455	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(field.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(field.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(field.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get(resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	29	None	replace
456	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(raw.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(raw.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(raw.getType(),  declaredType,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get(resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
457	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(context,  field.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(context,  field.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(context,  field.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get(resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	29	None	replace
458	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldNamingPolicy.getType(),  raw,  fieldNamingPolicy.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldNamingPolicy.getType(),  raw,  fieldNamingPolicy.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(fieldNamingPolicy.getType(),  raw,  fieldNamingPolicy.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNamingPolicy.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
459	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldNamingPolicy.getType(),  raw,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldNamingPolicy.getType(),  raw,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(fieldNamingPolicy.getType(),  raw,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNamingPolicy.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
460	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
461	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
462	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	12	9	replace
463	[BUG]  [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	12	9	replace
464	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [CE]  cannot  find  symbol  typeToken  [FE]        NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  typeToken	12	None	replace
465	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	12	9	replace
466	[BUG]  [BUGGY]  if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	12	9	replace
467	[BUG]  [BUGGY]  if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [CE]  cannot  find  symbol  typeToken  [FE]            NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  typeToken	12	None	replace
468	[BUG]  [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [CE]  cannot  find  symbol  typeToken  [FE]              NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  typeToken	12	None	replace
469	[BUG]  [BUGGY]  Field[]  fields  =  name.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  name.getFields();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  name.getFields();	          Field[]    fields    =    type.getFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
470	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  label,  null));  [CE]  cannot  find  symbol  label  [FE]        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  label,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  label,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    null));    	non-compiled	[CE]  cannot  find  symbol  label	1	None	replace
471	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  label));  [CE]  cannot  find  symbol  label  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  label));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  label));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    name));    	non-compiled	[CE]  cannot  find  symbol  label	79	None	replace
472	[BUG]  [BUGGY]  type  =  TypeToken.get(constructor.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(constructor.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(constructor.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
473	[BUG]  [BUGGY]  type  =  TypeToken.get(result.resolve(raw.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(result.resolve(raw.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result.resolve(raw.getType(),  declaredType,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
474	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
475	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw,  field.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw,  field.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw,  field.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	26	None	replace
476	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  fieldType,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  fieldType,  factory.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  fieldType,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
477	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields(fieldNames);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  fieldType.getFields(fieldNames);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  fieldType.getFields(fieldNames);	          Field[]    fields    =    fieldType.getFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
478	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields(null);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  fieldType.getFields(null);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  fieldType.getFields(null);	          Field[]    fields    =    fieldType.getFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
479	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy.getGenericSuperclass(),  raw));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy.getGenericSuperclass(),  raw));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy.getGenericSuperclass(),  raw));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldType));    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
480	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy.getGenericSuperclass(),  fieldType));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy.getGenericSuperclass(),  fieldType));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy.getGenericSuperclass(),  fieldType));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldType));    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
481	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  fieldType));  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  fieldType));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  fieldType));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldType));    	non-compiled	[CE]  cannot  find  symbol  field	74	None	replace
482	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declared);  [CE]  cannot  find  symbol  declared  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declared);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declared);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  declared	7	None	replace
483	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  result);  [CE]  no  suitable  method  found  for  get(Type,Map<String,BoundField>)  [FE]                      NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  result);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  result);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(Type,Map<String,BoundField>)	7	None	replace
484	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  field);  [CE]  cannot  find  symbol  field  [FE]                        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  field);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  field);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  field	7	None	replace
485	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
486	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  result.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  result.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  boundField	32	None	replace
487	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  result.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  result.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	32	None	replace
488	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  value));  [CE]  cannot  find  symbol  value  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  value));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  value));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  value	2	None	replace
489	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  boundField,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  boundField,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  boundField,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    factory,    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  boundField	83	None	replace
490	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  factory,  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  factory,  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  factory,  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    factory,    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	83	None	replace
491	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  name,  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  name,  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  name,  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    factory,    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	83	None	replace
492	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  result,  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  result,  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  result,  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    factory,    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	83	None	replace
493	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    factory,    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	83	None	replace
494	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  fieldType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  fieldType,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  fieldType,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
495	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  context,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  context,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  context,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
496	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	28	None	replace
497	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  boundField  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  factory.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  boundField	17	None	replace
498	[BUG]  [BUGGY]  type  =  TypeToken.get(result.resolve(raw.getType(),  declaredType,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(result.resolve(raw.getType(),  declaredType,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result.resolve(raw.getType(),  declaredType,  context.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
499	[BUG]  [BUGGY]  type  =  TypeToken.get(result,  field.resolve(context.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(result,  field.resolve(context.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result,  field.resolve(context.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
500	[BUG]  [BUGGY]  type  =  TypeToken.get(raw.resolve(context.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(raw.resolve(context.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(raw.resolve(context.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
501	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(context,  field.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(context,  field.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(context,  field.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	31	None	replace
502	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  serializedName,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  serializedName,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  serializedName,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	54	None	replace
503	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType,  null),  declaredType);  [CE]  cannot  find  symbol  fieldType  [FE]        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType,  null),  declaredType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType,  null),  declaredType);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    declaredType);    	non-compiled	[CE]  cannot  find  symbol  fieldType	96	None	replace
504	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType,  fieldNamingPolicy);  [CE]  no  suitable  method  found  for  get(Type,Type,FieldNamingStrategy)  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType,  fieldNamingPolicy);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType,  fieldNamingPolicy);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    declaredType);    	non-compiled	[CE]  no  suitable  method  found  for  get(Type,Type,FieldNamingStrategy)	96	None	replace
505	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  field,  null),  declaredType);  [CE]  cannot  find  symbol  field  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  field,  null),  declaredType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  field,  null),  declaredType);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    declaredType);    	non-compiled	[CE]  cannot  find  symbol  field	96	None	replace
506	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType,  field);  [CE]  cannot  find  symbol  field  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType,  field);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType,  field);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    declaredType);    	non-compiled	[CE]  cannot  find  symbol  field	96	None	replace
507	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy.getGenericSuperclass(),  fieldName));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy.getGenericSuperclass(),  fieldName));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy.getGenericSuperclass(),  fieldName));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldName));    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
508	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy.getGenericSuperclass(),  name));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy.getGenericSuperclass(),  name));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingPolicy.getGenericSuperclass(),  name));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldName));    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
509	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  boundField,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  boundField  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  boundField,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  boundField,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    result,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  boundField	45	None	replace
510	[BUG]  [BUGGY]  type  =  TypeToken.get(result.resolve(type.getType(),  result,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(result.resolve(type.getType(),  result,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result.resolve(type.getType(),  result,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    result,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
511	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  declared.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  declared.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  declaredType,  declared.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(declaredType.getType(),    field,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	80	None	replace
512	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  fieldNames.getFields();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  fieldNames.getFields();	          Field[]    fields    =    field.getFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
513	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getConstructor();  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  fieldNamingPolicy.getConstructor();	          ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
514	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldNames.getConstructor();  [CE]  cannot  find  symbol  fieldNames  [FE]          IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  fieldNames.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  fieldNames.getConstructor();	          ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	89	None	replace
515	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  getConstructor(field);  [CE]  cannot  find  symbol  field  [FE]              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  getConstructor(field);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  getConstructor(field);	          ObjectConstructor    constructor    =    getConstructor(fieldType);    	non-compiled	[CE]  cannot  find  symbol  field	92	None	replace
516	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  getConstructor(null);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  getConstructor(null);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  getConstructor(null);	          ObjectConstructor    constructor    =    getConstructor(fieldType);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
517	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  getConstructor(sourceType);  [CE]  cannot  find  symbol  sourceType  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  getConstructor(sourceType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  getConstructor(sourceType);	          ObjectConstructor    constructor    =    getConstructor(fieldType);    	non-compiled	[CE]  cannot  find  symbol  sourceType	92	None	replace
518	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	16	None	replace
519	[BUG]  [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	16	None	replace
520	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  }  [CE]  cannot  find  symbol  typeToken  [FE]                        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol  typeToken	16	None	replace
521	[BUG]  [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  }  [CE]  cannot  find  symbol  typeToken  [FE]                          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol  typeToken	16	None	replace
522	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType()  [CE]  ';'  expected  [FE]                            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType()  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType()	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	16	None	replace
523	[BUG]  [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType()  [CE]  ';'  expected  [FE]                              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType()  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType()	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	16	None	replace
524	[BUG]  [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  boundField);  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  boundField);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  boundField);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	10	None	replace
525	[BUG]  [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	10	None	replace
526	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  boundField);  [CE]  cannot  find  symbol  boundField  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  boundField);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  boundField);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  boundField	10	None	replace
527	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  type,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	35	None	replace
528	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw,  field.getType(),  type,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw,  field.getType(),  type,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw,  field.getType(),  type,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	35	None	replace
529	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field,  field.getType(),  type,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field,  field.getType(),  type,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field,  field.getType(),  type,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	35	None	replace
530	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  name.getGenericSuperclass()));  [CE]  cannot  find  symbol  name  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  name.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  name.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    result,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  name	21	None	replace
531	[BUG]  [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type        =        TypeToken.get($Gson$Types.resolve(type.getType(),        raw,        null));        type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
532	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  name  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  name	75	None	replace
533	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));  Type[]  raw  =  type.getRawTypes();  [CE]  cannot  find  symbol  fieldType  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));  Type[]  raw  =  type.getRawTypes();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));  Type[]  raw  =  type.getRawTypes();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawTypes();    	non-compiled	[CE]  cannot  find  symbol  fieldType	15	None	replace
534	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  null));  Type[]  raw  =  type.getRawTypes();  [CE]  cannot  find  symbol  boundField  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  null));  Type[]  raw  =  type.getRawTypes();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  null));  Type[]  raw  =  type.getRawTypes();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawTypes();    	non-compiled	[CE]  cannot  find  symbol  boundField	15	None	replace
535	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  null));  Type[]  raw  =  type.getRawTypes();  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  null));  Type[]  raw  =  type.getRawTypes();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  null));  Type[]  raw  =  type.getRawTypes();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawTypes();    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	15	None	replace
536	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  raw));  [CE]  cannot  find  symbol  field  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  raw));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  raw));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNames));    	non-compiled	[CE]  cannot  find  symbol  field	4	None	replace
537	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldNamingPolicy));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldNamingPolicy));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldNamingPolicy));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNames));    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	4	None	replace
538	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass(),  name));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass(),  name));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass(),  name));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    name));    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
539	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  sourceName));  [CE]  cannot  find  symbol  sourceName  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  sourceName));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  sourceName));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    name));    	non-compiled	[CE]  cannot  find  symbol  sourceName	76	None	replace
540	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  value));  [CE]  cannot  find  symbol  value  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  value));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  value));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    name));    	non-compiled	[CE]  cannot  find  symbol  value	76	None	replace
541	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  method));  [CE]  cannot  find  symbol  method  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  method));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  method));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    name));    	non-compiled	[CE]  cannot  find  symbol  method	76	None	replace
542	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  fieldType,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  fieldType,  result.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  fieldType,  result.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
543	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw,  field.getType(),  type,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw,  field.getType(),  type,  result.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw,  field.getType(),  type,  result.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	33	None	replace
544	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  name,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  name,  result.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  name,  result.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
545	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(raw!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	if(raw!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    type.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	13	9	replace
546	[BUG]  [BUGGY]  if(raw!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(raw!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(raw!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    type.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	13	9	replace
547	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    type.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  IllegalArgumentException  	13	9	replace
548	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [FE]  IllegalArgumentException  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    type.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  IllegalArgumentException  	13	9	replace
549	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    type.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
550	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    type.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	13	None	replace
551	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  [CE]  cannot  find  symbol  field  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  field	95	None	replace
552	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  [CE]  cannot  find  symbol  fieldType  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(fieldType.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  fieldType	95	None	replace
553	[BUG]  [BUGGY]  TypeToken  type  =  type.get($Gson$Types.resolve(field.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  type.get($Gson$Types.resolve(field.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  type.get($Gson$Types.resolve(field.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	95	None	replace
554	[BUG]  [BUGGY]  TypeToken  type  =  type.resolve(raw.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  type.resolve(raw.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  type.resolve(raw.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  ';'  expected	95	None	replace
555	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRa  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRa  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRa	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	63	None	replace
556	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	63	None	replace
557	[BUG]  [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRa  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRa  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRa	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	63	None	replace
558	[BUG]  [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	63	None	replace
559	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  }  [CE]  incompatible  types  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  incompatible  types	63	None	replace
560	[BUG]  [BUGGY]  if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
561	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
562	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
563	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
564	[BUG]  [BUGGY]  if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
565	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getObjectConstructor();  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getObjectConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  fieldNamingPolicy.getObjectConstructor();	          ObjectConstructor    constructor    =    context.getObjectConstructor();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
566	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  type.getObjectConstructor();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  type.getObjectConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  type.getObjectConstructor();	          ObjectConstructor    constructor    =    context.getObjectConstructor();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
567	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldType.getObjectConstructor();  [CE]  cannot  find  symbol  fieldType  [FE]              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  fieldType.getObjectConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  fieldType.getObjectConstructor();	          ObjectConstructor    constructor    =    context.getObjectConstructor();    	non-compiled	[CE]  cannot  find  symbol  fieldType	90	None	replace
568	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(factory.getType(),  raw,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  factory  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(factory.getType(),  raw,  factory.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(factory.getType(),  raw,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  factory	71	None	replace
569	[BUG]  [BUGGY]  TypeToken  type  =  new  TypeToken(field.getType());  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  new  TypeToken(field.getType());  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  new  TypeToken(field.getType());	          TypeToken    type    =    field.getType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	replace
570	[BUG]  [BUGGY]  TypeToken  type  =  new  TypeToken(field.getType(),  fieldType);  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  new  TypeToken(field.getType(),  fieldType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  new  TypeToken(field.getType(),  fieldType);	          TypeToken    type    =    field.getType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	replace
571	[BUG]  [BUGGY]  TypeToken  type  =  new  TypeToken(fieldType.getType());  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  new  TypeToken(fieldType.getType());  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  new  TypeToken(fieldType.getType());	          TypeToken    type    =    field.getType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	replace
572	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  IllegalArgumentException  	9	9	replace
573	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [FE]  IllegalArgumentException  [FE]    NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  IllegalArgumentException  	9	9	replace
574	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	9	9	replace
575	[BUG]  [BUGGY]  if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	9	9	replace
576	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	9	9	replace
577	[BUG]  [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	9	9	replace
578	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(raw!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	if(raw!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	9	9	replace
579	[BUG]  [BUGGY]  if(raw!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(raw!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(raw!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  NullPointerException  	9	9	replace
580	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
581	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  IllegalArgumentException  	9	9	replace
582	[BUG]  [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]              NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(result  ==  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	compilable	  [FE]  IllegalArgumentException  	9	9	replace
583	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  resource.getGenericSuperclass()));  [CE]  cannot  find  symbol  resource  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  resource.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  resource.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(result.getType(),    raw,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  resource	59	None	replace
584	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  fieldType,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  fieldType,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  fieldType,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
585	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
586	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFields();  if(fieldNames  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  cannot  find  symbol  [FE]                      IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  type.getFields();  if(fieldNames  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  type.getFields();  if(fieldNames  ==  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fields    =    type.getFields();    if(fields    ==    null)    {    result    =    new    Field[fields.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
587	[BUG]  [BUGGY]  type  =  TypeToken.get(raw.resolve(raw.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(raw.resolve(raw.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(raw.resolve(raw.getType(),  declaredType,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get(type.resolve(raw.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
588	[BUG]  [BUGGY]  type  =  TypeToken.get(raw.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(raw.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(raw.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(type.resolve(raw.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
589	[BUG]  [BUGGY]  type  =  TypeToken.get(result.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(result.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
590	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  boundField	53	None	replace
591	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  name,  result,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  name  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  name,  result,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  name,  result,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  name	34	None	replace
592	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  result,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  result,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  result,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	34	None	replace
593	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  result,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  result,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  result,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	34	None	replace
594	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  type);  [CE]  no  suitable  method  found  for  get(Type,TypeToken<CAP#1>)  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  type);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  type);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    type.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  no  suitable  method  found  for  get(Type,TypeToken<CAP#1>)	13	None	replace
595	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  fieldType.getDeclaredFields();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  fieldType.getDeclaredFields();	          Field[]    fields    =    fieldType.getFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
596	[BUG]  [BUGGY]  Field[]  fields  =  this.fieldType.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  this.fieldType.getFields();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  this.fieldType.getFields();	          Field[]    fields    =    fieldType.getFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
597	[BUG]  [BUGGY]  if(type.isPrimitive())  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(type.isPrimitive())  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(type.isPrimitive())  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
598	[BUG]  [BUGGY]  if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null);  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null);  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(type!=  null)  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null);  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  ')'  expected	9	None	replace
599	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  deserialized));  [CE]  cannot  find  symbol  deserialized  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  deserialized));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  deserialized));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNames));    	non-compiled	[CE]  cannot  find  symbol  deserialized	4	None	replace
600	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(raw.getType(),  declaredType,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(raw.getType(),  declaredType,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(raw.getType(),  declaredType,  context.getGenericSuperclass()));	  type    =    TypeToken.get(result.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
601	[BUG]  [BUGGY]  Field[]  fields  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames    ==    null    ||    fieldNames.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
602	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  field.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  field.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type,  field.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	26	None	replace
603	[BUG]  [BUGGY]  Collections.sort(fields,  replacer);  [CE]  cannot  find  symbol  replacer  [FE]            IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Collections.sort(fields,  replacer);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Collections.sort(fields,  replacer);	          Collections.sort(fields);    	non-compiled	[CE]  cannot  find  symbol  replacer	91	None	replace
604	[BUG]  [BUGGY]  Collections.sort(fields,  original);  [CE]  cannot  find  symbol  original  [FE]              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Collections.sort(fields,  original);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Collections.sort(fields,  original);	          Collections.sort(fields);    	non-compiled	[CE]  cannot  find  symbol  original	91	None	replace
605	[BUG]  [BUGGY]  Collections.sort(fields,  previous);  [CE]  cannot  find  symbol  previous  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Collections.sort(fields,  previous);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Collections.sort(fields,  previous);	          Collections.sort(fields);    	non-compiled	[CE]  cannot  find  symbol  previous	91	None	replace
606	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(type.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(type.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(type.getType(),  declaredType,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get(resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	29	None	replace
607	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(declaredType.getType(),  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolve(declaredType.getType(),  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(declaredType.getType(),  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get(resolve(raw.getType(),    declaredType,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
608	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  boundField);  result  =  type.getRawType();  [CE]  cannot  find  symbol  boundField  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  boundField);  result  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  boundField);  result  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken    type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol  boundField	63	None	replace
609	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  context,  fieldNamingPolicy.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  context,  fieldNamingPolicy.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  context,  fieldNamingPolicy.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
610	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  serialized));  [CE]  cannot  find  symbol  serialized  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  serialized));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  serialized));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  serialized	3	None	replace
611	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldType.getGenericSuperclass(),  name));  [CE]  cannot  find  symbol  fieldType  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldType.getGenericSuperclass(),  name));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldType.getGenericSuperclass(),  name));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    name));    	non-compiled	[CE]  cannot  find  symbol  fieldType	76	None	replace
612	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory.getGenericSuperclass(),  raw));  [CE]  cannot  find  symbol  factory  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory.getGenericSuperclass(),  raw));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory.getGenericSuperclass(),  raw));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    name));    	non-compiled	[CE]  cannot  find  symbol  factory	76	None	replace
613	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factoryName,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  factoryName  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factoryName,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factoryName,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldName,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  factoryName	88	None	replace
614	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  result,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  result,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  result,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(result.getType(),    raw,    type.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	59	None	replace
615	[BUG]  [BUGGY]  type  =  TypeToken.resolve(raw.getType(),  result,  type.getGenericSuperclass()));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.resolve(raw.getType(),  result,  type.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.resolve(raw.getType(),  result,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(result.getType(),    raw,    type.getGenericSuperclass()));    	non-compiled	[CE]  ';'  expected	59	None	replace
616	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw,  field.getType(),  type,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw,  field.getType(),  type,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw,  field.getType(),  type,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	36	None	replace
617	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  namedType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  namedType,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  namedType,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(field.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	61	None	replace
618	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  declaredType));  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  declaredType));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  declaredType));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldType));    	non-compiled	[CE]  cannot  find  symbol  field	74	None	replace
619	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  raw));  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  raw));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass(),  raw));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldType));    	non-compiled	[CE]  cannot  find  symbol  field	74	None	replace
620	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingStrategy.getGenericSuperclass(),  raw));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingStrategy.getGenericSuperclass(),  raw));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingStrategy.getGenericSuperclass(),  raw));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass(),    fieldType));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	74	None	replace
621	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  replaced,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  replaced  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  replaced,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  replaced,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  replaced	34	None	replace
622	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType,  result.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType,  result.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	34	None	replace
623	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  row,  null));  [CE]  cannot  find  symbol  row  [FE]        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  row,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  row,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    null));    	non-compiled	[CE]  cannot  find  symbol  row	1	None	replace
624	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  row,  null));  Type[]  raw  =  type.getRawType();  [CE]  cannot  find  symbol  row  [FE]                NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  row,  null));  Type[]  raw  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  row,  null));  Type[]  raw  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol  row	14	None	replace
625	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  factory,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  factory  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  factory,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  factory,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  factory	17	None	replace
626	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  context,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  factory  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  context,  factory.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  context,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  factory	17	None	replace
627	[BUG]  [BUGGY]  Field[]  fields  =  type.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  type.getDeclaredFields();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  type.getDeclaredFields();	          Field[]    fields    =    type.getFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
628	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  field.getType(),  declaredType,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  field.getType(),  declaredType,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type,  field.getType(),  declaredType,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	52	None	replace
629	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  field.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	42	None	replace
630	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  row,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  row  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  row,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  row,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  row	75	None	replace
631	[BUG]  [BUGGY]  Field[]  fieldNames  =  fields.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  fields.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  fields.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames!=    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
632	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  field.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }	          Field[]    fieldNames    =    type.getFieldNames();    if(fieldNames!=    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	43	None	replace
633	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  row,  null));  Type[]  raw  =  type.getRawTypes();  [CE]  cannot  find  symbol  row  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  row,  null));  Type[]  raw  =  type.getRawTypes();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  row,  null));  Type[]  raw  =  type.getRawTypes();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]    raw    =    type.getRawTypes();    	non-compiled	[CE]  cannot  find  symbol  row	15	None	replace
634	[BUG]  [BUGGY]  Field[]  fields  =  row.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  row.getFields();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  row.getFields();	          Field[]    fields    =    field.getFields();    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
635	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fieldNamingStrategy,  fieldNamingPolicy.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fieldNamingStrategy,  fieldNamingPolicy.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fieldNamingStrategy,  fieldNamingPolicy.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNamingPolicy.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	55	None	replace
636	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldNamingPolicy,  declaredType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldNamingPolicy,  declaredType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldNamingPolicy,  declaredType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldNamingPolicy.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
637	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  fieldType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  fieldType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  fieldType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(context.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
638	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  factory  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory,  context.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  factory	30	None	replace
639	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw,  context,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw,  context,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw,  context,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw,    context.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	30	None	replace
640	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  item,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  item  [FE]              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  item,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  item,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  item	46	None	replace
641	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  label,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  label  [FE]                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  label,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  label,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    name,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  label	46	None	replace
642	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  fieldType,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  fieldType,  factory.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  fieldType,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(raw.getType(),    type,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
643	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null),  declaredType);  [CE]  cannot  find  symbol  field  [FE]        NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null),  declaredType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null),  declaredType);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    declaredType);    	non-compiled	[CE]  cannot  find  symbol  field	96	None	replace
644	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType,  fieldNamingStrategy);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType,  fieldNamingStrategy);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    declaredType);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	96	None	replace
645	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  null,  raw));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  null,  raw));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    boundField,    null));    	compilable	  [FE]  IllegalArgumentException  	6	9	replace
646	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  null,  raw));  [FE]  IllegalArgumentException  [FE]                  NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  null,  raw));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  null,  raw));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    boundField,    null));    	compilable	  [FE]  IllegalArgumentException  	6	9	replace
647	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  constructor);  ObjectConstructor  constructor  =  field.getConstructor();  [CE]  cannot  find  symbol  constructor  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  constructor);  ObjectConstructor  constructor  =  field.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  constructor);  ObjectConstructor  constructor  =  field.getConstructor();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  constructor	95	None	replace
648	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  null));  ObjectConstructor  constructor  =  field.getConstructor();  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  null));  ObjectConstructor  constructor  =  field.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  null));  ObjectConstructor  constructor  =  field.getConstructor();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	95	None	replace
649	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType));  ObjectConstructor  constructor  =  field.getConstructor();  [CE]  cannot  find  symbol  fieldType  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType));  ObjectConstructor  constructor  =  field.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType));  ObjectConstructor  constructor  =  field.getConstructor();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  fieldType	95	None	replace
650	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  methodNamingStrategy,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  methodNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  methodNamingStrategy,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  methodNamingStrategy,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    fieldNamingStrategy,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  methodNamingStrategy	86	None	replace
651	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  context,  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  context,  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  context,  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    factory,    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	83	None	replace
652	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fieldNamingPolicy,  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fieldNamingPolicy,  raw,  field.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  fieldNamingPolicy,  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    factory,    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	83	None	replace
653	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  reference.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  reference.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  reference.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	32	None	replace
654	[BUG]  [BUGGY]  if(type.isPrimitive())  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(type.isPrimitive())  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(type.isPrimitive())  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
655	[BUG]  [BUGGY]  if(type.isPrimitive())  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  if(type.isPrimitive())  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	if(type.isPrimitive())  {  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  }	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
656	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldType.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [CE]  cannot  find  symbol  fieldType  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fieldNames  =  fieldType.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fieldNames  =  fieldType.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }	          Field[]    fieldNames    =    field.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.length];    }    	non-compiled	[CE]  cannot  find  symbol  fieldType	70	None	replace
657	[BUG]  [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($GSON$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  cannot  find  symbol  $GSON$Types  [FE]    NullPointerException    [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($GSON$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type        =        TypeToken.get($Gson$Types.resolve(type.getType(),        raw,        null));        type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($GSON$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	non-compiled	[CE]  cannot  find  symbol  $GSON$Types	8	None	add
658	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldtype.getConstructor();  [CE]  cannot  find  symbol  fieldtype  [FE]        IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  fieldtype.getConstructor();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  fieldtype.getConstructor();	          ObjectConstructor    constructor    =    field.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  fieldtype	89	None	replace
659	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  offset));  [CE]  cannot  find  symbol  offset  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  offset));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  offset));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    name));    	non-compiled	[CE]  cannot  find  symbol  offset	79	None	replace
660	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  [CE]  cannot  find  symbol  typeToken  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  typeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol  typeToken	16	None	replace
661	[BUG]  [BUGGY]  result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null));  [CE]  cannot  find  symbol  field  [FE]                      NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	result  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    result    =    type.getRawType();    	non-compiled	[CE]  cannot  find  symbol  field	16	None	replace
662	[BUG]  [BUGGY]  TypeToken  type  =  field.restrictByNotNullOrUndefined();  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  field.restrictByNotNullOrUndefined();  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  field.restrictByNotNullOrUndefined();	          TypeToken    type    =    field.getType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	replace
663	[BUG]  [BUGGY]  TypeToken  type  =  fields.get(fieldType);  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  TypeToken  type  =  fields.get(fieldType);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	TypeToken  type  =  fields.get(fieldType);	          TypeToken    type    =    field.getType();    	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	replace
664	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType,  null),  deserialize);  [CE]  cannot  find  symbol  fieldType  [FE]                    NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType,  null),  deserialize);  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType,  null),  deserialize);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldType	7	None	replace
665	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  selectedField,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  selectedField  [FE]            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  selectedField,  fieldType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  selectedField,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  selectedField	64	None	replace
666	[BUG]  [BUGGY]  type  =  TypeToken.get(resolved.getType(),  type,  raw.getGenericSuperclass()));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(resolved.getType(),  type,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolved.getType(),  type,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(type.resolve(raw.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  ';'  expected	77	None	replace
667	[BUG]  [BUGGY]  type  =  TypeToken.get(declaredType.resolve(raw.getType(),  type,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(declaredType.resolve(raw.getType(),  type,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(declaredType.resolve(raw.getType(),  type,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(type.resolve(raw.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
668	[BUG]  [BUGGY]  type  =  TypeToken.get(constructor.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get(constructor.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(constructor.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get(type.resolve(raw.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
669	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  deserialize));  [CE]  cannot  find  symbol  serializedName  [FE]          NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  deserialize));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  serializedName,  deserialize));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  serializedName	2	None	replace
670	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  serialize));  [CE]  cannot  find  symbol  field  [FE]            NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  serialize));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  serialize));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  field	2	None	replace
671	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  serialize));  [CE]  cannot  find  symbol  serialize  [FE]              NullPointerException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  serialize));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  serialize));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    deserialize));    	non-compiled	[CE]  cannot  find  symbol  serialize	2	None	replace
672	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  getConstructor(type.getFieldType());  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  ObjectConstructor  constructor  =  getConstructor(type.getFieldType());  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	ObjectConstructor  constructor  =  getConstructor(type.getFieldType());	          ObjectConstructor    constructor    =    getConstructor(fieldType);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
673	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFieldNames();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                IllegalArgumentException      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  Field[]  fields  =  fieldType.getFieldNames();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	Field[]  fields  =  fieldType.getFieldNames();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }	          Field[]    fieldNames    =    fieldType.getFieldNames();    if(fieldNames    ==    null)    {    result    =    new    Field[fieldNames.size()    ];    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	69	None	replace
674	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  context));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  context));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  context));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	73	None	replace
675	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  name.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  name.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  name.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type,    declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
676	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  reference.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  reference.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  reference.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type,    declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
677	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  raw.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type,    declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
678	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  declaredType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  declaredType.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  declaredType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type,    declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
679	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }      [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  factory.getGenericSuperclass()));  [BUGGY]      raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  field,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type,    declaredType.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
