bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null));  [CE]  cannot  find  symbol  field  [FE]    NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  field	12	None	replace
2	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  deserialize));  [CE]  cannot  find  symbol  deserialize  [FE]      NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  deserialize));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  deserialize));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  deserialize	12	None	replace
3	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  deserialize));  [CE]  cannot  find  symbol  deserialize  [FE]        NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  deserialize));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null,  deserialize));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  deserialize	12	None	replace
4	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldNames));  [CE]  cannot  find  symbol  fieldNames  [FE]          NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldNames));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldNames));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  fieldNames	12	None	replace
5	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  boundField));  [CE]  cannot  find  symbol  boundField  [FE]            NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  boundField));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  boundField));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  boundField	12	None	replace
6	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  null));  [CE]  cannot  find  symbol  boundField  [FE]              NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  null));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  null));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  boundField	12	None	replace
7	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  deserialize);  [CE]  cannot  find  symbol  deserialize  [FE]                NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  deserialize);  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  deserialize);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  deserialize	12	None	replace
8	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	compilable	  [FE]  NullPointerException  	11	9	add
9	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	compilable	  [FE]  NullPointerException  	11	9	add
10	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	11	None	add
11	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	add	type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	compilable	  [FE]  NullPointerException  	11	9	add
12	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	compilable	  [FE]  NullPointerException  	11	9	add
13	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken  type  =  type.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	11	None	add
14	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  Type[]  raw  =  type.getRawType();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  Type[]  raw  =  type.getRawType();  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]  raw  =  type.getRawType();	  	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	11	None	add
15	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  Type[]  raw  =  type.getRawTypes();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  Type[]  raw  =  type.getRawTypes();  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    Type[]  raw  =  type.getRawTypes();	  	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	11	None	add
16	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  [CE]  incompatible  types  [FE]                NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();	  	non-compiled	[CE]  incompatible  types	11	None	add
17	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]        ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  factory.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	10	None	replace
18	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  context.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
19	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  factory  [FE]            ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  factory	10	None	replace
20	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]        ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldType.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	13	None	replace
21	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]          ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  fieldType.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	13	None	replace
22	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  name  [FE]            ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  fieldType.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  name	13	None	replace
23	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  condition.getGenericSuperclass()));  [CE]  cannot  find  symbol  condition  [FE]              ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  condition.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  condition.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    boundField.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  condition	4	None	replace
24	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  field.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    boundField.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	4	None	replace
25	[BUG]  [BUGGY]  type  =  TypeToken.get(result.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get(result.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
26	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
27	[BUG]  [BUGGY]  type  =  TypeToken.get(result.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get(result.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result.resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
28	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(context.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
29	[BUG]  [BUGGY]  type  =  TypeToken.get(resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get(resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(resolve(raw.getType(),  declaredType,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
30	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw,  context.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
31	[BUG]  [BUGGY]  type  =  TypeToken.get(result.resolve(context.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get(result.resolve(context.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(result.resolve(context.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
32	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  result.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  result.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	7	None	replace
33	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  result.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  result.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  result.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
34	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  result,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  result,  field.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  result,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	7	None	replace
35	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  field.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
36	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  context.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
37	[BUG]  [BUGGY]      Field[]  fields  =  type.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      Field[]  fields  =  type.getFields();  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        Field[]  fields  =  type.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
38	[BUG]  [BUGGY]      Field[]  fieldNames  =  type.getFieldNames();  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      Field[]  fieldNames  =  type.getFieldNames();  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        Field[]  fieldNames  =  type.getFieldNames();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
39	[BUG]  [BUGGY]      Field[]  fields  =  field.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      Field[]  fields  =  field.getFields();  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        Field[]  fields  =  field.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
40	[BUG]  [BUGGY]      Field[]  fields  =  fieldType.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      Field[]  fields  =  fieldType.getFields();  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        Field[]  fields  =  fieldType.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
41	[BUG]  [BUGGY]      Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null  ||  fieldNames.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
42	[BUG]  [BUGGY]      Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
43	[BUG]  [BUGGY]      Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        Field[]  fieldNames  =  type.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
44	[BUG]  [BUGGY]      Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
45	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  raw.getGenericSuperclass()));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  raw.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  result,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    raw.getGenericSuperclass()));    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	1	None	replace
46	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  name  [FE]          ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  raw.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  name	1	None	replace
47	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  context,  raw.getGenericSuperclass()));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  context,  raw.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  context,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    raw.getGenericSuperclass()));    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	1	None	replace
48	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  type.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
49	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]            ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	2	None	replace
50	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  field.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
51	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  raw,  field.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type,  declaredType.getType(),  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
52	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  context.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
53	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]            ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  field.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	3	None	replace
54	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  name  [FE]              ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  field.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  name,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  name	3	None	replace
55	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldNamingPolicy.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldNamingPolicy.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldNamingPolicy.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    returned.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
56	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  fieldType.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
57	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  source.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  source.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  source.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
58	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  declaredType.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]              ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  declaredType.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  declaredType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	2	None	replace
59	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(result.getType(),  raw,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(result.getType(),  raw,  type.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(result.getType(),  raw,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    result.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
60	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  type.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]            ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  type.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  type.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	3	None	replace
61	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]              ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  field.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(field.getType(),  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    field.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	3	None	replace
62	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  cannot  find  symbol  field  [FE]    NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor  constructor  =  field.getConstructor();  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));	  	non-compiled	[CE]  cannot  find  symbol  field	11	None	add
63	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  result  =  type.getRawType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	11	None	add
64	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  fieldType.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]        ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  fieldType.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  fieldType.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    fieldType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	13	None	replace
65	[BUG]  [BUGGY]      Field[]  fieldNames  =  field.getFieldNames();  [CE]  cannot  find  symbol  field  [FE]    IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      Field[]  fieldNames  =  field.getFieldNames();  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        Field[]  fieldNames  =  field.getFieldNames();	  	non-compiled	[CE]  cannot  find  symbol  field	8	None	add
66	[BUG]  [BUGGY]      Field[]  fieldNames  =  fieldType.getFieldNames();  [CE]  cannot  find  symbol  fieldType  [FE]      IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      Field[]  fieldNames  =  fieldType.getFieldNames();  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        Field[]  fieldNames  =  fieldType.getFieldNames();	  	non-compiled	[CE]  cannot  find  symbol  fieldType	8	None	add
67	[BUG]  [BUGGY]      Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  field  [FE]        IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }	  	non-compiled	[CE]  cannot  find  symbol  field	8	None	add
68	[BUG]  [BUGGY]      Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  field  [FE]          IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames!=  null)  {  result  =  new  Field[fieldNames.size()  ];  }	  	non-compiled	[CE]  cannot  find  symbol  field	8	None	add
69	[BUG]  [BUGGY]      Field[]  fieldNames  =  fieldType.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  fieldType  [FE]            IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      Field[]  fieldNames  =  fieldType.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        Field[]  fieldNames  =  fieldType.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }	  	non-compiled	[CE]  cannot  find  symbol  fieldType	8	None	add
70	[BUG]  [BUGGY]      Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [CE]  cannot  find  symbol  field  [FE]              IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.length];  }	  	non-compiled	[CE]  cannot  find  symbol  field	8	None	add
71	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  factory.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  factory.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(raw.getType(),  type,  factory.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    factory.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
72	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  boundField  [FE]        ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  raw.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  boundField,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  boundField	1	None	replace
73	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType,  raw.getGenericSuperclass()));  [CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType,  raw.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  method  resolve  in  class  $Gson$Types  cannot  be  applied  to  given  types;	5	None	replace
74	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  fieldType));  [CE]  cannot  find  symbol  fieldType  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  fieldType));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  fieldType));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	5	None	replace
75	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  declaredType,  raw.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  field,  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  field	5	None	replace
76	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  name));  [CE]  cannot  find  symbol  name  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  name));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  name));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  name	5	None	replace
77	[BUG]  [BUGGY]  type  =  TypeToken.get(type.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get(type.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get(type.resolve(raw.getType(),  declaredType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
78	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType));  [CE]  cannot  find  symbol  fieldType  [FE]    NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  fieldType));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  fieldType	12	None	replace
79	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  name));  [CE]  cannot  find  symbol  name  [FE]      NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  name));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  name));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  cannot  find  symbol  name	12	None	replace
80	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  raw.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  field,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
81	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  context.getGenericSuperclass()));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  context.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(declaredType.getType(),  raw,  context.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    declaredType.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
82	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  parent.getGenericSuperclass()));  [CE]  cannot  find  symbol  parent  [FE]              ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  parent.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  parent.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    boundField.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  parent	4	None	replace
83	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  factory,  raw,  field.getGenericSuperclass()));  [CE]  cannot  find  symbol  factory  [FE]                ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  factory,  raw,  field.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  factory,  raw,  field.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    boundField.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  factory	4	None	replace
84	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  factory,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  factory  [FE]        ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  factory,  raw.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  factory,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    field,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  factory	1	None	replace
85	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldType,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldType  [FE]                ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldType,  raw.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldType,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldType	5	None	replace
86	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingStrategy,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingStrategy,  raw.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldNamingStrategy,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	5	None	replace
87	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  fieldName));  [CE]  cannot  find  symbol  fieldName  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  fieldName));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  raw.getGenericSuperclass(),  fieldName));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldName	5	None	replace
88	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldName,  raw.getGenericSuperclass()));  [CE]  cannot  find  symbol  fieldName  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldName,  raw.getGenericSuperclass()));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  declaredType,  fieldName,  raw.getGenericSuperclass()));	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    declaredType,    raw.getGenericSuperclass()));    	non-compiled	[CE]  cannot  find  symbol  fieldName	5	None	replace
89	[BUG]  [BUGGY]      ObjectConstructor  constructor  =  field.getConstructor();  [CE]  cannot  find  symbol  field  [FE]    IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      ObjectConstructor  constructor  =  field.getConstructor();  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        ObjectConstructor  constructor  =  field.getConstructor();	  	non-compiled	[CE]  cannot  find  symbol  field	8	None	add
90	[BUG]  [BUGGY]      ObjectConstructor  constructor  =  context.getObjectConstructor();  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      ObjectConstructor  constructor  =  context.getObjectConstructor();  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        ObjectConstructor  constructor  =  context.getObjectConstructor();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
91	[BUG]  [BUGGY]      Collections.sort(fields);  [CE]  no  suitable  method  found  for  sort(Field[])  [FE]        IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      Collections.sort(fields);  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        Collections.sort(fields);	  	non-compiled	[CE]  no  suitable  method  found  for  sort(Field[])	8	None	add
92	[BUG]  [BUGGY]      ObjectConstructor  constructor  =  getConstructor(fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]          IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      ObjectConstructor  constructor  =  getConstructor(fieldType);  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        ObjectConstructor  constructor  =  getConstructor(fieldType);	  	non-compiled	[CE]  cannot  find  symbol  fieldType	8	None	add
93	[BUG]  [BUGGY]      TypeToken  type  =  field.getType();  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            IllegalArgumentException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]      TypeToken  type  =  field.getType();  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	        TypeToken  type  =  field.getType();	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	add
94	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  [CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  TypeToken  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    TypeToken  type  =  get($Gson$Types.resolve(type.getType(),  raw,  null));	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	11	None	add
95	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  [CE]  cannot  find  symbol  field  [FE]      NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null));  ObjectConstructor  constructor  =  field.getConstructor();  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    ObjectConstructor  constructor  =  field.getConstructor();	  	non-compiled	[CE]  cannot  find  symbol  field	11	None	add
96	[BUG]  [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType);  [CE]  no  suitable  method  found  for  get(Type,Type)  [FE]    NullPointerException    [CONTEXT]    BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }    [BUGGY]  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType);  [BUGGY]    raw  =  type.getRawType();  }  return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	173	173	1	replace	type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  null),  declaredType);	  type    =    TypeToken.get($Gson$Types.resolve(type.getType(),    raw,    null));    	non-compiled	[CE]  no  suitable  method  found  for  get(Type,Type)	12	None	replace
