bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  boundFields.get(name  +  1);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(name  +  1);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(name  +  1);	  result    =    boundFields.get(name);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  result  =  boundFields.get(replacement);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(replacement);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(replacement);	  result    =    boundFields.get(name);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  result  =  boundFields.get(name,  raw);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(name,  raw);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(name,  raw);	  result    =    boundFields.get(name);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  result  =  boundFields.get(field);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(field);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(field);	  result    =    boundFields.get(name);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
5	[BUG]  [BUGGY]  result.put(name,  raw);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  raw);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  raw);	  result.put(name,    boundField);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  result.put(name,  new  BoundField(boundField,  false));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  new  BoundField(boundField,  false));  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  new  BoundField(boundField,  false));	  result.put(name,    boundField);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  result.put(name,  new  BoundField(boundField));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  new  BoundField(boundField));  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  new  BoundField(boundField));	  result.put(name,    boundField);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  result.put(name,  new  BoundField(boundField,  i));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  new  BoundField(boundField,  i));  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  new  BoundField(boundField,  i));	  result.put(name,    boundField);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
10	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
11	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getFields();  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
12	[BUG]  [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getDeclaredFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
13	[BUG]  [BUGGY]  Field[]  fields  =  boundField.getFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  boundField.getFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  boundField.getFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
14	[BUG]  [BUGGY]  Field[]  fieldNames  =  boundField.getFieldNames();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fieldNames  =  boundField.getFieldNames();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fieldNames  =  boundField.getFieldNames();	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
15	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fieldNames  =  type.getFieldNames();	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
16	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(i);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(i);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fieldNames  =  field.getFieldNames(i);	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
17	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(type);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(type);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fieldNames  =  field.getFieldNames(type);	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
18	[BUG]  [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fieldNames  =  context.getFieldNames();	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
19	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(boundField);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(boundField);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fieldNames  =  field.getFieldNames(boundField);	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
20	[BUG]  [BUGGY]  result.put(type,  fieldType);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(type,  fieldType);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(type,  fieldType);	  result.put(name,    fieldType);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
21	[BUG]  [BUGGY]  result.put(name,  fieldType));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  fieldType));  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  fieldType));	  result.put(name,    fieldType);    	non-compiled	[CE]  ';'  expected	11	None	replace
22	[BUG]  [BUGGY]  result.put(name,  declaredType);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  declaredType);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  declaredType);	  result.put(name,    fieldType);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
23	[BUG]  [BUGGY]  result  =  boundFields.get(type,  raw);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(type,  raw);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(type,  raw);	  result    =    boundFields.get(type);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
24	[BUG]  [BUGGY]  result  =  boundFields.get(fieldType);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(fieldType);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(fieldType);	  result    =    boundFields.get(type);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
25	[BUG]  [BUGGY]  result  =  boundFields.get(declaredType);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(declaredType);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(declaredType);	  result    =    boundFields.get(type);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
26	[BUG]  [BUGGY]  result.put(name,  field);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  field);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  field);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  result.put(name,    boundField);    if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
27	[BUG]  [BUGGY]  result.put(name,  type);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  type);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  type);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  result.put(name,    boundField);    if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
28	[BUG]  [BUGGY]  result.put(name,  boundField);  if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  boundField);  if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  boundField);  if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }	  result.put(name,    boundField);    if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
29	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  type.getFields();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  type.getFields();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
30	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  result  =  new  Field[fields.size()  ];  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  type.getFields();  result  =  new  Field[fields.size()  ];  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  type.getFields();  result  =  new  Field[fields.size()  ];	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
31	[BUG]  [BUGGY]  result.put(type,  name);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(type,  name);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(type,  name);	  result.put(name,    type);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
32	[BUG]  [BUGGY]  result.put(name,  new  TypeToken(type,  fieldType));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  new  TypeToken(type,  fieldType));  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  new  TypeToken(type,  fieldType));	  result.put(name,    type);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
33	[BUG]  [BUGGY]  result.put(name,  field);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  field);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  field);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  result.put(name,    boundField);    if(replaced    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
34	[BUG]  [BUGGY]  result.put(name,  type);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  type);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  type);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  result.put(name,    boundField);    if(replaced    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
35	[BUG]  [BUGGY]  result.put(name,  boundField);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  boundField);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  boundField);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }	  result.put(name,    boundField);    if(replaced    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
36	[BUG]  [BUGGY]  Field[]  fields  =  boundField.getFields();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  boundField.getFields();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  boundField.getFields();	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
37	[BUG]  [BUGGY]  Field[]  fields  =  boundFields.getFields();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  boundFields.getFields();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  boundFields.getFields();	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
38	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  context.getFields();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  context.getFields();	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
39	[BUG]  [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getDeclaredFields();	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
40	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields(type);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getFields(type);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getFields(type);	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
41	[BUG]  [BUGGY]  result  =  boundFields.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(i  +  1);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(i  +  1);	  result    =    boundFields.get(i);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
42	[BUG]  [BUGGY]  result  =  boundFields.get(i  -  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(i  -  1);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(i  -  1);	  result    =    boundFields.get(i);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
43	[BUG]  [BUGGY]  result  =  fieldNames.get(i);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  fieldNames.get(i);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  fieldNames.get(i);	  result    =    boundFields.get(i);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
44	[BUG]  [BUGGY]  result  =  boundFields.get(i,  raw);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(i,  raw);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(i,  raw);	  result    =    boundFields.get(i);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  result  =  boundFields.get(i++);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(i++);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(i++);	  result    =    boundFields.get(i);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
46	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  context.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
47	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
48	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
49	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
50	[BUG]  [BUGGY]  Field[]  fields  =  boundField.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  boundField.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  boundField.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
51	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
52	[BUG]  [BUGGY]  result  =  fieldType.getRawType();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  fieldType.getRawType();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  fieldType.getRawType();	  result    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
53	[BUG]  [BUGGY]  result  =  boundField.getRawType();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundField.getRawType();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundField.getRawType();	  result    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
54	[BUG]  [BUGGY]  result  =  field.getRawType();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  field.getRawType();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  field.getRawType();	  result    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
55	[BUG]  [BUGGY]  result  =  context.getRawType();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  context.getRawType();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  context.getRawType();	  result    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
56	[BUG]  [BUGGY]  result  =  type.getFunctionType();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  type.getFunctionType();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  type.getFunctionType();	  result    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
57	[BUG]  [BUGGY]  result  =  type.getResultType();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  type.getResultType();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  type.getResultType();	  result    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
58	[BUG]  [BUGGY]  result  =  boundFields.get(i,  previous);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(i,  previous);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(i,  previous);	  result    =    boundFields.get(name,    previous);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
59	[BUG]  [BUGGY]  result  =  boundFields.get(name,  field);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(name,  field);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(name,  field);	  result    =    boundFields.get(name,    previous);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
60	[BUG]  [BUGGY]  result  =  boundFields.get(name,  type);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(name,  type);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(name,  type);	  result    =    boundFields.get(name,    previous);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
61	[BUG]  [BUGGY]  result  =  boundFields.get(name,  previous,  fieldType);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(name,  previous,  fieldType);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(name,  previous,  fieldType);	  result    =    boundFields.get(name,    previous);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
62	[BUG]  [BUGGY]  result  =  boundFields.get(name,  previous,  raw);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(name,  previous,  raw);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(name,  previous,  raw);	  result    =    boundFields.get(name,    previous);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
63	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  context.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
64	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
65	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getFields();  if(fields!=  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
66	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
67	[BUG]  [BUGGY]  Field[]  fields  =  boundField.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  boundField.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  boundField.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
68	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.size()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.size()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.size()!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
69	[BUG]  [BUGGY]  result.put(name,  fieldNamingPolicy);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  fieldNamingPolicy);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  fieldNamingPolicy);	  result.put(name,    field);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
70	[BUG]  [BUGGY]  result.put(field,  name);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(field,  name);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(field,  name);	  result.put(name,    field);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
71	[BUG]  [BUGGY]  result.put(name,  field.getDeclaredType());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  field.getDeclaredType());  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  field.getDeclaredType());	  result.put(name,    field);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
72	[BUG]  [BUGGY]  result.put(name,  field.getRawType());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  field.getRawType());  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  field.getRawType());	  result.put(name,    field);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
73	[BUG]  [BUGGY]  result  =  boundFields.get(i,  field);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(i,  field);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(i,  field);	  result    =    boundFields.get(i,    type);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
74	[BUG]  [BUGGY]  result  =  boundFields.get(i,  type,  raw);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(i,  type,  raw);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(i,  type,  raw);	  result    =    boundFields.get(i,    type);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
75	[BUG]  [BUGGY]  result  =  boundFields.get(i,  fieldType);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(i,  fieldType);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(i,  fieldType);	  result    =    boundFields.get(i,    type);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
76	[BUG]  [BUGGY]  result  =  fieldNames.get(i,  type);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  fieldNames.get(i,  type);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  fieldNames.get(i,  type);	  result    =    boundFields.get(i,    type);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
77	[BUG]  [BUGGY]  result  =  boundFields.get(type,  i);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(type,  i);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(type,  i);	  result    =    boundFields.get(i,    type);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
78	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields(raw);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getFields(raw);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getFields(raw);	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
79	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields(boundField);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getFields(boundField);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getFields(boundField);	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
80	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  fieldType.getFields();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  fieldType.getFields();	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
81	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  boundFields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  boundFields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  boundFields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
82	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  raw.getFields();  if(fields  ==  null  ||  fields.size()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.size()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
83	[BUG]  [BUGGY]  result  =  fieldNames.get(name);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  fieldNames.get(name);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  fieldNames.get(name);	  result    =    boundFields.get(name);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
84	[BUG]  [BUGGY]  result  =  fieldNames.get(type);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  fieldNames.get(type);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  fieldNames.get(type);	  result    =    boundFields.get(type);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
85	[BUG]  [BUGGY]  result  =  boundFields.get(removed);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(removed);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(removed);	  result    =    boundFields.get(type);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
86	[BUG]  [BUGGY]  result  =  boundFields.get(raw);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(raw);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(raw);	  result    =    boundFields.get(type);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
87	[BUG]  [BUGGY]  result.put(name,  new  BoundField(fieldNamingPolicy.getType()));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  new  BoundField(fieldNamingPolicy.getType()));  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  new  BoundField(fieldNamingPolicy.getType()));	  result.put(name,    boundField);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
88	[BUG]  [BUGGY]  result.put(name,  new  BoundField(fieldNamingPolicy.getType()),  boundField);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  new  BoundField(fieldNamingPolicy.getType()),  boundField);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  new  BoundField(fieldNamingPolicy.getType()),  boundField);	  result.put(name,    boundField);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
89	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getConstructor();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  ObjectConstructor  constructor  =  field.getConstructor();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	ObjectConstructor  constructor  =  field.getConstructor();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
90	[BUG]  [BUGGY]  TypeToken  result  =  type.getGenericType();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  TypeToken  result  =  type.getGenericType();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	TypeToken  result  =  type.getGenericType();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
91	[BUG]  [BUGGY]  result.put(name,  new  TypeToken(fieldType));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  new  TypeToken(fieldType));  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  new  TypeToken(fieldType));	  result.put(name,    type);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
92	[BUG]  [BUGGY]  result.put(name,  new  TypeToken(type));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  new  TypeToken(type));  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  new  TypeToken(type));	  result.put(name,    type);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
93	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  raw.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
94	[BUG]  [BUGGY]  result  =  fields.get(i);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  fields.get(i);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  fields.get(i);	  result    =    boundFields.get(i);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
95	[BUG]  [BUGGY]  result  =  boundFields.get(replacements[i]);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(replacements[i]);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(replacements[i]);	  result    =    boundFields.get(i);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
96	[BUG]  [BUGGY]  Field[]  resultFieldNames  =  field.getFieldNames();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  resultFieldNames  =  field.getFieldNames();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  resultFieldNames  =  field.getFieldNames();	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
97	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(raw);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fieldNames  =  field.getFieldNames(raw);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fieldNames  =  field.getFieldNames(raw);	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
98	[BUG]  [BUGGY]  result  =  raw.getRawType();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  raw.getRawType();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  raw.getRawType();	  result    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
99	[BUG]  [BUGGY]  result  =  type.getGenericReturnType();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  type.getGenericReturnType();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  type.getGenericReturnType();	  result    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
100	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
101	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
102	[BUG]  [BUGGY]  result.put(name,  raw);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  raw);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  raw);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  result.put(name,    boundField);    if(replaced    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
103	[BUG]  [BUGGY]  result.put(name,  null);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  null);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  null);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  result.put(name,    boundField);    if(replaced    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
104	[BUG]  [BUGGY]  result.put(name,  raw);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  raw);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  raw);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  result.put(name,    boundField);    if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
105	[BUG]  [BUGGY]  result.put(name,  null);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  null);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  null);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  result.put(name,    boundField);    if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
106	[BUG]  [BUGGY]  result  =  boundFields.get(raw,  type);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(raw,  type);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(raw,  type);	  result    =    boundFields.get(i,    type);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
107	[BUG]  [BUGGY]  result  =  fields.get(i,  type);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  fields.get(i,  type);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  fields.get(i,  type);	  result    =    boundFields.get(i,    type);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
108	[BUG]  [BUGGY]  result  =  boundFields.get(field,  type);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(field,  type);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(field,  type);	  result    =    boundFields.get(i,    type);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
109	[BUG]  [BUGGY]  result  =  boundFields.get(i  +  1,  type);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(i  +  1,  type);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(i  +  1,  type);	  result    =    boundFields.get(i,    type);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
110	[BUG]  [BUGGY]  result.put(fieldType,  name);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(fieldType,  name);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(fieldType,  name);	  result.put(name,    fieldType);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
111	[BUG]  [BUGGY]  result  =  boundFields.get(previous,  name);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(previous,  name);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(previous,  name);	  result    =    boundFields.get(name,    previous);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
112	[BUG]  [BUGGY]  result  =  fieldNames.get(name,  previous);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  fieldNames.get(name,  previous);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  fieldNames.get(name,  previous);	  result    =    boundFields.get(name,    previous);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
113	[BUG]  [BUGGY]  result  =  replacement.get(name,  previous);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  replacement.get(name,  previous);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  replacement.get(name,  previous);	  result    =    boundFields.get(name,    previous);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
114	[BUG]  [BUGGY]  result  =  boundFields.get(replacement,  previous);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(replacement,  previous);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(replacement,  previous);	  result    =    boundFields.get(name,    previous);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
115	[BUG]  [BUGGY]  result  =  replacementFields.get(name,  previous);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  replacementFields.get(name,  previous);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  replacementFields.get(name,  previous);	  result    =    boundFields.get(name,    previous);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
116	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldType.getFieldNames();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fieldNames  =  fieldType.getFieldNames();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fieldNames  =  fieldType.getFieldNames();	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
117	[BUG]  [BUGGY]  Field[]  fieldNames  =  row.getFieldNames();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fieldNames  =  row.getFieldNames();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fieldNames  =  row.getFieldNames();	  Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
118	[BUG]  [BUGGY]  result  =  replaced.get(i);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  replaced.get(i);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  replaced.get(i);	  result    =    boundFields.get(i);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
119	[BUG]  [BUGGY]  result  =  replaced.get(name,  previous);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  replaced.get(name,  previous);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  replaced.get(name,  previous);	  result    =    boundFields.get(name,    previous);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
120	[BUG]  [BUGGY]  result  =  boundFields.get(name,  replaced);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  boundFields.get(name,  replaced);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  boundFields.get(name,  replaced);	  result    =    boundFields.get(name,    previous);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
121	[BUG]  [BUGGY]  result  =  replacements.get(name,  previous);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  replacements.get(name,  previous);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  replacements.get(name,  previous);	  result    =    boundFields.get(name,    previous);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
122	[BUG]  [BUGGY]  result.put(name,  new  Field(fieldType));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  new  Field(fieldType));  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  new  Field(fieldType));	  result.put(name,    fieldType);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
123	[BUG]  [BUGGY]  result.put(name,  fieldNamingStrategy);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  fieldNamingStrategy);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  fieldNamingStrategy);	  result.put(name,    fieldType);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
124	[BUG]  [BUGGY]  result  =  replaced.getRawType();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  replaced.getRawType();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  replaced.getRawType();	  result    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
125	[BUG]  [BUGGY]  result  =  new  TypeToken(type.getRawType(),  fieldType);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  new  TypeToken(type.getRawType(),  fieldType);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  new  TypeToken(type.getRawType(),  fieldType);	  result    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
126	[BUG]  [BUGGY]  result  =  replacement.getRawType();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  replacement.getRawType();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  replacement.getRawType();	  result    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
127	[BUG]  [BUGGY]  result.put(name,  replaced);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  replaced);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  replaced);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  result.put(name,    boundField);    if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
128	[BUG]  [BUGGY]  result.put(name,  replacement);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  replacement);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  replacement);  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  result.put(name,    boundField);    if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
129	[BUG]  [BUGGY]  result.put(name,  new  BoundField(boundField));  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  new  BoundField(boundField));  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  new  BoundField(boundField));  if(replaced!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  result.put(name,    boundField);    if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
130	[BUG]  [BUGGY]  result  =  replaced.get(i,  type);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  replaced.get(i,  type);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  replaced.get(i,  type);	  result    =    boundFields.get(i,    type);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
131	[BUG]  [BUGGY]  result  =  replacement.get(i,  type);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  replacement.get(i,  type);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  replacement.get(i,  type);	  result    =    boundFields.get(i,    type);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
132	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.getFields();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  fieldNames.getFields();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  fieldNames.getFields();	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
133	[BUG]  [BUGGY]  Field[]  fields  =  row.getFields();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  row.getFields();  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  row.getFields();	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
134	[BUG]  [BUGGY]  result.put(name,  new  Field(field));  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  new  Field(field));  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  new  Field(field));	  result.put(name,    field);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
135	[BUG]  [BUGGY]  result.put(name,  new  Field(field.getType()));  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  new  Field(field.getType()));  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  new  Field(field.getType()));	  result.put(name,    field);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
136	[BUG]  [BUGGY]  result.put(name,  field).remove(field);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  field).remove(field);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  field).remove(field);	  result.put(name,    field);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
137	[BUG]  [BUGGY]  result.put(name,  new  TypeToken(type),  boundField);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  new  TypeToken(type),  boundField);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  new  TypeToken(type),  boundField);	  result.put(name,    type);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
138	[BUG]  [BUGGY]  result.put(name,  new  TypeToken(fieldType),  type);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  new  TypeToken(fieldType),  type);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  new  TypeToken(fieldType),  type);	  result.put(name,    type);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
139	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  Field[fieldNames.size()  ];  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
140	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  result  =  new  Field[fields.size()  ];  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
141	[BUG]  [BUGGY]  fieldNames.put(name,  boundField);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  fieldNames.put(name,  boundField);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	fieldNames.put(name,  boundField);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
142	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	Field[]  fields  =  field.getFields();  if(fields!=  null)  {  result  =  new  Field[fields.size()  ];  }	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
143	[BUG]  [BUGGY]  result.put(name,  replaced);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  replaced);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  replaced);	  result.put(name,    boundField);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
144	[BUG]  [BUGGY]  result  =  replaced.get(name);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  replaced.get(name);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  replaced.get(name);	  result    =    boundFields.get(name);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
145	[BUG]  [BUGGY]  result  =  replacement.get(name);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  replacement.get(name);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  replacement.get(name);	  result    =    boundFields.get(name);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
146	[BUG]  [BUGGY]  result.put(name,  replaced);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  replaced);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  replaced);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  result.put(name,    boundField);    if(replaced    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
147	[BUG]  [BUGGY]  result.put(name,  replacement);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result.put(name,  replacement);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result.put(name,  replacement);  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  result.put(name,    boundField);    if(replaced    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
148	[BUG]  [BUGGY]  result  =  replaced.get(type);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  replaced.get(type);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  replaced.get(type);	  result    =    boundFields.get(type);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
149	[BUG]  [BUGGY]  result  =  replacement.get(type);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();    [BUGGY]  result  =  replacement.get(type);  [BUGGY]    return  result;  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	175	175	1	replace	result  =  replacement.get(type);	  result    =    boundFields.get(type);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
