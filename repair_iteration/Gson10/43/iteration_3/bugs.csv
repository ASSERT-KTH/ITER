bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  previous;  [CE]  cannot  find  symbol  Previous  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    if(Previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  Previous	37	None	replace
2	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  replaced;  [CE]  cannot  find  symbol  Previous  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  replaced;	  if(previous    ==    null)replaced    =    boundField;    if(Previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  Previous	37	None	replace
3	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  predecessor;  [CE]  cannot  find  symbol  Previous  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  predecessor;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  predecessor;	  if(previous    ==    null)replaced    =    boundField;    if(Previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  Previous	37	None	replace
4	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  original;  [CE]  cannot  find  symbol  Previous  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  original;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  original;	  if(previous    ==    null)replaced    =    boundField;    if(Previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  Previous	37	None	replace
5	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  substituted;  [CE]  cannot  find  symbol  Previous  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  substituted;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  substituted;	  if(previous    ==    null)replaced    =    boundField;    if(Previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  Previous	37	None	replace
6	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  original;  [CE]  cannot  find  symbol  original  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  original;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  original;	  if(previous    ==    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  original	32	None	replace
7	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replaced;	  if(previous    ==    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	32	1	replace
8	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replaced;	  if(previous    ==    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	32	1	replace
9	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  original;  [CE]  cannot  find  symbol  original  [FE]        IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  original;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  original;	  if(previous    ==    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  original	32	None	replace
10	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	32	1	replace
11	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]          IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	32	1	replace
12	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  new  BoundField(field,  replaced);  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]            IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  new  BoundField(field,  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  new  BoundField(field,  replaced);	  if(previous    ==    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	32	None	replace
13	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous    ==    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	69	1	add
14	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous    ==    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	69	1	add
15	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous    ==    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	69	1	add
16	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous    ==    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	69	1	add
17	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  replaced;  If(previous  ==  null)replaced  =  replaced;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  If(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous    ==    null)replaced    =    replaced;    If(previous  ==  null)replaced  =  replaced;	  	non-compiled	[CE]  ';'  expected	69	None	add
18	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous  >=  null)replaced  =  replaced;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous  >=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous    ==    null)replaced    =    replaced;    if(previous  >=  null)replaced  =  replaced;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	69	None	add
19	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]            ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous    ==    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replacement;	  	non-compiled	[CE]  cannot  find  symbol  replacement	69	None	add
20	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField[fieldNames.size()  -  1];  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField[fieldNames.size()  -  1];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField[fieldNames.size()  -  1];	  if(replaced    ==    null)replaced    =    new    BoundField[fieldNames.size()    ];    	non-compiled	[CE]  incompatible  types	3	None	replace
21	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField[fieldNames.size()  +  1];  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField[fieldNames.size()  +  1];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField[fieldNames.size()  +  1];	  if(replaced    ==    null)replaced    =    new    BoundField[fieldNames.size()    ];    	non-compiled	[CE]  incompatible  types	3	None	replace
22	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField[fieldNames.size()  ],  declaredType;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField[fieldNames.size()  ],  declaredType;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField[fieldNames.size()  ],  declaredType;	  if(replaced    ==    null)replaced    =    new    BoundField[fieldNames.size()    ];    	non-compiled	[CE]  ';'  expected	3	None	replace
23	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  -  1];  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  -  1];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  -  1];	  if(replaced!=    null)replaced    =    new    BoundField[fieldNames.size()    ];    	non-compiled	[CE]  incompatible  types	1	None	replace
24	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  +  1];  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  +  1];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  +  1];	  if(replaced!=    null)replaced    =    new    BoundField[fieldNames.size()    ];    	non-compiled	[CE]  incompatible  types	1	None	replace
25	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=    null)replaced    =    boundField;    if(replaced!=  null)replaced  =  boundField;	  	compilable	  [FE]  ComparisonFailure  	65	1	add
26	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  boundField;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    boundField;    if(replaced!=  null)replaced  =  boundField;	  	compilable	  [FE]  ComparisonFailure  	65	1	add
27	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=    null)replaced    =    boundField;    if(replaced  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	65	9	add
28	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  boundField;  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    boundField;    if(replaced  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	65	9	add
29	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  If(replaced!=  null)replaced  =  boundField;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  If(replaced!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    boundField;    If(replaced!=  null)replaced  =  boundField;	  	non-compiled	[CE]  ';'  expected	65	None	add
30	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced  >=  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced  >=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    boundField;    if(replaced  >=  null)replaced  =  boundField;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	65	None	add
31	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced  >>  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced  >>  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    boundField;    if(replaced  >>  null)replaced  =  boundField;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	65	None	add
32	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced  [BUGGY]  null)replaced  =  boundField;  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced  [BUGGY]  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    boundField;    if(replaced  [BUGGY]  null)replaced  =  boundField;	  	non-compiled	[CE]  ')'  expected	65	None	add
33	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  deserialize);  [CE]  cannot  find  symbol  BindField  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  deserialize);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  deserialize);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    original);    	non-compiled	[CE]  cannot  find  symbol  BindField	75	None	replace
34	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type);  [CE]  cannot  find  symbol  BindField  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    original);    	non-compiled	[CE]  cannot  find  symbol  BindField	75	None	replace
35	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  serializedName);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  serializedName);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    original);    	non-compiled	[CE]  cannot  find  symbol  serializedName	75	None	replace
36	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  subtypes);  [CE]  cannot  find  symbol  subtypes  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  subtypes);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  subtypes);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    original);    	non-compiled	[CE]  cannot  find  symbol  subtypes	75	None	replace
37	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  serialize);  [CE]  cannot  find  symbol  BindField  [FE]                          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  serialize);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  serialize);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    original);    	non-compiled	[CE]  cannot  find  symbol  BindField	75	None	replace
38	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	21	1	replace
39	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	21	1	replace
40	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  previous;	  if(previous!=    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	21	1	replace
41	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  previous;	  if(previous!=    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	21	1	replace
42	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]        IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replacement;	  if(previous!=    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  replacement	21	None	replace
43	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  new  BoundField(field,  replaced);  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]          IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  new  BoundField(field,  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  new  BoundField(field,  replaced);	  if(previous!=    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	21	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	42	None	replace
45	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  }  [CE]  '.class'  expected  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    }    	non-compiled	[CE]  '.class'  expected	42	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	42	None	replace
47	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  }  [CE]  '.class'  expected  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    }    	non-compiled	[CE]  '.class'  expected	42	None	replace
48	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  current;  [CE]  cannot  find  symbol  current  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  current;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  current;	  if(previous!=    null)removed    =    current;    	non-compiled	[CE]  cannot  find  symbol  current	99	None	replace
49	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaced);  }  [CE]  '.class'  expected  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaced);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaced);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    boundField);    }    	non-compiled	[CE]  '.class'  expected	40	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaced);  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaced);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaced);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    boundField);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
51	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  boundField);  }  [CE]  '.class'  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  boundField);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  boundField);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    boundField);    }    	non-compiled	[CE]  '.class'  expected	40	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  boundField);  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  boundField);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  boundField);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    boundField);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
53	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replacement);  }  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replacement);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replacement);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    boundField);    }    	non-compiled	[CE]  '.class'  expected	40	None	replace
54	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  field;  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  field;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  field;	  if(previous!=    null)removed    =    field;    	non-compiled	[CE]  incompatible  types	13	None	replace
55	[BUG]  [BUGGY]  if(previous!=  null)removed  =  field.getRawType();  [CE]  cannot  find  symbol  removed  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)removed  =  field.getRawType();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)removed  =  field.getRawType();	  if(previous!=    null)removed    =    field;    	non-compiled	[CE]  cannot  find  symbol  removed	13	None	replace
56	[BUG]  [BUGGY]  if(previous!=  null)removed  =  field.type;  [CE]  cannot  find  symbol  removed  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)removed  =  field.type;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)removed  =  field.type;	  if(previous!=    null)removed    =    field;    	non-compiled	[CE]  cannot  find  symbol  removed	13	None	replace
57	[BUG]  [BUGGY]  if(previous!=  null)removed  =  fieldType;  [CE]  cannot  find  symbol  removed  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)removed  =  fieldType;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)removed  =  fieldType;	  if(previous!=    null)removed    =    field;    	non-compiled	[CE]  cannot  find  symbol  removed	13	None	replace
58	[BUG]  [BUGGY]  if(previous!=  null)removed  =  field.cloneTree();  [CE]  cannot  find  symbol  removed  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)removed  =  field.cloneTree();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)removed  =  field.cloneTree();	  if(previous!=    null)removed    =    field;    	non-compiled	[CE]  cannot  find  symbol  removed	13	None	replace
59	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replaced.get(i);  }  [CE]  '.class'  expected  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replaced.get(i);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replaced.get(i);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous    =    replaced.get(i);    }    	non-compiled	[CE]  '.class'  expected	91	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replaced.get(i);  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replaced.get(i);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replaced.get(i);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous    =    replaced.get(i);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	91	None	replace
61	[BUG]  [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replaced.get(i);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replaced.get(i);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replaced.get(i);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous    =    replaced.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
62	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replacement.get(i);  }  [CE]  '.class'  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replacement.get(i);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replacement.get(i);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous    =    replaced.get(i);    }    	non-compiled	[CE]  '.class'  expected	91	None	replace
63	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  substituted.get(i);  }  [CE]  '.class'  expected  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  substituted.get(i);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  substituted.get(i);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous    =    replaced.get(i);    }    	non-compiled	[CE]  '.class'  expected	91	None	replace
64	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  predecessor.get(i);  }  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  predecessor.get(i);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  predecessor.get(i);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous    =    replaced.get(i);    }    	non-compiled	[CE]  '.class'  expected	91	None	replace
65	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced  ==  null)replaced  =  replaced;	  if(replaced    ==    null)replaced;    	compilable	  [FE]  ComparisonFailure  	28	1	replace
66	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  replaced;	  if(replaced    ==    null)replaced;    	compilable	  [FE]  ComparisonFailure  	28	1	replace
67	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  HashMap  <  String,  JSON>();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  HashMap  <  String,  JSON>();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  HashMap  <  String,  JSON>();	  if(replaced    ==    null)replaced;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
68	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  HashMap  <  String,  BoundField>();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  HashMap  <  String,  BoundField>();	  if(replaced    ==    null)replaced;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
69	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  HashMap  <  String,  JSON>();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  HashMap  <  String,  JSON>();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  HashMap  <  String,  JSON>();	  if(replaced    ==    null)replaced;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
70	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    if(previous!=    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
71	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    if(previous!=    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
72	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  original;  [CE]  cannot  find  symbol  original  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  original;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  original;	  if(previous    ==    null)replaced    =    boundField;    if(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  original	34	None	replace
73	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    if(previous!=    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
74	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    if(previous!=    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
75	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  original;  [CE]  cannot  find  symbol  original  [FE]          IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  original;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  original;	  if(previous    ==    null)replaced    =    boundField;    if(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  original	34	None	replace
76	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  original;  [CE]  cannot  find  symbol  original  [FE]            IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  original;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  original;	  if(previous    ==    null)replaced    =    boundField;    if(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  original	34	None	replace
77	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;	  if(previous    ==    null)replaced    =    boundField;    if(previous!=    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
78	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]              IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;	  if(previous    ==    null)replaced    =    boundField;    if(previous!=    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
79	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getSuperclass();  }  [CE]  '.class'  expected  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getSuperclass();  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getSuperclass();  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getSuperclass();    }    	non-compiled	[CE]  '.class'  expected	46	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getSuperclass();  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getSuperclass();  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getSuperclass();  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getSuperclass();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	46	None	replace
81	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getSuperclass();  }  [CE]  '.class'  expected  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getSuperclass();  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getSuperclass();  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getSuperclass();    }    	non-compiled	[CE]  '.class'  expected	46	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getSuperclass();  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getSuperclass();  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getSuperclass();  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getSuperclass();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	46	None	replace
83	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getSuperclass();  [CE]  '.class'  expected  [FE]                            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getSuperclass();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getSuperclass();	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getSuperclass();    }    	non-compiled	[CE]  '.class'  expected	46	None	replace
84	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  types.getSuperclass();  }  [CE]  '.class'  expected  [FE]                              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  types.getSuperclass();  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  types.getSuperclass();  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getSuperclass();    }    	non-compiled	[CE]  '.class'  expected	46	None	replace
85	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=  null)replaced  =  previous;	  if(previous!=    null)removed    =    previous;    	compilable	  [FE]  ComparisonFailure  	15	1	replace
86	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  previous;	  if(previous!=    null)removed    =    previous;    	compilable	  [FE]  ComparisonFailure  	15	1	replace
87	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;  [BUGGY]    null)replaced  =  boundField;  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    boundField;    if(previous    	compilable	  [FE]  ComparisonFailure  	25	1	replace
88	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;  [BUGGY]    null)replaced  =  boundField;  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    boundField;    if(previous    	compilable	  [FE]  ComparisonFailure  	25	1	replace
89	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  original;  [CE]  cannot  find  symbol  original  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  original;  [BUGGY]    null)replaced  =  boundField;  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  original;	  if(previous!=    null)replaced    =    boundField;    if(previous    	non-compiled	[CE]  cannot  find  symbol  original	25	None	replace
90	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  replaced;  [BUGGY]    null)replaced  =  boundField;  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    boundField;    if(previous    	compilable	  [FE]  ComparisonFailure  	25	1	replace
91	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  replaced;  [BUGGY]    null)replaced  =  boundField;  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    boundField;    if(previous    	compilable	  [FE]  ComparisonFailure  	25	1	replace
92	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  replaced;  [BUGGY]    null)replaced  =  boundField;  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    boundField;    if(previous    	compilable	  [FE]  ComparisonFailure  	25	1	replace
93	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  replaced;  [BUGGY]    null)replaced  =  boundField;  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    boundField;    if(previous    	compilable	  [FE]  ComparisonFailure  	25	1	replace
94	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserialize);  [CE]  cannot  find  symbol  BindField  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserialize);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserialize);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serialize,    boundField);    	non-compiled	[CE]  cannot  find  symbol  BindField	8	None	replace
95	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserialize);  [CE]  cannot  find  symbol  BindField  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserialize);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserialize);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serialize,    boundField);    	non-compiled	[CE]  cannot  find  symbol  BindField	8	None	replace
96	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  replaced);  [CE]  cannot  find  symbol  BindField  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  replaced);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serialize,    boundField);    	non-compiled	[CE]  cannot  find  symbol  BindField	8	None	replace
97	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserialize);  [CE]  cannot  find  symbol  BindField  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserialize);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserialize);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serialize,    boundField);    	non-compiled	[CE]  cannot  find  symbol  BindField	8	None	replace
98	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  boundField);  [CE]  cannot  find  symbol  BindField  [FE]                          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  boundField);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serialize,    boundField);    	non-compiled	[CE]  cannot  find  symbol  BindField	8	None	replace
99	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  original);  [CE]  cannot  find  symbol  original  [FE]                            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  original);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  original);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serialize,    boundField);    	non-compiled	[CE]  cannot  find  symbol  original	8	None	replace
100	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  predecessor;  [CE]  cannot  find  symbol  predecessor  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  predecessor;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  predecessor;	  if(previous    ==    null)replaced    =    boundField;    if(previous    >>    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  predecessor	38	None	replace
101	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;	  if(previous    ==    null)replaced    =    boundField;    if(previous    >>    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	38	1	replace
102	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;	  if(previous    ==    null)replaced    =    boundField;    if(previous    >>    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	38	1	replace
103	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    if(previous    >>    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	38	1	replace
104	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    if(previous    >>    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	38	1	replace
105	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replacement;	  if(previous    ==    null)replaced    =    boundField;    if(previous    >>    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  replacement	38	None	replace
106	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  predecessor;  [CE]  cannot  find  symbol  predecessor  [FE]                          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  predecessor;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  predecessor;	  if(previous    ==    null)replaced    =    boundField;    if(previous    >>    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  predecessor	38	None	replace
107	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  original;  [CE]  cannot  find  symbol  original  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  original;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  original;	  if(replaced    ==    null)replaced    =    previous;    	non-compiled	[CE]  cannot  find  symbol  original	63	None	replace
108	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced    ==    null)replaced    =    previous;    if(replaced  ==  null)replaced  =  previous;	  	compilable	  [FE]  ComparisonFailure  	62	1	add
109	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    previous;    if(replaced  ==  null)replaced  =  previous;	  	compilable	  [FE]  ComparisonFailure  	62	1	add
110	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  previous;  if(replaced!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced    ==    null)replaced    =    previous;    if(replaced!=  null)replaced  =  previous;	  	compilable	  [FE]  ComparisonFailure  	62	1	add
111	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  previous;  if(replaced!=  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  previous;  if(replaced!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    previous;    if(replaced!=  null)replaced  =  previous;	  	compilable	  [FE]  ComparisonFailure  	62	1	add
112	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  previous;  If(replaced  ==  null)replaced  =  previous;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  previous;  If(replaced  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    previous;    If(replaced  ==  null)replaced  =  previous;	  	non-compiled	[CE]  ';'  expected	62	None	add
113	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  previous;  if(replaced  >=  null)replaced  =  previous;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  previous;  if(replaced  >=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    previous;    if(replaced  >=  null)replaced  =  previous;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	62	None	add
114	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  previous;  if(replaced  >>  null)replaced  =  previous;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  previous;  if(replaced  >>  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    previous;    if(replaced  >>  null)replaced  =  previous;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	62	None	add
115	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=    null)replaced    =    previous;    if(replaced!=  null)replaced  =  previous;	  	compilable	  [FE]  ComparisonFailure  	58	1	add
116	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced!=  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    previous;    if(replaced!=  null)replaced  =  previous;	  	compilable	  [FE]  ComparisonFailure  	58	1	add
117	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=    null)replaced    =    previous;    if(replaced  ==  null)replaced  =  previous;	  	compilable	  [FE]  ComparisonFailure  	58	1	add
118	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    previous;    if(replaced  ==  null)replaced  =  previous;	  	compilable	  [FE]  ComparisonFailure  	58	1	add
119	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  previous;  If(replaced!=  null)replaced  =  previous;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  previous;  If(replaced!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    previous;    If(replaced!=  null)replaced  =  previous;	  	non-compiled	[CE]  ';'  expected	58	None	add
120	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced  >=  null)replaced  =  previous;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced  >=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    previous;    if(replaced  >=  null)replaced  =  previous;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	58	None	add
121	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced  >>  null)replaced  =  previous;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced  >>  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    previous;    if(replaced  >>  null)replaced  =  previous;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	58	None	add
122	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced  [BUGGY]  null)replaced  =  previous;  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced  [BUGGY]  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    previous;    if(replaced  [BUGGY]  null)replaced  =  previous;	  	non-compiled	[CE]  ')'  expected	58	None	add
123	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  previous;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=  null)replaced  =  previous;  if(previous!=  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replacement;    	compilable	  [FE]  ComparisonFailure  	57	1	replace
124	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  previous;  if(previous!=  null)replaced  =  boundField;  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  previous;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  previous;  if(previous!=  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replacement;    	compilable	  [FE]  ComparisonFailure  	57	1	replace
125	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  result;  if(previous!=  null)replaced  =  result;  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  result;  if(previous!=  null)replaced  =  result;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  result;  if(previous!=  null)replaced  =  result;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replacement;    	non-compiled	[CE]  incompatible  types	57	None	replace
126	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  result;  if(previous!=  null)replaced  =  previous;  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  result;  if(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  result;  if(previous!=  null)replaced  =  previous;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replacement;    	non-compiled	[CE]  incompatible  types	57	None	replace
127	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  raw;  if(previous!=  null)replaced  =  previous;  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  raw;  if(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  raw;  if(previous!=  null)replaced  =  previous;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replacement;    	non-compiled	[CE]  incompatible  types	57	None	replace
128	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  previous;  if(previous!=  null)replaced  =  result;  [CE]  incompatible  types  [FE]                          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  previous;  if(previous!=  null)replaced  =  result;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  previous;  if(previous!=  null)replaced  =  result;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replacement;    	non-compiled	[CE]  incompatible  types	57	None	replace
129	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  field;  if(previous!=  null)replaced  =  previous;  [CE]  incompatible  types  [FE]                            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  field;  if(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  field;  if(previous!=  null)replaced  =  previous;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replacement;    	non-compiled	[CE]  incompatible  types	57	None	replace
130	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  original;  if(previous!=  null)replaced  =  boundField;  [CE]  cannot  find  symbol  original  [FE]                              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  original;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  original;  if(previous!=  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replacement;    	non-compiled	[CE]  cannot  find  symbol  original	57	None	replace
131	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(true);  }  [CE]  '.class'  expected  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(true);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(true);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous.setAccessible(true);    }    	non-compiled	[CE]  '.class'  expected	41	None	replace
132	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(false);  }  [CE]  '.class'  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(false);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(false);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous.setAccessible(true);    }    	non-compiled	[CE]  '.class'  expected	41	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(false);  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(false);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(false);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous.setAccessible(true);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(true);  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(true);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(true);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous.setAccessible(true);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
135	[BUG]  [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(true);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(true);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(true);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous.setAccessible(true);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
136	[BUG]  [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(false);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(false);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(false);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous.setAccessible(true);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
137	[BUG]  [BUGGY]  if(replaced!=  null  ||  previous.name!=  null)replaced;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null  ||  previous.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null  ||  previous.name!=  null)replaced;	  if(replaced!=    null)replaced;    	non-compiled	[CE]  not  a  statement	26	None	replace
138	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replacement;	  if(replaced!=    null)replaced;    	non-compiled	[CE]  cannot  find  symbol  replacement	26	None	replace
139	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  false;  [CE]  incompatible  types  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  false;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  false;	  if(previous!=    null)replaced    =    boundField;    if(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  incompatible  types	19	None	replace
140	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(replaced  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	while(replaced  ==  null)replaced  =  boundField;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	  [FE]  ComparisonFailure  	78	1	replace
141	[BUG]  [BUGGY]  while(replaced  ==  null)replaced  =  boundField;  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(replaced  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	while(replaced  ==  null)replaced  =  boundField;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	  [FE]  ComparisonFailure  	78	1	replace
142	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  while(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced  ==  null)replaced  =  boundField;  while(previous!=  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	  [FE]  ComparisonFailure  	78	1	replace
143	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  while(previous!=  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  while(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  while(previous!=  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	  [FE]  ComparisonFailure  	78	1	replace
144	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	while(previous!=  null)replaced  =  boundField;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	  [FE]  ComparisonFailure  	78	1	replace
145	[BUG]  [BUGGY]  while(previous!=  null)replaced  =  boundField;  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	while(previous!=  null)replaced  =  boundField;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	  [FE]  ComparisonFailure  	78	1	replace
146	[BUG]  [BUGGY]  timeout  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	while(previous  ==  null)replaced  =  boundField;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	timeout	78	1	replace
147	[BUG]  [BUGGY]  while(previous  ==  null)replaced  =  boundField;  timeout  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	while(previous  ==  null)replaced  =  boundField;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	timeout	78	1	replace
148	[BUG]  [BUGGY]  timeout  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	timeout	78	1	replace
149	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  previous;  timeout  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	timeout	78	1	replace
150	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  while(previous!=  null)replaced  =  predecessor;  [CE]  cannot  find  symbol  predecessor  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  while(previous!=  null)replaced  =  predecessor;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  while(previous!=  null)replaced  =  predecessor;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	non-compiled	[CE]  cannot  find  symbol  predecessor	78	None	replace
151	[BUG]  [BUGGY]  timeout  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	timeout	78	1	replace
152	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  previous;  timeout  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	timeout	78	1	replace
153	[BUG]  [BUGGY]  Field[]  fields  =  replaced.toArray(fieldNames);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  Field[]  fields  =  replaced.toArray(fieldNames);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	Field[]  fields  =  replaced.toArray(fieldNames);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fields    =    fieldNames.toArray(replaced);    if(fields!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	92	None	replace
154	[BUG]  [BUGGY]  Field[]  fields  =  replaced.toArray(fields);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  Field[]  fields  =  replaced.toArray(fields);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	Field[]  fields  =  replaced.toArray(fields);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fields    =    fieldNames.toArray(replaced);    if(fields!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	92	None	replace
155	[BUG]  [BUGGY]  Field[]  fields  =  replaced.toArray(fieldNames);  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  Field[]  fields  =  replaced.toArray(fieldNames);  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	Field[]  fields  =  replaced.toArray(fieldNames);  if(fields  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fields    =    fieldNames.toArray(replaced);    if(fields!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	92	None	replace
156	[BUG]  [BUGGY]  Field[]  fields  =  returned.toArray(fieldNames);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  Field[]  fields  =  returned.toArray(fieldNames);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	Field[]  fields  =  returned.toArray(fieldNames);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fields    =    fieldNames.toArray(replaced);    if(fields!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	92	None	replace
157	[BUG]  [BUGGY]  Field[]  fields  =  replacement.toArray(fieldNames);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  Field[]  fields  =  replacement.toArray(fieldNames);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	Field[]  fields  =  replacement.toArray(fieldNames);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fields    =    fieldNames.toArray(replaced);    if(fields!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	92	None	replace
158	[BUG]  [BUGGY]  Field[]  fields  =  boundField.toArray(replaced);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  Field[]  fields  =  boundField.toArray(replaced);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	Field[]  fields  =  boundField.toArray(replaced);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fields    =    fieldNames.toArray(replaced);    if(fields!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	92	None	replace
159	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replaced;	  if(previous    ==    null)replaced    =    boundField;    if(previous    {    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	94	1	replace
160	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replaced;	  if(previous    ==    null)replaced    =    boundField;    if(previous    {    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	94	1	replace
161	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  original;  [CE]  cannot  find  symbol  original  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  original;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  original;	  if(previous    ==    null)replaced    =    boundField;    if(previous    {    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  original	94	None	replace
162	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    if(previous    {    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	94	1	replace
163	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    if(previous    {    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	94	1	replace
164	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  new  BoundField(field,  replaced);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  new  BoundField(field,  replaced);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  new  BoundField(field,  replaced);  }	  if(previous    ==    null)replaced    =    boundField;    if(previous    {    null)replaced    =    boundField;    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
165	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  original;  [CE]  cannot  find  symbol  original  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  original;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  original;	  if(previous!=    null)replaced    =    boundField;    if(previous    >=    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  original	22	None	replace
166	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  substituted;  [CE]  cannot  find  symbol  substituted  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  substituted;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  substituted;	  if(previous!=    null)replaced    =    boundField;    if(previous    >=    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  substituted	22	None	replace
167	[BUG]  [BUGGY]  if(preserved!=  null)replaced  =  replaced;  [CE]  cannot  find  symbol  preserved  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(preserved!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(preserved!=  null)replaced  =  replaced;	  if(preserved!=    null)replaced;    	non-compiled	[CE]  cannot  find  symbol  preserved	30	None	replace
168	[BUG]  [BUGGY]  if(preserved  ==  null)replaced;  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(preserved  ==  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(preserved  ==  null)replaced;	  if(preserved!=    null)replaced;    	non-compiled	[CE]  not  a  statement	30	None	replace
169	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  deserialize);  [CE]  cannot  find  symbol  BindField  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  deserialize);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  deserialize);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    replaced);    	non-compiled	[CE]  cannot  find  symbol  BindField	6	None	replace
170	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  predecessor);  [CE]  cannot  find  symbol  predecessor  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  predecessor);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  predecessor);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    replaced);    	non-compiled	[CE]  cannot  find  symbol  predecessor	6	None	replace
171	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  original);  [CE]  cannot  find  symbol  original  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  original);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  original);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    replaced);    	non-compiled	[CE]  cannot  find  symbol  original	6	None	replace
172	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  prev);  [CE]  cannot  find  symbol  prev  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  prev);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  prev);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    replaced);    	non-compiled	[CE]  cannot  find  symbol  prev	6	None	replace
173	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  replacement);  [CE]  cannot  find  symbol  replacement  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  replacement);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  replacement);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    replaced);    	non-compiled	[CE]  cannot  find  symbol  replacement	6	None	replace
174	[BUG]  [BUGGY]  Field[]  previous  =  new  Field[fieldNames.size()  ];  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  Field[]  previous  =  new  Field[fieldNames.size()  ];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	Field[]  previous  =  new  Field[fieldNames.size()  ];	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	44	None	replace
175	[BUG]  [BUGGY]  Constructor  <?>  factory  =  boundField.getConstructor();  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  Constructor  <?>  factory  =  boundField.getConstructor();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	Constructor  <?>  factory  =  boundField.getConstructor();	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
176	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSerializationException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  aughtExceptionHandler.throwAsSerializationException( " ");  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	aughtExceptionHandler.throwAsSerializationException( " ");	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	44	None	replace
177	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	aughtExceptionHandler.throwAsUnquotedException( " ");	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	44	None	replace
178	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]            ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	aughtExceptionHandler.throwAsIOException( " ");	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	44	None	replace
179	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnexpectedException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]              ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  aughtExceptionHandler.throwAsUnexpectedException( " ");  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	aughtExceptionHandler.throwAsUnexpectedException( " ");	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	44	None	replace
180	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	44	None	replace
181	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(replaced!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=    null)replaced    =    replaced;    if(replaced!=  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	95	1	add
182	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(replaced!=  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(replaced!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    replaced;    if(replaced!=  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	95	1	add
183	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(replaced  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=    null)replaced    =    replaced;    if(replaced  ==  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	95	1	add
184	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(replaced  ==  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(replaced  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    replaced;    if(replaced  ==  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	95	1	add
185	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  If(replaced!=  null)replaced  =  replaced;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  If(replaced!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    replaced;    If(replaced!=  null)replaced  =  replaced;	  	non-compiled	[CE]  ';'  expected	95	None	add
186	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(replaced  >=  null)replaced  =  replaced;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(replaced  >=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    replaced;    if(replaced  >=  null)replaced  =  replaced;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	95	None	add
187	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(replaced  >>  null)replaced  =  replaced;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(replaced  >>  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    replaced;    if(replaced  >>  null)replaced  =  replaced;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	95	None	add
188	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(replaced!=  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]              ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(replaced!=  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    replaced;    if(replaced!=  null)replaced  =  replacement;	  	non-compiled	[CE]  cannot  find  symbol  replacement	95	None	add
189	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  type);  [CE]  cannot  find  symbol  BindField  [FE]                          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  type);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  type);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    type);    	non-compiled	[CE]  cannot  find  symbol  BindField	12	None	replace
190	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serializedName,  type);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serializedName,  type);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serializedName,  type);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	12	None	replace
191	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type,  deserialize);  [CE]  cannot  find  symbol  BindField  [FE]                              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type,  deserialize);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type,  deserialize);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    type);    	non-compiled	[CE]  cannot  find  symbol  BindField	12	None	replace
192	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type,  declared);  [CE]  cannot  find  symbol  declared  [FE]                                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type,  declared);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type,  declared);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    type);    	non-compiled	[CE]  cannot  find  symbol  declared	12	None	replace
193	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type,  original);  [CE]  cannot  find  symbol  original  [FE]                                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type,  original);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type,  original);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    type);    	non-compiled	[CE]  cannot  find  symbol  original	12	None	replace
194	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  BindField.createBoundField(context,  field,  name,  type);  [CE]  cannot  find  symbol  BindField  [FE]                                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  BindField.createBoundField(context,  field,  name,  type);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  BindField.createBoundField(context,  field,  name,  type);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    type);    	non-compiled	[CE]  cannot  find  symbol  BindField	12	None	replace
195	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  factory);  [CE]  cannot  find  symbol  factory  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  factory);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  factory);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    replacement);    	non-compiled	[CE]  cannot  find  symbol  factory	10	None	replace
196	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced    ==    null)replaced    =    boundField;    if(replaced  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	67	9	add
197	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  boundField;  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    boundField;    if(replaced  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	67	9	add
198	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced    ==    null)replaced    =    boundField;    if(replaced!=  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	67	9	add
199	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  boundField;  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    boundField;    if(replaced!=  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	67	9	add
200	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  If(replaced  ==  null)replaced  =  boundField;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  If(replaced  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    boundField;    If(replaced  ==  null)replaced  =  boundField;	  	non-compiled	[CE]  ';'  expected	67	None	add
201	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  >=  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  >=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    boundField;    if(replaced  >=  null)replaced  =  boundField;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	67	None	add
202	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  >>  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]            ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  >>  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    boundField;    if(replaced  >>  null)replaced  =  boundField;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	67	None	add
203	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  row;  [CE]  cannot  find  symbol  row  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  row;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  row;	  if(previous!=    null)removed    =    row;    	non-compiled	[CE]  cannot  find  symbol  row	100	None	replace
204	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  replaced);  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  replaced);	  if(replaced!=    null)replaced    =    new    BoundField(fieldNames);    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	102	None	replace
205	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  replaced);  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  replaced);	  if(replaced!=    null)replaced    =    new    BoundField(fieldNames);    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	102	None	replace
206	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  original);  [CE]  cannot  find  symbol  original  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  original);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  original);	  if(replaced!=    null)replaced    =    new    BoundField(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  original	102	None	replace
207	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames.length);  [CE]  cannot  find  symbol  length  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames.length);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(fieldNames.length);	  if(replaced!=    null)replaced    =    new    BoundField(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  length	102	None	replace
208	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  replacement);  [CE]  cannot  find  symbol  replacement  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  replacement);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  replacement);	  if(replaced!=    null)replaced    =    new    BoundField(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  replacement	102	None	replace
209	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  *  1];  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  *  1];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  *  1];	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    +    1];    	non-compiled	[CE]  incompatible  types	5	None	replace
210	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serializedName,  boundField);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serializedName,  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serializedName,  boundField);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  serializedName	7	None	replace
211	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  returned);  [CE]  cannot  find  symbol  returned  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  returned);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  returned);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    boundField);    	non-compiled	[CE]  cannot  find  symbol  returned	7	None	replace
212	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  original);  [CE]  cannot  find  symbol  original  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  original);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  original);	  if(replaced    ==    null)replaced    =    new    BoundField(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  original	98	None	replace
213	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames.length);  [CE]  cannot  find  symbol  length  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames.length);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(fieldNames.length);	  if(replaced    ==    null)replaced    =    new    BoundField(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  length	98	None	replace
214	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  replacement);  [CE]  cannot  find  symbol  replacement  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  replacement);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  replacement);	  if(replaced    ==    null)replaced    =    new    BoundField(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  replacement	98	None	replace
215	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  preferred;  [CE]  cannot  find  symbol  preferred  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  preferred;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  preferred;	  if(previous    ==    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  preferred	70	None	replace
216	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  predecessor;  [CE]  cannot  find  symbol  predecessor  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  predecessor;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  predecessor;	  if(previous    ==    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  predecessor	70	None	replace
217	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getGenericSuperclass();  }  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getGenericSuperclass();  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getGenericSuperclass();  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getGenericSuperclass();    }    	non-compiled	[CE]  '.class'  expected	45	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getGenericSuperclass();  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getGenericSuperclass();  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getGenericSuperclass();  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getGenericSuperclass();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	45	None	replace
219	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getGenericSuperclass();  }  [CE]  '.class'  expected  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getGenericSuperclass();  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getGenericSuperclass();  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getGenericSuperclass();    }    	non-compiled	[CE]  '.class'  expected	45	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getGenericSuperclass();  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getGenericSuperclass();  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getGenericSuperclass();  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getGenericSuperclass();    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	45	None	replace
221	[BUG]  [BUGGY]  type  =  type.getGenericSuperclass();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  type  =  type.getGenericSuperclass();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	type  =  type.getGenericSuperclass();	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getGenericSuperclass();    }    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
222	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getGenericSuperclass();  [CE]  '.class'  expected  [FE]                            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getGenericSuperclass();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  type.getGenericSuperclass();	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getGenericSuperclass();    }    	non-compiled	[CE]  '.class'  expected	45	None	replace
223	[BUG]  [BUGGY]  if(replaced!=  null)removed  =  result;  [CE]  cannot  find  symbol  removed  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)removed  =  result;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)removed  =  result;	  if(previous!=    null)removed    =    result;    	non-compiled	[CE]  cannot  find  symbol  removed	14	None	replace
224	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  result;  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  result;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  result;	  if(previous!=    null)removed    =    result;    	non-compiled	[CE]  incompatible  types	14	None	replace
225	[BUG]  [BUGGY]  if(previous  ==  null  ||  previous.name!=  null)replaced;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null  ||  previous.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null  ||  previous.name!=  null)replaced;	  if(previous!=    null    ||    previous.name!=    null)replaced;    	non-compiled	[CE]  not  a  statement	87	None	replace
226	[BUG]  [BUGGY]  if(previous!=  null  ||  original.name!=  null)replaced;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null  ||  original.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null  ||  original.name!=  null)replaced;	  if(previous!=    null    ||    previous.name!=    null)replaced;    	non-compiled	[CE]  not  a  statement	87	None	replace
227	[BUG]  [BUGGY]  if(previous!=  null  ||  predecessor.name!=  null)replaced;  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null  ||  predecessor.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null  ||  predecessor.name!=  null)replaced;	  if(previous!=    null    ||    previous.name!=    null)replaced;    	non-compiled	[CE]  not  a  statement	87	None	replace
228	[BUG]  [BUGGY]  if(previous!=  null  ||  replaced.name!=  null)replaced;  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null  ||  replaced.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null  ||  replaced.name!=  null)replaced;	  if(previous!=    null    ||    previous.name!=    null)replaced;    	non-compiled	[CE]  not  a  statement	87	None	replace
229	[BUG]  [BUGGY]  if(previous!=  null  ||  previous.name!=  null)removed;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null  ||  previous.name!=  null)removed;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null  ||  previous.name!=  null)removed;	  if(previous!=    null    ||    previous.name!=    null)replaced;    	non-compiled	[CE]  not  a  statement	87	None	replace
230	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  original;  [CE]  cannot  find  symbol  original  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  original;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  original;	  if(previous!=    null)removed    =    original;    	non-compiled	[CE]  cannot  find  symbol  original	16	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
232	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	82	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
234	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	82	None	replace
235	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
236	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  replaced));  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  replaced));  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  replaced));	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    new    BoundField(fieldType,    boundField));    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	76	None	replace
237	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serializedName,  new  BoundField(fieldType,  boundField));  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serializedName,  new  BoundField(fieldType,  boundField));  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serializedName,  new  BoundField(fieldType,  boundField));	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    new    BoundField(fieldType,    boundField));    	non-compiled	[CE]  cannot  find  symbol  serializedName	76	None	replace
238	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  previous));  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  previous));  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  previous));	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    new    BoundField(fieldType,    boundField));    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	76	None	replace
239	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  boundField));  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]                          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  boundField));  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  boundField));	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    new    BoundField(fieldType,    boundField));    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	76	None	replace
240	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  deserialize));  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]                            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  deserialize));  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  deserialize));	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    new    BoundField(fieldType,    boundField));    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	76	None	replace
241	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  declaredType));  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]                              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  declaredType));  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  declaredType));	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    new    BoundField(fieldType,    boundField));    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	76	None	replace
242	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  originalType));  [CE]  cannot  find  symbol  originalType  [FE]                                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  originalType));  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  originalType));	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    new    BoundField(fieldType,    boundField));    	non-compiled	[CE]  cannot  find  symbol  originalType	76	None	replace
243	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous        ==        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	31	9	add
244	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	31	9	add
245	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous        ==        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	31	9	add
246	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	31	9	add
247	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous        ==        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	31	9	add
248	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	31	9	add
249	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced;  if(previous  ==  null)replaced  =  boundField;  [CE]  not  a  statement  [FE]          IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced;  if(previous  ==  null)replaced  =  boundField;	  	non-compiled	[CE]  not  a  statement	31	None	add
250	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [CE]  cannot  find  symbol  Previous  [FE]            IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(Previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;	  	non-compiled	[CE]  cannot  find  symbol  Previous	31	None	add
251	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	31	None	add
252	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    If(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;	  	non-compiled	[CE]  ';'  expected	31	None	add
253	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  result;  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  result;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  result;	  if(replaced!=    null)replaced    =    original;    	non-compiled	[CE]  incompatible  types	64	None	replace
254	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[size()  ];  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[size()  ];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[size()  ];	  if(replaced!=    null)replaced    =    original;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
255	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i].getName();    if(name!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
256	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i].getName();    if(name!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	86	None	replace
257	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( "  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( "	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i].getName();    if(name!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	86	None	replace
258	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  Il  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  Il	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i].getName();    if(name!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	86	None	replace
259	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous        ==        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	33	9	add
260	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	33	9	add
261	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous        ==        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	33	9	add
262	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	33	9	add
263	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	33	None	add
264	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced;  if(previous!=  null)replaced  =  boundField;  [CE]  not  a  statement  [FE]          IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced;  if(previous!=  null)replaced  =  boundField;	  	non-compiled	[CE]  not  a  statement	33	None	add
265	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous  >=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	33	None	add
266	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [CE]  cannot  find  symbol  Previous  [FE]              IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(Previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	non-compiled	[CE]  cannot  find  symbol  Previous	33	None	add
267	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [CE]  ';'  expected  [FE]                IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    If(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	non-compiled	[CE]  ';'  expected	33	None	add
268	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames[i]);  [CE]  array  required,  but  List<String>  found  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames[i]);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(fieldNames[i]);	  if(previous!=    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	83	None	replace
269	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  replaced);  [CE]  array  required,  but  List<String>  found  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  replaced);	  if(previous!=    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	83	None	replace
270	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  declaredType);  [CE]  array  required,  but  List<String>  found  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  declaredType);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  declaredType);	  if(previous!=    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	83	None	replace
271	[BUG]  [BUGGY]  if(preserved!=  null)replaced  =  new  BoundField(fieldNames[i]);  [CE]  cannot  find  symbol  preserved  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(preserved!=  null)replaced  =  new  BoundField(fieldNames[i]);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(preserved!=  null)replaced  =  new  BoundField(fieldNames[i]);	  if(previous!=    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  cannot  find  symbol  preserved	83	None	replace
272	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  type);  [CE]  array  required,  but  List<String>  found  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  type);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  type);	  if(previous!=    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	83	None	replace
273	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  namedName,  boundField);  [CE]  cannot  find  symbol  namedName  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  namedName,  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  namedName,  boundField);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serializedName,    boundField);    	non-compiled	[CE]  cannot  find  symbol  namedName	11	None	replace
274	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  BindField.createBoundField(context,  field,  name,  boundField);  [CE]  cannot  find  symbol  BindField  [FE]                          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  BindField.createBoundField(context,  field,  name,  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  BindField.createBoundField(context,  field,  name,  boundField);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serializedName,    boundField);    	non-compiled	[CE]  cannot  find  symbol  BindField	11	None	replace
275	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  originalName,  boundField);  [CE]  cannot  find  symbol  originalName  [FE]                            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  originalName,  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  originalName,  boundField);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serializedName,    boundField);    	non-compiled	[CE]  cannot  find  symbol  originalName	11	None	replace
276	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	39	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
278	[BUG]  [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
280	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	39	None	replace
281	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  new  BoundField[fieldNames.size()  -  1];  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  new  BoundField[fieldNames.size()  -  1];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  new  BoundField[fieldNames.size()  -  1];	  if(previous    ==    null)replaced    =    new    BoundField[fieldNames.size()    ];    	non-compiled	[CE]  incompatible  types	4	None	replace
282	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  new  BoundField[fieldNames.size()  +  1];  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  new  BoundField[fieldNames.size()  +  1];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  new  BoundField[fieldNames.size()  +  1];	  if(previous    ==    null)replaced    =    new    BoundField[fieldNames.size()    ];    	non-compiled	[CE]  incompatible  types	4	None	replace
283	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=        null)replaced        =        replaced;        if(previous    ==    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	52	1	add
284	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous    ==    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	52	1	add
285	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=        null)replaced        =        replaced;        if(previous    ==    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	52	1	add
286	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous    ==    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	52	1	add
287	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced;  if(previous  ==  null)replaced  =  replaced;  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous    ==    null)replaced    =    replaced;    if(previous!=  null)replaced;  if(previous  ==  null)replaced  =  replaced;	  	non-compiled	[CE]  not  a  statement	52	None	add
288	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous  >=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous  >=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous    ==    null)replaced    =    replaced;    if(previous  >=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	52	None	add
289	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replacement;  if(previous  ==  null)replaced  =  replaced;  [CE]  cannot  find  symbol  replacement  [FE]            ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replacement;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous    ==    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replacement;  if(previous  ==  null)replaced  =  replaced;	  	non-compiled	[CE]  cannot  find  symbol  replacement	52	None	add
290	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]              ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous    ==    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replacement;	  	non-compiled	[CE]  cannot  find  symbol  replacement	52	None	add
291	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)re  replaced;  if(previous  ==  null)replaced  =  replaced;  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)re  replaced;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous    ==    null)replaced    =    replaced;    if(previous!=  null)re  replaced;  if(previous  ==  null)replaced  =  replaced;	  	non-compiled	[CE]  not  a  statement	52	None	add
292	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  raw;  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  raw;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  raw;	  if(previous!=    null)removed    =    raw;    	non-compiled	[CE]  incompatible  types	17	None	replace
293	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fields.size()  ];  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fields.size()  ];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fields.size()  ];	  if(replaced!=    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
294	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  predecessor;  [CE]  cannot  find  symbol  predecessor  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  predecessor;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  predecessor;	  if(previous!=    null)removed    =    predecessor;    	non-compiled	[CE]  cannot  find  symbol  predecessor	48	None	replace
295	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  replacement;	  if(replaced    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  replacement	68	None	replace
296	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  previous;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  previous;	  if(previous!=    null)replaced    =    boundField;    If(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	23	None	replace
297	[BUG]  [BUGGY]  If(replaced!=  null)replaced  =  boundField;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  If(replaced!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	If(replaced!=  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    boundField;    If(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	23	None	replace
298	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  boundField;  if(replaced!=  null)replaced  =  replacement;	  if(previous!=    null)replaced    =    boundField;    If(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  replacement	23	None	replace
299	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  replaced;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    boundField;    If(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	23	None	replace
300	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  returned;  [CE]  cannot  find  symbol  returned  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  returned;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  returned;	  if(replaced!=    null)replaced    =    predecessor;    	non-compiled	[CE]  cannot  find  symbol  returned	61	None	replace
301	[BUG]  [BUGGY]  timeout  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous        ==        null)replaced        =        boundField;        while(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;	  timeout    	compilable	timeout	77	1	add
302	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;  timeout  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        while(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;	  timeout    	compilable	timeout	77	1	add
303	[BUG]  [BUGGY]  timeout  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  while(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous        ==        null)replaced        =        boundField;        while(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  while(previous!=  null)replaced  =  boundField;	  timeout    	compilable	timeout	77	1	add
304	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  while(previous!=  null)replaced  =  boundField;  timeout  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  while(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        while(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  while(previous!=  null)replaced  =  boundField;	  timeout    	compilable	timeout	77	1	add
305	[BUG]  [BUGGY]  timeout  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous        ==        null)replaced        =        boundField;        while(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;	  timeout    	compilable	timeout	77	1	add
306	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;  timeout  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        while(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;	  timeout    	compilable	timeout	77	1	add
307	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  while(previous  >=  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  while(previous  >=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        while(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  while(previous  >=  null)replaced  =  boundField;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	77	None	add
308	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        while(previous    ==    null)replaced    =    boundField;    if(previous  >=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	77	None	add
309	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;  [CE]  cannot  find  symbol  Previous  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        while(previous    ==    null)replaced    =    boundField;    if(Previous  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;	  timeout    	non-compiled	[CE]  cannot  find  symbol  Previous	77	None	add
310	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  predecessor;  [CE]  cannot  find  symbol  predecessor  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  predecessor;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  predecessor;	  if(previous!=    null)replaced    =    replaced;    if(previous    >=    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  predecessor	54	None	replace
311	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  previous;	  if(previous!=    null)replaced    =    replaced;    if(previous    >=    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	54	1	replace
312	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  previous;	  if(previous!=    null)replaced    =    replaced;    if(previous    >=    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	54	1	replace
313	[BUG]  [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaced);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaced);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaced);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    replaced);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
314	[BUG]  [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replacement);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replacement);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replacement);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    replaced);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
315	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replacement);  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replacement);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replacement);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    replaced);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	47	None	replace
316	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  substituted);  }  [CE]  '.class'  expected  [FE]                            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  substituted);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  substituted);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    replaced);    }    	non-compiled	[CE]  '.class'  expected	47	None	replace
317	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  serialize);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  serialize);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  serialize);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
318	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  serialize);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  serialize);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  serialize);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
319	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  declaredType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  declaredType);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  declaredType);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
320	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  name);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  name);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  name);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
321	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  serializedName);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  serializedName);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  serializedName);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
322	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  type);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  type);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
323	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  description);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  description);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  description);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
324	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  previous;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	53	1	replace
325	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  previous;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	53	1	replace
326	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	53	1	replace
327	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	53	1	replace
328	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  previous;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	53	1	replace
329	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  previous;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	53	1	replace
330	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]          ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replacement;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  replacement	53	None	replace
331	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]            ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  replacement;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  replacement	53	None	replace
332	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replace;  if(replaced  ==  null)replaced  =  replaced;  [CE]  cannot  find  symbol  replace  [FE]              ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replace;  if(replaced  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replace;  if(replaced  ==  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  replace	53	None	replace
333	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  original;  if(replaced  ==  null)replaced  =  replaced;  [CE]  cannot  find  symbol  original  [FE]                ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  original;  if(replaced  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  original;  if(replaced  ==  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  original	53	None	replace
334	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	20	9	add
335	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	20	9	add
336	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	20	9	add
337	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	20	9	add
338	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous  >=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	20	None	add
339	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	20	None	add
340	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  If(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  If(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    If(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;	  	non-compiled	[CE]  ';'  expected	20	None	add
341	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	20	9	add
342	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	20	9	add
343	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced;  if(previous  ==  null)replaced  =  boundField;  [CE]  not  a  statement  [FE]                IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced;  if(previous  ==  null)replaced  =  boundField;	  	non-compiled	[CE]  not  a  statement	20	None	add
344	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  subtypes);  [CE]  cannot  find  symbol  subtypes  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  subtypes);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  subtypes);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    previous);    	non-compiled	[CE]  cannot  find  symbol  subtypes	89	None	replace
345	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  changed);  [CE]  cannot  find  symbol  changed  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  changed);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  changed);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    previous);    	non-compiled	[CE]  cannot  find  symbol  changed	89	None	replace
346	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]          if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	                if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  ComparisonFailure  	43	1	add
347	[BUG]  [BUGGY]          if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]          if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	                if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  ComparisonFailure  	43	1	add
348	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]          if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(replaced  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	                if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(replaced  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	43	9	add
349	[BUG]  [BUGGY]          if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(replaced  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]          if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(replaced  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	                if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(replaced  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	43	9	add
350	[BUG]  [BUGGY]          if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  If(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]          if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  If(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	                if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    If(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }	  	non-compiled	[CE]  	43	None	add
351	[BUG]  [BUGGY]          if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(replaced  >=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]          ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]          if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(replaced  >=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	                if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(replaced  >=  null)  {  throw  new  IllegalArgumentException(   "   ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	43	None	add
352	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  replaced);  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(field,  replaced);	  if(replaced!=    null)replaced    =    new    BoundField(field);    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	101	None	replace
353	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  original);  [CE]  cannot  find  symbol  original  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  original);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(field,  original);	  if(replaced!=    null)replaced    =    new    BoundField(field);    	non-compiled	[CE]  cannot  find  symbol  original	101	None	replace
354	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(field,  replaced);  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(field,  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(field,  replaced);	  if(replaced!=    null)replaced    =    new    BoundField(field);    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	101	None	replace
355	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  ordered);  [CE]  cannot  find  symbol  ordered  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  ordered);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(field,  ordered);	  if(replaced!=    null)replaced    =    new    BoundField(field);    	non-compiled	[CE]  cannot  find  symbol  ordered	101	None	replace
356	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  replacement);  [CE]  cannot  find  symbol  replacement  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  replacement);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(field,  replacement);	  if(replaced!=    null)replaced    =    new    BoundField(field);    	non-compiled	[CE]  cannot  find  symbol  replacement	101	None	replace
357	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  returned);  [CE]  cannot  find  symbol  returned  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  returned);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(field,  returned);	  if(replaced!=    null)replaced    =    new    BoundField(field);    	non-compiled	[CE]  cannot  find  symbol  returned	101	None	replace
358	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  serialize);  [CE]  cannot  find  symbol  BindField  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  serialize);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  serialize);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    replaced);    	non-compiled	[CE]  cannot  find  symbol  BindField	9	None	replace
359	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  replaced);  [CE]  cannot  find  symbol  BindField  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  replaced);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    replaced);    	non-compiled	[CE]  cannot  find  symbol  BindField	9	None	replace
360	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  serializedName);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  serializedName);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    replaced);    	non-compiled	[CE]  cannot  find  symbol  serializedName	9	None	replace
361	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=        null)replaced        =        replaced;        if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	50	1	add
362	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	50	1	add
363	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=        null)replaced        =        replaced;        if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	50	1	add
364	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	50	1	add
365	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced;  if(previous!=  null)replaced  =  replaced;  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced;  if(previous!=  null)replaced  =  replaced;	  	non-compiled	[CE]  not  a  statement	50	None	add
366	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=        null)replaced        =        replaced;        if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	50	1	add
367	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;	  	compilable	  [FE]  ComparisonFailure  	50	1	add
368	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous  >=  null)replaced  =  replaced;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous  >=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous  >=  null)replaced  =  replaced;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	50	None	add
369	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous  >=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous  >=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous!=    null)replaced    =    replaced;    if(previous  >=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	50	None	add
370	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replacement;  if(previous!=  null)replaced  =  replaced;  [CE]  cannot  find  symbol  replacement  [FE]                ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replacement;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replacement;  if(previous!=  null)replaced  =  replaced;	  	non-compiled	[CE]  cannot  find  symbol  replacement	50	None	add
371	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  replaced);  [CE]  array  required,  but  List<String>  found  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  replaced);	  if(replaced    ==    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	72	None	replace
372	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  declaredType);  [CE]  array  required,  but  List<String>  found  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  declaredType);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  declaredType);	  if(replaced    ==    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	72	None	replace
373	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  type);  [CE]  array  required,  but  List<String>  found  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  type);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  type);	  if(replaced    ==    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	72	None	replace
374	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames[i],  replaced);  [CE]  array  required,  but  List<String>  found  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames[i],  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(fieldNames[i],  replaced);	  if(replaced    ==    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	72	None	replace
375	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  name);  [CE]  array  required,  but  List<String>  found  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  name);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  name);	  if(replaced    ==    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	72	None	replace
376	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  original);  [CE]  array  required,  but  List<String>  found  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  original);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  original);	  if(replaced    ==    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	72	None	replace
377	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  fieldNames;  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  fieldNames;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  fieldNames;	  if(previous!=    null)removed    =    fieldNames;    	non-compiled	[CE]  incompatible  types	79	None	replace
378	[BUG]  [BUGGY]  if(previous  ==  null)removed  =  fieldNames;  [CE]  cannot  find  symbol  removed  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)removed  =  fieldNames;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)removed  =  fieldNames;	  if(previous!=    null)removed    =    fieldNames;    	non-compiled	[CE]  cannot  find  symbol  removed	79	None	replace
379	[BUG]  [BUGGY]  if(previous!=  null)removed  =  fieldNames.length;  [CE]  cannot  find  symbol  removed  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)removed  =  fieldNames.length;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)removed  =  fieldNames.length;	  if(previous!=    null)removed    =    fieldNames;    	non-compiled	[CE]  cannot  find  symbol  removed	79	None	replace
380	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fields.size();  ++i)  {  result.put(name,  replaced);  }  [CE]  '.class'  expected  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fields.size();  ++i)  {  result.put(name,  replaced);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fields.size();  ++i)  {  result.put(name,  replaced);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    replacement);    }    	non-compiled	[CE]  '.class'  expected	93	None	replace
381	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  previous;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  previous;	  if(previous!=    null)replaced    =    replaced;    If(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  ';'  expected	55	None	replace
382	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  predecessor;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  predecessor;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  predecessor;	  if(previous!=    null)replaced    =    replaced;    If(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  ';'  expected	55	None	replace
383	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  replacement;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  replacement;	  if(previous!=    null)replaced    =    replaced;    If(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  ';'  expected	55	None	replace
384	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replace;  If(previous!=  null)replaced  =  replaced;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replace;  If(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replace;  If(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    If(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  ';'  expected	55	None	replace
385	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  previous;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  previous;	  if(previous!=    null)replaced    =    replaced;    If(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  ';'  expected	55	None	replace
386	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replacement;  If(previous!=  null)replaced  =  replaced;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replacement;  If(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replacement;  If(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    If(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  ';'  expected	55	None	replace
387	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  predecessor;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  predecessor;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  predecessor;	  if(previous!=    null)replaced    =    replaced;    If(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  ';'  expected	55	None	replace
388	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=  null)replaced  =  previous;  if(replaced!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	51	1	replace
389	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced!=  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  previous;  if(replaced!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	51	1	replace
390	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  previous;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	51	1	replace
391	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  previous;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	51	1	replace
392	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replacement;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  replacement	51	None	replace
393	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced!=  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]          ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  previous;  if(replaced!=  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  previous;  if(replaced!=  null)replaced  =  replacement;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  replacement	51	None	replace
394	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  original;  if(replaced!=  null)replaced  =  replaced;  [CE]  cannot  find  symbol  original  [FE]            ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  original;  if(replaced!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  original;  if(replaced!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  original	51	None	replace
395	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  original;  [CE]  cannot  find  symbol  original  [FE]              ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  original;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  original;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  original	51	None	replace
396	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  LinkedList  <  ComparisonFailure>();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  LinkedList  <  ComparisonFailure>();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  LinkedList  <  ComparisonFailure>();	  if(replaced!=    null)replaced    =    new    ArrayList    <    ComparisonFailure>();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
397	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  ArrayList  <  ComparisonFailure>();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  ArrayList  <  ComparisonFailure>();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  ArrayList  <  ComparisonFailure>();	  if(replaced!=    null)replaced    =    new    ArrayList    <    ComparisonFailure>();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
398	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  LinkedList  <  ComparisonFailure>();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  LinkedList  <  ComparisonFailure>();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  LinkedList  <  ComparisonFailure>();	  if(replaced!=    null)replaced    =    new    ArrayList    <    ComparisonFailure>();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
399	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  LinkedHashSet  <  ComparisonFailure>();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  LinkedHashSet  <  ComparisonFailure>();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  LinkedHashSet  <  ComparisonFailure>();	  if(replaced!=    null)replaced    =    new    ArrayList    <    ComparisonFailure>();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
400	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  java.util.ArrayList  <  ComparisonFailure>();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  java.util.ArrayList  <  ComparisonFailure>();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  java.util.ArrayList  <  ComparisonFailure>();	  if(replaced!=    null)replaced    =    new    ArrayList    <    ComparisonFailure>();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
401	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  TreeSet  <  ComparisonFailure>();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  TreeSet  <  ComparisonFailure>();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  TreeSet  <  ComparisonFailure>();	  if(replaced!=    null)replaced    =    new    ArrayList    <    ComparisonFailure>();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
402	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
403	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
404	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( "  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( "	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	81	None	replace
405	[BUG]  [BUGGY]  if(previous!=  null  &&  replaced.name!=  null)replaced;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null  &&  replaced.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null  &&  replaced.name!=  null)replaced;	  if(previous!=    null    &&    previous.name!=    null)replaced;    	non-compiled	[CE]  not  a  statement	88	None	replace
406	[BUG]  [BUGGY]  if(previous!=  null  &&  predecessor.name!=  null)replaced;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null  &&  predecessor.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null  &&  predecessor.name!=  null)replaced;	  if(previous!=    null    &&    previous.name!=    null)replaced;    	non-compiled	[CE]  not  a  statement	88	None	replace
407	[BUG]  [BUGGY]  if(previous!=  null  &&  original.name!=  null)replaced;  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null  &&  original.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null  &&  original.name!=  null)replaced;	  if(previous!=    null    &&    previous.name!=    null)replaced;    	non-compiled	[CE]  not  a  statement	88	None	replace
408	[BUG]  [BUGGY]  if(previous  ==  null  &&  previous.name!=  null)replaced;  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null  &&  previous.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null  &&  previous.name!=  null)replaced;	  if(previous!=    null    &&    previous.name!=    null)replaced;    	non-compiled	[CE]  not  a  statement	88	None	replace
409	[BUG]  [BUGGY]  if(previous!=  null  &&  previous.name!=  null)removed;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null  &&  previous.name!=  null)removed;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null  &&  previous.name!=  null)removed;	  if(previous!=    null    &&    previous.name!=    null)replaced;    	non-compiled	[CE]  not  a  statement	88	None	replace
410	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	compilable	  [FE]  ComparisonFailure  	18	1	add
411	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	compilable	  [FE]  ComparisonFailure  	18	1	add
412	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	18	9	add
413	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	18	9	add
414	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	18	9	add
415	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	18	9	add
416	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous  >=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	18	None	add
417	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  boundField;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	18	None	add
418	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  >>  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  >>  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  >>  null)replaced  =  boundField;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	18	None	add
419	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    If(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	non-compiled	[CE]  ';'  expected	18	None	add
420	[BUG]  [BUGGY]  If(replaced  ==  null)replaced  =  boundField;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  If(replaced  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	If(replaced  ==  null)replaced  =  boundField;	  if(previous    ==    null)replaced    =    boundField;    If(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	35	None	replace
421	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  replacement;	  if(previous    ==    null)replaced    =    boundField;    If(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  replacement	35	None	replace
422	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  false;  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  false;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  false;	  if(previous    ==    null)replaced    =    boundField;    If(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  incompatible  types	35	None	replace
423	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  new  BoundField();  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  new  BoundField();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  if(replaced  ==  null)replaced  =  new  BoundField();	  if(previous    ==    null)replaced    =    boundField;    If(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	35	None	replace
424	[BUG]  [BUGGY]  if(replaced!=  null)removed;  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)removed;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)removed;	  if(previous!=    null)removed;    	non-compiled	[CE]  not  a  statement	29	None	replace
425	[BUG]  [BUGGY]  if(removed!=  null)removed;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(removed!=  null)removed;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(removed!=  null)removed;	  if(previous!=    null)removed;    	non-compiled	[CE]  not  a  statement	29	None	replace
426	[BUG]  [BUGGY]  if(replaced  ==  null)removed;  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)removed;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)removed;	  if(previous!=    null)removed;    	non-compiled	[CE]  not  a  statement	29	None	replace
427	[BUG]  [BUGGY]  if(previous  ==  null)removed;  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)removed;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)removed;	  if(previous!=    null)removed;    	non-compiled	[CE]  not  a  statement	29	None	replace
428	[BUG]  [BUGGY]  if(preserved!=  null)removed;  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(preserved!=  null)removed;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(preserved!=  null)removed;	  if(previous!=    null)removed;    	non-compiled	[CE]  not  a  statement	29	None	replace
429	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  name);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  name);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  name);  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    name);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
430	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  +  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  +  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  +	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    name);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
431	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named  [CE]  unclosed  string  literal  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    name);    }    	non-compiled	[CE]  unclosed  string  literal	80	None	replace
432	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named  [CE]  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    name);    }    	non-compiled	[CE]  	80	None	replace
433	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  name);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  name);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  name);  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    name);    }    	non-compiled	[CE]  	80	None	replace
434	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replace(boundField);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replace(boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replace(boundField);	  if(previous!=    null)replaced    =    replace(boundField);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
435	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replace(boundField,  replaced);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replace(boundField,  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replace(boundField,  replaced);	  if(previous!=    null)replaced    =    replace(boundField);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
436	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replace(replaced,  boundField);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replace(replaced,  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replace(replaced,  boundField);	  if(previous!=    null)replaced    =    replace(boundField);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
437	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replace(field);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replace(field);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replace(field);	  if(previous!=    null)replaced    =    replace(boundField);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
438	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replace(field,  replaced);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replace(field,  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replace(field,  replaced);	  if(previous!=    null)replaced    =    replace(boundField);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
439	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replace(boundField,  declaredType);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replace(boundField,  declaredType);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replace(boundField,  declaredType);	  if(previous!=    null)replaced    =    replace(boundField);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
440	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  0];  [CE]  ']'  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  0];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  0];	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    -    1];    	non-compiled	[CE]  ']'  expected	2	None	replace
441	[BUG]  [BUGGY]  if(preserved!=  null)replaced  =  boundField;  [CE]  cannot  find  symbol  preserved  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(preserved!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(preserved!=  null)replaced  =  boundField;	  if(preserved!=    null)replaced;    	non-compiled	[CE]  cannot  find  symbol  preserved	30	None	replace
442	[BUG]  [BUGGY]  if(preserved!=  null)replaced  =  new  BoundField[fieldNames.size()  ];  [CE]  cannot  find  symbol  preserved  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(preserved!=  null)replaced  =  new  BoundField[fieldNames.size()  ];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(preserved!=  null)replaced  =  new  BoundField[fieldNames.size()  ];	  if(preserved!=    null)replaced;    	non-compiled	[CE]  cannot  find  symbol  preserved	30	None	replace
443	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replacement.get(i);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replacement.get(i);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replacement.get(i);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous    =    replaced.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
444	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  predecessor.get(i);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  predecessor.get(i);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  predecessor.get(i);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous    =    replaced.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
445	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  substituted.get(i);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  substituted.get(i);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  substituted.get(i);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous    =    replaced.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
446	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  returned.get(i);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  returned.get(i);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  returned.get(i);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous    =    replaced.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
447	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	21	1	replace
448	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	21	1	replace
449	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  previous;	  if(previous!=    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	21	1	replace
450	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  previous;	  if(previous!=    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	21	1	replace
451	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  original;  [CE]  cannot  find  symbol  original  [FE]        IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  original;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  original;	  if(previous!=    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  original	21	None	replace
452	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]          IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replacement;	  if(previous!=    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  replacement	21	None	replace
453	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	44	9	replace
454	[BUG]  [BUGGY]  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	44	9	replace
455	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	44	1	replace
456	[BUG]  [BUGGY]  if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	44	1	replace
457	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  throw  new  IllegalArgumentException(field.getType()  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=  null)  {  throw  new  IllegalArgumentException(field.getType()  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	44	1	replace
458	[BUG]  [BUGGY]  if(replaced!=  null)  {  throw  new  IllegalArgumentException(field.getType()  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  throw  new  IllegalArgumentException(field.getType()  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  throw  new  IllegalArgumentException(field.getType()  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	44	1	replace
459	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(false);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(false);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous.setAccessible(false);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous.setAccessible(true);    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
460	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  predecessor.setAccessible(true);  }  [CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  predecessor.setAccessible(true);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  predecessor.setAccessible(true);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous.setAccessible(true);    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
461	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  boundField));  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  boundField));  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  boundField));	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    new    BoundField(fieldType,    boundField));    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	76	None	replace
462	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  original));  [CE]  cannot  find  symbol  original  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  original));  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  original));	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    new    BoundField(fieldType,    boundField));    	non-compiled	[CE]  cannot  find  symbol  original	76	None	replace
463	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  oldName));  [CE]  cannot  find  symbol  oldName  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  oldName));  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  oldName));	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    new    BoundField(fieldType,    boundField));    	non-compiled	[CE]  cannot  find  symbol  oldName	76	None	replace
464	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous  >>  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous  >>  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  >>  null)replaced  =  boundField;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	33	None	add
465	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replacement;	  if(previous!=    null)replaced    =    boundField;    If(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  replacement	23	None	replace
466	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  replaced;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    boundField;    If(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	23	None	replace
467	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  returnedField);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  returnedField);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  returnedField);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    boundField);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
468	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    while(previous  ==  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        while(previous    ==    null)replaced    =    boundField;    If(previous  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  boundField;	  timeout    	non-compiled	[CE]  ';'  expected	77	None	add
469	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replace(boundField,  previous);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replace(boundField,  previous);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replace(boundField,  previous);	  if(previous!=    null)replaced    =    replace(boundField);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
470	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replace(boundField,  name);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replace(boundField,  name);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replace(boundField,  name);	  if(previous!=    null)replaced    =    replace(boundField);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
471	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replace(field,  boundField);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replace(field,  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replace(field,  boundField);	  if(previous!=    null)replaced    =    replace(boundField);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
472	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  replaced;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  replaced;	  if(previous    ==    null)replaced    =    boundField;    if(previous    >=    null)replaced    =    boundField;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	36	None	replace
473	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  new  BoundField(boundField);  [CE]  cannot  find  symbol  Previous  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  new  BoundField(boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  new  BoundField(boundField);	  if(previous    ==    null)replaced    =    boundField;    if(Previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  Previous	37	None	replace
474	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  replacement;  [CE]  cannot  find  symbol  Previous  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  replacement;	  if(previous    ==    null)replaced    =    boundField;    if(Previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  Previous	37	None	replace
475	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  new  BoundField(boundField);  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  new  BoundField(boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced  =  new  BoundField(boundField);	  if(previous    ==    null)replaced    =    boundField;    if(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	34	None	replace
476	[BUG]  [BUGGY]  if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
477	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
478	[BUG]  [BUGGY]  if(original!=  null)replaced  =  boundField;  [CE]  cannot  find  symbol  original  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(original!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(original!=  null)replaced  =  boundField;	  if(replaced!=    null)replaced    =    original;    	non-compiled	[CE]  cannot  find  symbol  original	64	None	replace
479	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replacement;  if(previous!=  null)replaced  =  replaced;  [CE]  cannot  find  symbol  replacement  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replacement;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replacement;  if(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous    >>    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  replacement	56	None	replace
480	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replace;  [CE]  cannot  find  symbol  replace  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replace;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replace;	  if(previous!=    null)replaced    =    replaced;    if(previous    >>    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  replace	56	None	replace
481	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  predecessor);  [CE]  cannot  find  symbol  predecessor  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  predecessor);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  predecessor);	  if(replaced!=    null)replaced    =    new    BoundField(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  predecessor	102	None	replace
482	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  replace);  [CE]  cannot  find  symbol  replace  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  replace);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  replace);	  if(replaced!=    null)replaced    =    new    BoundField(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  replace	102	None	replace
483	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  returned);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  returned);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  returned);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    replaced);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
484	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  removed);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  removed);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  removed);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    replaced);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
485	[BUG]  [BUGGY]  if(previous!=  null  &&  result.name!=  null)replaced;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null  &&  result.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null  &&  result.name!=  null)replaced;	  if(previous!=    null    &&    previous.name!=    null)replaced;    	non-compiled	[CE]  not  a  statement	88	None	replace
486	[BUG]  [BUGGY]  if(previous!=  null  &&  old.name!=  null)replaced;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null  &&  old.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null  &&  old.name!=  null)replaced;	  if(previous!=    null    &&    previous.name!=    null)replaced;    	non-compiled	[CE]  not  a  statement	88	None	replace
487	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[0];  [CE]  incompatible  types  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[0];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[0];	  if(replaced!=    null)replaced    =    replaced;    	non-compiled	[CE]  incompatible  types	96	None	replace
488	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(boundField);  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(boundField);	  if(replaced!=    null)replaced    =    replaced;    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	96	None	replace
489	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replace;  if(previous  ==  null)replaced  =  replaced;  [CE]  cannot  find  symbol  replace  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replace;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replace;  if(previous  ==  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  replace	53	None	replace
490	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  previous;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	53	1	replace
491	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  previous;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  previous;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	53	1	replace
492	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replacement;  if(previous  ==  null)replaced  =  replaced;  [CE]  cannot  find  symbol  replacement  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replacement;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replacement;  if(previous  ==  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  replacement	53	None	replace
493	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  replacement;	  if(previous    ==    null)replaced    =    boundField;    If(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  replacement	35	None	replace
494	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  new  BoundField(boundField);  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  new  BoundField(boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  new  BoundField(boundField);	  if(previous    ==    null)replaced    =    boundField;    If(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	35	None	replace
495	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserialize);  [CE]  cannot  find  symbol  BindField  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserialize);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserialize);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serialize,    boundField);    	non-compiled	[CE]  cannot  find  symbol  BindField	8	None	replace
496	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(field,  serialize,  boundField);  [CE]  cannot  find  symbol  BindField  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(field,  serialize,  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(field,  serialize,  boundField);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serialize,    boundField);    	non-compiled	[CE]  cannot  find  symbol  BindField	8	None	replace
497	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  previous);  [CE]  cannot  find  symbol  BindField  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  previous);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  previous);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serialize,    boundField);    	non-compiled	[CE]  cannot  find  symbol  BindField	8	None	replace
498	[BUG]  [BUGGY]  if(previous!=  null)serialize  =  fieldNames;  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)serialize  =  fieldNames;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)serialize  =  fieldNames;	  if(previous!=    null)removed    =    fieldNames;    	non-compiled	[CE]  incompatible  types	79	None	replace
499	[BUG]  [BUGGY]  if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
500	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fields[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fields[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fields[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
501	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(boundField,  false);  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(boundField,  false);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(boundField,  false);	  if(replaced    ==    null)replaced    =    boundField;    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	68	None	replace
502	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  name,  boundField);  [CE]  cannot  find  symbol  BindField  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  name,  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  name,  boundField);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serializedName,    boundField);    	non-compiled	[CE]  cannot  find  symbol  BindField	11	None	replace
503	[BUG]  [BUGGY]  if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
504	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
505	[BUG]  [BUGGY]  if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i];  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
506	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  current);  [CE]  cannot  find  symbol  current  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  current);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  current);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    original);    	non-compiled	[CE]  cannot  find  symbol  current	75	None	replace
507	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replacement;  If(previous!=  null)replaced  =  replaced;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replacement;  If(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replacement;  If(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    If(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  ';'  expected	55	None	replace
508	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replace;  If(previous!=  null)replaced  =  replaced;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replace;  If(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replace;  If(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    If(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  ';'  expected	55	None	replace
509	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(field);  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(field);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(field);	  if(replaced!=    null)replaced    =    new    BoundField(field);    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	101	None	replace
510	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  boundField);  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(field,  boundField);	  if(replaced!=    null)replaced    =    new    BoundField(field);    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	101	None	replace
511	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  predecessor);  [CE]  cannot  find  symbol  predecessor  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  predecessor);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(field,  predecessor);	  if(replaced!=    null)replaced    =    new    BoundField(field);    	non-compiled	[CE]  cannot  find  symbol  predecessor	101	None	replace
512	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getSuperclass();  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getSuperclass();  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
513	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  boundField.getSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  boundField.getSuperclass();  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  boundField.getSuperclass();  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
514	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  replaced.getSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  replaced.getSuperclass();  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  replaced.getSuperclass();  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
515	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replacement;  [CE]  cannot  find  symbol  replacement  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replacement;	  	non-compiled	[CE]  cannot  find  symbol  replacement	50	None	add
516	[BUG]  [BUGGY]  if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i].getName();    if(name!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
517	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i].getName();    if(name!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
518	[BUG]  [BUGGY]  if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
519	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( "  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( "	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	82	None	replace
520	[BUG]  [BUGGY]  if(fieldNames!=  null)replaced  =  new  BoundField[fieldNames.size()  ];  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(fieldNames!=  null)replaced  =  new  BoundField[fieldNames.size()  ];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(fieldNames!=  null)replaced  =  new  BoundField[fieldNames.size()  ];	  if(replaced!=    null)replaced    =    new    BoundField[fieldNames.size()    ];    	non-compiled	[CE]  incompatible  types	1	None	replace
521	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  -  2];  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  -  2];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  -  2];	  if(replaced!=    null)replaced    =    new    BoundField[fieldNames.size()    ];    	non-compiled	[CE]  incompatible  types	1	None	replace
522	[BUG]  [BUGGY]  if(previous!=  null)replaced.name;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced.name;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced.name;	  if(previous    ==    null)replaced;    	non-compiled	[CE]  not  a  statement	27	None	replace
523	[BUG]  [BUGGY]  timeout  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  while(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous    ==    null)replaced    =    replaced;    while(previous  ==  null)replaced  =  replaced;	  	compilable	timeout	69	1	add
524	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  replaced;  while(previous  ==  null)replaced  =  replaced;  timeout  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  while(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous    ==    null)replaced    =    replaced;    while(previous  ==  null)replaced  =  replaced;	  	compilable	timeout	69	1	add
525	[BUG]  [BUGGY]  if(previous!=  null)removed  =  new  BoundField(fieldNames[i]);  [CE]  cannot  find  symbol  removed  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)removed  =  new  BoundField(fieldNames[i]);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)removed  =  new  BoundField(fieldNames[i]);	  if(previous!=    null)removed    =    original;    	non-compiled	[CE]  cannot  find  symbol  removed	16	None	replace
526	[BUG]  [BUGGY]  if(previous!=  null  ||  previous.name  ==  null)replaced;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null  ||  previous.name  ==  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null  ||  previous.name  ==  null)replaced;	  if(previous!=    null    ||    previous.name!=    null)replaced;    	non-compiled	[CE]  not  a  statement	87	None	replace
527	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  while(replaced  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced    ==    null)replaced    =    boundField;    while(replaced  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	67	9	add
528	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  while(replaced  ==  null)replaced  =  boundField;  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  while(replaced  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    boundField;    while(replaced  ==  null)replaced  =  boundField;	  	compilable	  [FE]  IllegalArgumentException  	67	9	add
529	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  field;  if(previous!=  null)replaced  =  boundField;  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  field;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  field;  if(previous!=  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replacement;    	non-compiled	[CE]  incompatible  types	57	None	replace
530	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  raw;  if(previous!=  null)replaced  =  boundField;  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  raw;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  raw;  if(previous!=  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replacement;    	non-compiled	[CE]  incompatible  types	57	None	replace
531	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[i];  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[i];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField[i];	  if(previous!=    null)replaced    =    replacement;    	non-compiled	[CE]  incompatible  types	71	None	replace
532	[BUG]  [BUGGY]  if(previous!=  null)serialize  =  previous;  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)serialize  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)serialize  =  previous;	  if(previous!=    null)replaced    =    replacement;    	non-compiled	[CE]  incompatible  types	71	None	replace
533	[BUG]  [BUGGY]  Field[]  fields  =  name.toArray(replaced);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  Field[]  fields  =  name.toArray(replaced);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	Field[]  fields  =  name.toArray(replaced);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fields    =    fieldNames.toArray(replaced);    if(fields!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	92	None	replace
534	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replace;  if(previous!=  null)replaced  =  replaced;  [CE]  cannot  find  symbol  replace  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replace;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replace;  if(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  replace	51	None	replace
535	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replacement;  if(previous!=  null)replaced  =  replaced;  [CE]  cannot  find  symbol  replacement  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replacement;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replacement;  if(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  replacement	51	None	replace
536	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  >>  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  >>  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous  >>  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	18	None	add
537	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced;  if(previous!=  null)replaced  =  boundField;  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous!=  null)replaced;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous!=    null)replaced    =    boundField;    if(previous!=  null)replaced;  if(previous!=  null)replaced  =  boundField;	  	non-compiled	[CE]  not  a  statement	18	None	add
538	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  preferred;  [CE]  cannot  find  symbol  preferred  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  preferred;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  preferred;	  if(replaced!=    null)replaced    =    preferred;    	non-compiled	[CE]  cannot  find  symbol  preferred	60	None	replace
539	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType),  boundField);  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType),  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType),  boundField);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    boundField);    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	7	None	replace
540	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  previous);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  previous);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  previous);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    previous);    	non-compiled	[CE]  ')'  expected	89	None	replace
541	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  raw);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  raw);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  raw);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
542	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  name);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  name);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  name);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
543	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  raw);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  raw);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  raw);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
544	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  -  1  ],  replaced);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  -  1  ],  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  -  1  ],  replaced);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
545	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  previous);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  previous);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  previous);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
546	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  prev);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  prev);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  prev);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
547	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  boundField);  [CE]  array  required,  but  List<String>  found  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  boundField);	  if(previous!=    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	83	None	replace
548	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames,  replaced);  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames,  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField(fieldNames,  replaced);	  if(previous!=    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	83	None	replace
549	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  original);  [CE]  array  required,  but  List<String>  found  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  original);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  original);	  if(previous!=    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	83	None	replace
550	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  name);  [CE]  array  required,  but  List<String>  found  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  name);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  name);	  if(previous!=    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	83	None	replace
551	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  previous);  [CE]  array  required,  but  List<String>  found  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  previous);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  previous);	  if(previous!=    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	83	None	replace
552	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  >>  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  >>  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous  >>  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	20	None	add
553	[BUG]  [BUGGY]  timeout  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  previous;  while(replaced  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced    ==    null)replaced    =    previous;    while(replaced  ==  null)replaced  =  previous;	  	compilable	timeout	62	1	add
554	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  previous;  while(replaced  ==  null)replaced  =  previous;  timeout  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  previous;  while(replaced  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    previous;    while(replaced  ==  null)replaced  =  previous;	  	compilable	timeout	62	1	add
555	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  previous;  for(replaced  ==  null)replaced  =  previous;  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  previous;  for(replaced  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    previous;    for(replaced  ==  null)replaced  =  previous;	  	non-compiled	[CE]  not  a  statement	62	None	add
556	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  previous);  [CE]  cannot  find  symbol  BindField  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  previous);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  previous);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    returned);    	non-compiled	[CE]  cannot  find  symbol  BindField	73	None	replace
557	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  denominator);  [CE]  cannot  find  symbol  denominator  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  denominator);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  denominator);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    replacement);    	non-compiled	[CE]  cannot  find  symbol  denominator	10	None	replace
558	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getGenericSuperclass();  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  type  =  type.getGenericSuperclass();  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
559	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  boundField.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  boundField.getGenericSuperclass();  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  boundField.getGenericSuperclass();  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
560	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  method.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  method.getGenericSuperclass();  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  type  =  method.getGenericSuperclass();  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
561	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  replace);  [CE]  cannot  find  symbol  replace  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  replace);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  replace);	  if(replaced    ==    null)replaced    =    new    BoundField(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  replace	98	None	replace
562	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  predecessor);  [CE]  cannot  find  symbol  predecessor  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  predecessor);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  predecessor);	  if(replaced    ==    null)replaced    =    new    BoundField(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  predecessor	98	None	replace
563	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  JSONField[fieldNames.size()  ];  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  JSONField[fieldNames.size()  ];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  JSONField[fieldNames.size()  ];	  if(replaced!=    null)replaced;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
564	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  boundField);  [CE]  array  required,  but  List<String>  found  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  boundField);	  if(replaced    ==    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	72	None	replace
565	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames[i],  boundField);  [CE]  array  required,  but  List<String>  found  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames[i],  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(fieldNames[i],  boundField);	  if(replaced    ==    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	72	None	replace
566	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaceable);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaceable);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaceable);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    replacement);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
567	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result.put(name,  replacement);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result.put(name,  replacement);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result.put(name,  replacement);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    replacement);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
568	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result.put(name,  replaced);  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result.put(name,  replaced);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result.put(name,  replaced);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    replacement);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
569	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  new  BoundField(fieldNames);  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  new  BoundField(fieldNames);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  new  BoundField(fieldNames);	  if(replaced    ==    null)replaced    =    previous;    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	63	None	replace
570	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  replaceNull();  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaceNull();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  replaceNull();	  if(replaced    ==    null)replaced    =    previous;    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
571	[BUG]  [BUGGY]  if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  +  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  +  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  +	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    name);    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
572	[BUG]  [BUGGY]  if(replaced!=  null)replaced.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced.clone();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced.clone();	  if(replaced    ==    null)replaced;    	non-compiled	[CE]  clone()  has  protected  access  in  Object	28	None	replace
573	[BUG]  [BUGGY]  timeout  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced;  while(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=  null)replaced  =  replaced;  while(previous  ==  null)replaced  =  boundField;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	timeout	78	1	replace
574	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replaced;  while(previous  ==  null)replaced  =  boundField;  timeout  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced;  while(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replaced;  while(previous  ==  null)replaced  =  boundField;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	timeout	78	1	replace
575	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  predecessor;  [CE]  cannot  find  symbol  predecessor  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  predecessor;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  predecessor;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	non-compiled	[CE]  cannot  find  symbol  predecessor	78	None	replace
576	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  TreeMap  <  ComparisonFailure>();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  TreeMap  <  ComparisonFailure>();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  TreeMap  <  ComparisonFailure>();	  if(replaced!=    null)replaced    =    new    ArrayList    <    ComparisonFailure>();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
577	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  ArrayList  <  ComparableFailure>();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  ArrayList  <  ComparableFailure>();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  ArrayList  <  ComparableFailure>();	  if(replaced!=    null)replaced    =    new    ArrayList    <    ComparisonFailure>();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
578	[BUG]  [BUGGY]  if(fieldNames  ==  null)replaced  =  new  BoundField[fieldNames.size()  ];  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(fieldNames  ==  null)replaced  =  new  BoundField[fieldNames.size()  ];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(fieldNames  ==  null)replaced  =  new  BoundField[fieldNames.size()  ];	  if(replaced    ==    null)replaced    =    new    BoundField[fieldNames.size()    ];    	non-compiled	[CE]  incompatible  types	3	None	replace
579	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField[fieldNames.size()  -  2];  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField[fieldNames.size()  -  2];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField[fieldNames.size()  -  2];	  if(replaced    ==    null)replaced    =    new    BoundField[fieldNames.size()    ];    	non-compiled	[CE]  incompatible  types	3	None	replace
580	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[i];  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[i];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[i];	  if(replaced!=    null)replaced    =    preferred;    	non-compiled	[CE]  incompatible  types	60	None	replace
581	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  1];  [CE]  ']'  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  1];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField[fieldNames.size()  1];	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    -    1];    	non-compiled	[CE]  ']'  expected	2	None	replace
582	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  }	  	non-compiled	[CE]  illegal  start  of  type	31	None	add
583	[BUG]  [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  headerField;  if(previous  ==  null)replaced  =  boundField;  [CE]  cannot  find  symbol  headerField  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  headerField;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous        ==        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  headerField;  if(previous  ==  null)replaced  =  boundField;	  	non-compiled	[CE]  cannot  find  symbol  headerField	31	None	add
584	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type,  previous);  [CE]  cannot  find  symbol  BindField  [FE]                          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type,  previous);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type,  previous);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    type);    	non-compiled	[CE]  cannot  find  symbol  BindField	12	None	replace
585	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type,  serializedName);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  type,  serializedName);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	12	None	replace
586	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  row;  if(previous!=  null)replaced  =  row;  [CE]  cannot  find  symbol  row  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  row;  if(previous!=  null)replaced  =  row;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  row;  if(previous!=  null)replaced  =  row;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replacement;    	non-compiled	[CE]  cannot  find  symbol  row	57	None	replace
587	[BUG]  [BUGGY]  if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  original.name);  }  [CE]  cannot  find  symbol  original  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  original.name);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  original.name);  }	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  original	44	None	replace
588	[BUG]  [BUGGY]  if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  last.name);  }  [CE]  cannot  find  symbol  last  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  last.name);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  last.name);  }	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  last	44	None	replace
589	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declared  in  JSON  fields  named   "  +  previous.name);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declared  in  JSON  fields  named   "  +  previous.name);  }	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	44	1	replace
590	[BUG]  [BUGGY]  if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declared  in  JSON  fields  named   "  +  previous.name);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declared  in  JSON  fields  named   "  +  previous.name);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declared  in  JSON  fields  named   "  +  previous.name);  }	          if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	44	1	replace
591	[BUG]  [BUGGY]          if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(replaced!=  null)  throw  new  IllegalArgumentException(   "   ");  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]          if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(replaced!=  null)  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	                if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(replaced!=  null)  throw  new  IllegalArgumentException(   "   ");  }	  	non-compiled	[CE]  illegal  start  of  type	43	None	add
592	[BUG]  [BUGGY]          if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(replaced  >>  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]          if(replaced!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(replaced  >>  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	                if(replaced!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(replaced  >>  null)  {  throw  new  IllegalArgumentException(   "   ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	43	None	add
593	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  reverse);  [CE]  cannot  find  symbol  reverse  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  reverse);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  reverse);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    replacement);    	non-compiled	[CE]  cannot  find  symbol  reverse	10	None	replace
594	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  current);  [CE]  cannot  find  symbol  current  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  current);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  current);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    replaced);    	non-compiled	[CE]  cannot  find  symbol  current	6	None	replace
595	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  previous;  if(replaced  {  null)replaced  =  previous;  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  previous;  if(replaced  {  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    previous;    if(replaced  {  null)replaced  =  previous;	  	non-compiled	[CE]  ')'  expected	62	None	add
596	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  prior;  [CE]  cannot  find  symbol  prior  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  previous;  if(replaced  ==  null)replaced  =  prior;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    previous;    if(replaced  ==  null)replaced  =  prior;	  	non-compiled	[CE]  cannot  find  symbol  prior	62	None	add
597	[BUG]  [BUGGY]  if(previous!=  null)removed  =  new  LinkedList  <  Field>();  [CE]  cannot  find  symbol  removed  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)removed  =  new  LinkedList  <  Field>();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)removed  =  new  LinkedList  <  Field>();	  if(previous!=    null)removed    =    fieldNames;    	non-compiled	[CE]  cannot  find  symbol  removed	79	None	replace
598	[BUG]  [BUGGY]  if(previous!=  null)removed  =  new  ArrayList  <  Field>();  [CE]  cannot  find  symbol  removed  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)removed  =  new  ArrayList  <  Field>();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)removed  =  new  ArrayList  <  Field>();	  if(previous!=    null)removed    =    fieldNames;    	non-compiled	[CE]  cannot  find  symbol  removed	79	None	replace
599	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  boundField;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    boundField;    If(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	23	None	replace
600	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replacement;  If(previous!=  null)replaced  =  boundField;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replacement;  If(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replacement;  If(previous!=  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    boundField;    If(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	23	None	replace
601	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  replacement;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  replacement;	  if(previous!=    null)replaced    =    boundField;    If(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	23	None	replace
602	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  predecessor;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  predecessor;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  boundField;  If(previous!=  null)replaced  =  predecessor;	  if(previous!=    null)replaced    =    boundField;    If(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	23	None	replace
603	[BUG]  [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replacement.get(i);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replacement.get(i);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replacement.get(i);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous    =    replaced.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
604	[BUG]  [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  predecessor.get(i);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  predecessor.get(i);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	while(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  predecessor.get(i);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous    =    replaced.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
605	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replaced.get(0);  }  [CE]  '.class'  expected  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replaced.get(0);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	For(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  previous  =  replaced.get(0);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    previous    =    replaced.get(i);    }    	non-compiled	[CE]  '.class'  expected	91	None	replace
606	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  {  null)replaced  =  boundField;  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(replaced  {  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced    ==    null)replaced    =    boundField;    if(replaced  {  null)replaced  =  boundField;	  	non-compiled	[CE]  ')'  expected	67	None	add
607	[BUG]  [BUGGY]  if(replaced!=  null  &&  previous.name!=  null)replaced;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null  &&  previous.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null  &&  previous.name!=  null)replaced;	  if(replaced!=    null)replaced;    	non-compiled	[CE]  not  a  statement	26	None	replace
608	[BUG]  [BUGGY]  if(replaced!=  null  &&  replaced.size()  >  0)replaced;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null  &&  replaced.size()  >  0)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null  &&  replaced.size()  >  0)replaced;	  if(replaced!=    null)replaced;    	non-compiled	[CE]  not  a  statement	26	None	replace
609	[BUG]  [BUGGY]  if(previous!=  null  &&  replacement.name!=  null)replaced;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null  &&  replacement.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null  &&  replacement.name!=  null)replaced;	  if(previous!=    null    &&    previous.name!=    null)replaced;    	non-compiled	[CE]  not  a  statement	88	None	replace
610	[BUG]  [BUGGY]  if(previous!=  null  &&  returned.name!=  null)replaced;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null  &&  returned.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null  &&  returned.name!=  null)replaced;	  if(previous!=    null    &&    previous.name!=    null)replaced;    	non-compiled	[CE]  not  a  statement	88	None	replace
611	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  removed);  [CE]  cannot  find  symbol  removed  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(field,  removed);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(field,  removed);	  if(replaced!=    null)replaced    =    new    BoundField(field);    	non-compiled	[CE]  cannot  find  symbol  removed	101	None	replace
612	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  predecessor;  [CE]  cannot  find  symbol  predecessor  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  predecessor;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  predecessor;	  if(previous    ==    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  predecessor	32	None	replace
613	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  boundField;	  if(previous    ==    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	32	1	replace
614	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  boundField;  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  boundField;	  if(previous    ==    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	32	1	replace
615	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;	  if(previous    ==    null)replaced    =    boundField;    if(previous!=    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
616	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  replaced;	  if(previous    ==    null)replaced    =    boundField;    if(previous!=    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	34	1	replace
617	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  replaced;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replaced;  If(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    If(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  ';'  expected	55	None	replace
618	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  boundField;  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  boundField;  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  boundField;  }	  if(previous    ==    null)replaced    =    boundField;    if(previous    {    null)replaced    =    boundField;    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
619	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  condition);  [CE]  array  required,  but  List<String>  found  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  condition);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  condition);	  if(previous!=    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	83	None	replace
620	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  ordered);  [CE]  array  required,  but  List<String>  found  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  ordered);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  new  BoundField(fieldNames[i],  ordered);	  if(previous!=    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	83	None	replace
621	[BUG]  [BUGGY]  timeout  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	timeout	78	1	replace
622	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  previous;  timeout  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	timeout	78	1	replace
623	[BUG]  [BUGGY]  timeout  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  while(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous  ==  null)replaced  =  replaced;  while(previous  ==  null)replaced  =  boundField;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	timeout	78	1	replace
624	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  replaced;  while(previous  ==  null)replaced  =  boundField;  timeout  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  while(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  replaced;  while(previous  ==  null)replaced  =  boundField;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	compilable	timeout	78	1	replace
625	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  predecessor;  [CE]  cannot  find  symbol  predecessor  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  predecessor;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  while(previous  ==  null)replaced  =  predecessor;	  if(previous    ==    null)replaced    =    boundField;    while(previous    ==    null)replaced    =    boundField;    timeout    	non-compiled	[CE]  cannot  find  symbol  predecessor	78	None	replace
626	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  predecessor;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  predecessor;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  predecessor;	  if(previous    ==    null)replaced    =    boundField;    if(previous    >=    null)replaced    =    boundField;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	36	None	replace
627	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  replacement;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  if(previous  >=  null)replaced  =  replacement;	  if(previous    ==    null)replaced    =    boundField;    if(previous    >=    null)replaced    =    boundField;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	36	None	replace
628	[BUG]  [BUGGY]  while(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaced);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaced);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	while(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaced);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    replacement);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
629	[BUG]  [BUGGY]  while(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replacement);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replacement);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	while(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replacement);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    replacement);    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
630	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	21	1	replace
631	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  boundField;  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	21	1	replace
632	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replacement;  if(previous  ==  null)replaced  =  boundField;  [CE]  cannot  find  symbol  replacement  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replacement;  if(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replacement;  if(previous  ==  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    boundField;    if(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  replacement	21	None	replace
633	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    boundField;    if(previous    >>    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	24	1	replace
634	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  boundField;  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    boundField;    if(previous    >>    null)replaced    =    boundField;    	compilable	  [FE]  ComparisonFailure  	24	1	replace
635	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replacement;  if(previous!=  null)replaced  =  boundField;  [CE]  cannot  find  symbol  replacement  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replacement;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replacement;  if(previous!=  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    boundField;    if(previous    >>    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  replacement	24	None	replace
636	[BUG]  [BUGGY]  type  =  type.getSuperclass();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  type  =  type.getSuperclass();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	type  =  type.getSuperclass();	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    type    =    type.getSuperclass();    }    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
637	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  reverse,  boundField);  [CE]  cannot  find  symbol  reverse  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  reverse,  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  reverse,  boundField);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serializedName,    boundField);    	non-compiled	[CE]  cannot  find  symbol  reverse	11	None	replace
638	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  saved;  [CE]  cannot  find  symbol  Previous  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  saved;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  saved;	  if(previous    ==    null)replaced    =    boundField;    if(Previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  Previous	37	None	replace
639	[BUG]  [BUGGY]  if(replaced!=  null)replaced.addAll(new  ArrayList  <  ComparisonFailure>());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced.addAll(new  ArrayList  <  ComparisonFailure>());  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced.addAll(new  ArrayList  <  ComparisonFailure>());	  if(replaced!=    null)replaced    =    new    ArrayList    <    ComparisonFailure>();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
640	[BUG]  [BUGGY]  if(replaced  ==  null  ||  previous.name!=  null)replaced;  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null  ||  previous.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null  ||  previous.name!=  null)replaced;	  if(replaced    ==    null)replaced;    	non-compiled	[CE]  not  a  statement	28	None	replace
641	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  LinkedHashMap  <  String,  JSON>();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  LinkedHashMap  <  String,  JSON>();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  LinkedHashMap  <  String,  JSON>();	  if(replaced    ==    null)replaced;    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
642	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  replaced);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  replaced);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
643	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  preferred);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  preferred);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  preferred);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
644	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  saved);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  saved);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  saved);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
645	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  removed);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  removed);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField[fieldNames.size()  ],  removed);	  if(previous!=    null)replaced    =    new    BoundField[fieldNames.size()    ],    replaced);    	non-compiled	[CE]  ';'  expected	90	None	replace
646	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  previous));  [CE]  BoundField  is  abstract;  cannot  be  instantiated  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  previous));  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  previous));	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    new    BoundField(fieldType,    boundField));    	non-compiled	[CE]  BoundField  is  abstract;  cannot  be  instantiated	76	None	replace
647	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  factory));  [CE]  cannot  find  symbol  factory  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  factory));  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  new  BoundField(fieldType,  factory));	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    new    BoundField(fieldType,    boundField));    	non-compiled	[CE]  cannot  find  symbol  factory	76	None	replace
648	[BUG]  [BUGGY]  if(preserved!=  null  &&  replaced.isPrimitive())replaced;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(preserved!=  null  &&  replaced.isPrimitive())replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(preserved!=  null  &&  replaced.isPrimitive())replaced;	  if(preserved!=    null)replaced;    	non-compiled	[CE]  not  a  statement	30	None	replace
649	[BUG]  [BUGGY]  if(preserved!=  null  &&  previous.name!=  null)replaced;  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(preserved!=  null  &&  previous.name!=  null)replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(preserved!=  null  &&  previous.name!=  null)replaced;	  if(preserved!=    null)replaced;    	non-compiled	[CE]  not  a  statement	30	None	replace
650	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	51	1	replace
651	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	51	1	replace
652	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  removed;  if(previous!=  null)replaced  =  replaced;  [CE]  cannot  find  symbol  removed  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  removed;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  removed;  if(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  removed	51	None	replace
653	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  saved;  if(previous!=  null)replaced  =  replaced;  [CE]  cannot  find  symbol  saved  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  saved;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  saved;  if(previous!=  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous!=    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  saved	51	None	replace
654	[BUG]  [BUGGY]  while(fieldNames!=  null  &&  fieldNames.size()  >  0)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaced);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(fieldNames!=  null  &&  fieldNames.size()  >  0)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaced);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	while(fieldNames!=  null  &&  fieldNames.size()  >  0)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result.put(name,  replaced);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    result.put(name,    replaced);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
655	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  condition);  [CE]  array  required,  but  List<String>  found  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  condition);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(fieldNames[i],  condition);	  if(replaced    ==    null)replaced    =    new    BoundField(fieldNames[i]);    	non-compiled	[CE]  array  required,  but  List<String>  found	72	None	replace
656	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserialized);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserialized);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serialize,    boundField);    	non-compiled	[CE]  cannot  find  symbol  deserialized	8	None	replace
657	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserializer);  [CE]  cannot  find  symbol  deserializer  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserializer);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  BindField.createBoundField(context,  field,  serialize,  deserializer);	  if(previous!=    null)replaced    =    BindField.createBoundField(context,    field,    serialize,    boundField);    	non-compiled	[CE]  cannot  find  symbol  deserializer	8	None	replace
658	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i].getName();    if(name!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
659	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fields[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fields[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fields[i].getName();  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i].getName();    if(name!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
660	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	add	if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	53	1	replace
661	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	compilable	  [FE]  ComparisonFailure  	53	1	replace
662	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replacement;  if(previous  ==  null)replaced  =  replaced;  [CE]  cannot  find  symbol  replacement  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replacement;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replacement;  if(previous  ==  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  replacement	53	None	replace
663	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  removed;  if(previous  ==  null)replaced  =  replaced;  [CE]  cannot  find  symbol  removed  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  removed;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  removed;  if(previous  ==  null)replaced  =  replaced;	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol  removed	53	None	replace
664	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  new  JSONReplacement();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  new  JSONReplacement();  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  new  JSONReplacement();	  if(previous!=    null)replaced    =    replaced;    if(previous    ==    null)replaced    =    replaced;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
665	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  removed);  [CE]  cannot  find  symbol  removed  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  removed);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(fieldNames,  removed);	  if(replaced    ==    null)replaced    =    new    BoundField(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  removed	98	None	replace
666	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  factory);  [CE]  cannot  find  symbol  factory  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  factory);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  BindField.createBoundField(context,  field,  name,  factory);	  if(replaced!=    null)replaced    =    BindField.createBoundField(context,    field,    name,    replaced);    	non-compiled	[CE]  cannot  find  symbol  factory	9	None	replace
667	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  returned;  if(previous!=  null)replaced  =  boundField;  [CE]  cannot  find  symbol  returned  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  returned;  if(previous!=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  returned;  if(previous!=  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    boundField;    if(previous!=    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol  returned	19	None	replace
668	[BUG]  [BUGGY]  while(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  while(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	while(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
669	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
670	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField[fieldNames.size()  ],  replaced);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField[fieldNames.size()  ],  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField[fieldNames.size()  ],  replaced);	  if(replaced    ==    null)replaced    =    new    BoundField[fieldNames.size()    ];    	non-compiled	[CE]  ';'  expected	3	None	replace
671	[BUG]  [BUGGY]  if(removed!=  null)removed  =  result;  [CE]  cannot  find  symbol  removed  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(removed!=  null)removed  =  result;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(removed!=  null)removed  =  result;	  if(previous!=    null)removed    =    result;    	non-compiled	[CE]  cannot  find  symbol  removed	14	None	replace
672	[BUG]  [BUGGY]  if(removed!=  null)removed  =  previous;  [CE]  cannot  find  symbol  removed  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(removed!=  null)removed  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(removed!=  null)removed  =  previous;	  if(previous!=    null)removed    =    result;    	non-compiled	[CE]  cannot  find  symbol  removed	14	None	replace
673	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  replaced;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  replaced;	  if(previous    ==    null)replaced    =    boundField;    If(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	35	None	replace
674	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  replaced;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  replaced;	  if(previous    ==    null)replaced    =    boundField;    If(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	35	None	replace
675	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  replacement;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  replacement;	  if(previous    ==    null)replaced    =    boundField;    If(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	35	None	replace
676	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  replaced;  If(previous  ==  null)replaced  =  boundField;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  replaced;  If(previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  replaced;  If(previous  ==  null)replaced  =  boundField;	  if(previous    ==    null)replaced    =    boundField;    If(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	35	None	replace
677	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  previous;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  previous;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  previous;	  if(previous    ==    null)replaced    =    boundField;    If(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	35	None	replace
678	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  replacement;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  replacement;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  replacement;	  if(previous    ==    null)replaced    =    boundField;    If(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	35	None	replace
679	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  predecessor;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  predecessor;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  boundField;  If(previous  ==  null)replaced  =  predecessor;	  if(previous    ==    null)replaced    =    boundField;    If(previous    ==    null)replaced    =    boundField;    	non-compiled	[CE]  ';'  expected	35	None	replace
680	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  J  [CE]  unclosed  string  literal  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  J  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  J	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name!=    null)    {    throw    new    IllegalArgumentException(declaredType    +   "    declares    multiple    JSON    fields    named       "    +    name);    }    	non-compiled	[CE]  unclosed  string  literal	80	None	replace
681	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous  >=  null)replaced  =  boundField;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced;  if(previous  >=  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replaced;  if(previous  >=  null)replaced  =  boundField;	  if(previous!=    null)replaced    =    boundField;    if(previous    >=    null)replaced    =    boundField;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	22	None	replace
682	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
683	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
684	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(boundField.getType());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField(boundField.getType());  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField(boundField.getType());	  if(replaced    ==    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
685	[BUG]  [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField[0];  [CE]  incompatible  types  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced  ==  null)replaced  =  new  BoundField[0];  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced  ==  null)replaced  =  new  BoundField[0];	  if(replaced    ==    null)replaced    =    boundField;    	non-compiled	[CE]  incompatible  types	68	None	replace
686	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replace(replaced);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replace(replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replace(replaced);	  if(previous!=    null)replaced    =    replace(boundField);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
687	[BUG]  [BUGGY]  if(previous!=  null)replaced  =  replaced(boundField);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)replaced  =  replaced(boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)replaced  =  replaced(boundField);	  if(previous!=    null)replaced    =    replace(boundField);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
688	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replace(previous,  boundField);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replace(previous,  boundField);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  replace(previous,  boundField);	  if(previous!=    null)replaced    =    replace(boundField);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
689	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  removed);  [CE]  cannot  find  symbol  removed  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  removed);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(fieldNames,  removed);	  if(replaced!=    null)replaced    =    new    BoundField(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  removed	102	None	replace
690	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(replaced!=  null)replaced  =  replace;  [CE]  cannot  find  symbol  replace  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  replaced;  if(replaced!=  null)replaced  =  replace;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=    null)replaced    =    replaced;    if(replaced!=  null)replaced  =  replace;	  	non-compiled	[CE]  cannot  find  symbol  replace	95	None	add
691	[BUG]  [BUGGY]  Field[]  fields  =  replaced.toArray(replaced);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  Field[]  fields  =  replaced.toArray(replaced);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	Field[]  fields  =  replaced.toArray(replaced);  if(fields!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          Field[]    fields    =    fieldNames.toArray(replaced);    if(fields!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	92	None	replace
692	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  name  =  fieldNames[i];  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  name  =  fieldNames[i];  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  name  =  fieldNames[i];  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
693	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].name;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].name;  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i].name;  }	          if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
694	[BUG]  [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(boundField.getType());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)replaced  =  new  BoundField(boundField.getType());  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)replaced  =  new  BoundField(boundField.getType());	  if(replaced!=    null)replaced    =    boundField;    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
695	[BUG]  [BUGGY]  if(previous  ==  null)replaced  =  new  BoundField[fieldNames.size()  ],  replaced);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous  ==  null)replaced  =  new  BoundField[fieldNames.size()  ],  replaced);  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous  ==  null)replaced  =  new  BoundField[fieldNames.size()  ],  replaced);	  if(previous    ==    null)replaced    =    new    BoundField[fieldNames.size()    ];    	non-compiled	[CE]  ';'  expected	4	None	replace
696	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
697	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
698	[BUG]  [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fields[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fields[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(replaced!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fields[i];  if(name  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(replaced!=    null)    {    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    String    name    =    fieldNames[i];    if(name    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
699	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replace;  if(previous!=  null)replaced  =  replaced;  [CE]  cannot  find  symbol  replace  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replace;  if(previous!=  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replace;  if(previous!=  null)replaced  =  replaced;	  	non-compiled	[CE]  cannot  find  symbol  replace	50	None	add
700	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replace;  [CE]  cannot  find  symbol  replace  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replace;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous!=    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replace;	  	non-compiled	[CE]  cannot  find  symbol  replace	50	None	add
701	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replace;  if(previous  ==  null)replaced  =  replaced;  [CE]  cannot  find  symbol  replace  [FE]    ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replace;  if(previous  ==  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous    ==    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replace;  if(previous  ==  null)replaced  =  replaced;	  	non-compiled	[CE]  cannot  find  symbol  replace	52	None	add
702	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replace;  [CE]  cannot  find  symbol  replace  [FE]      ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replace;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous    ==    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous  ==  null)replaced  =  replace;	  	non-compiled	[CE]  cannot  find  symbol  replace	52	None	add
703	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous  {  null)replaced  =  replaced;  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    replaced;    if(previous  ==  null)replaced  =  replaced;  if(previous!=  null)replaced  =  replaced;  if(previous  {  null)replaced  =  replaced;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        replaced;        if(previous    ==    null)replaced    =    replaced;    if(previous!=  null)replaced  =  replaced;  if(previous  {  null)replaced  =  replaced;	  	non-compiled	[CE]  ')'  expected	52	None	add
704	[BUG]  [BUGGY]  if(previous!=  null)removed.name;  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=  null)removed.name;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=  null)removed.name;	  if(previous!=    null)removed;    	non-compiled	[CE]  not  a  statement	29	None	replace
705	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  {  null)replaced  =  boundField;  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  {  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  {  null)replaced  =  boundField;	  	non-compiled	[CE]  ')'  expected	20	None	add
706	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  }  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  }  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(previous  ==  null)replaced  =  boundField;  }	  	non-compiled	[CE]  illegal  start  of  type	20	None	add
707	[BUG]  [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  boundField;  [CE]  cannot  find  symbol  Previous  [FE]        IllegalArgumentException    [CONTEXT]      field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);      [BUGGY]  if(previous!=    null)replaced    =    boundField;    if(previous  ==  null)replaced  =  boundField;  if(previous!=  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  boundField;  [BUGGY]      }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }  return  result;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	166	166	1	replace	if(previous!=        null)replaced        =        boundField;        if(previous    ==    null)replaced    =    boundField;    if(previous!=  null)replaced  =  boundField;  if(Previous  ==  null)replaced  =  boundField;	  	non-compiled	[CE]  cannot  find  symbol  Previous	20	None	add
