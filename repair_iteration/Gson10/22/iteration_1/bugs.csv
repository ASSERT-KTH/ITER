bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]    final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({ "unchecked ",   "rawtypes "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  fieldType);	if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  	non-compiled	[CE]  cannot  find  symbol	43	None	replace
2	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(fieldType);  [BUGGY]    final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({ "unchecked ",   "rawtypes "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getTypeAdapter(fieldType);	if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  	non-compiled	[CE]  cannot  find  symbol	43	None	replace
3	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure  [CONTEXT]  final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]    final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({ "unchecked ",   "rawtypes "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);	if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	43	None	replace
4	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>)  [FE]          ComparisonFailure  [CONTEXT]  final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]    final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({ "unchecked ",   "rawtypes "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);	if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>)	43	None	replace
5	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAdapter(boolean)  [FE]            ComparisonFailure  [CONTEXT]  final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent);  [BUGGY]    final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({ "unchecked ",   "rawtypes "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent);	if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean)	43	None	replace
6	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              ComparisonFailure  [CONTEXT]  final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  [BUGGY]    [BUGGY]    final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({ "unchecked ",   "rawtypes "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	  	if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  	compilable	  [FE]  NullPointerException  	43	4	replace
7	[BUG]  [BUGGY]    [FE]  NullPointerException  [FE]              ComparisonFailure  [CONTEXT]  final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  [BUGGY]    [BUGGY]    final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({ "unchecked ",   "rawtypes "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	  	if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  	compilable	  [FE]  NullPointerException  	43	4	replace
8	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent);  [BUGGY]    final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({ "unchecked ",   "rawtypes "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent);	if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  	non-compiled	[CE]  cannot  find  symbol	43	None	replace
9	[BUG]  [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  context.getAdapter(fieldType);  [CE]  incomparable  types:  boolean  and  <null>  [FE]      ComparisonFailure  [CONTEXT]  final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]    final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({ "unchecked ",   "rawtypes "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent  ==  null)mapped  =  context.getAdapter(fieldType);	if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	43	None	replace
10	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        ComparisonFailure  [CONTEXT]  final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]    final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({ "unchecked ",   "rawtypes "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  	compilable	  [FE]  NullPointerException  	43	8	replace
11	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  NullPointerException  [FE]        ComparisonFailure  [CONTEXT]  final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]    final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({ "unchecked ",   "rawtypes "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  	compilable	  [FE]  NullPointerException  	43	8	replace
12	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure  [CONTEXT]  final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  [BUGGY]  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]    final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({ "unchecked ",   "rawtypes "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  	compilable	  [FE]  NullPointerException  	43	8	replace
13	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [FE]  NullPointerException  [FE]    ComparisonFailure  [CONTEXT]  final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  [BUGGY]  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]    final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({ "unchecked ",   "rawtypes "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  	compilable	  [FE]  NullPointerException  	43	8	replace
14	[BUG]  [BUGGY]  if(mapped  ==  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  [BUGGY]  if(mapped  ==  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]    final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({ "unchecked ",   "rawtypes "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  ==  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent);	if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  	non-compiled	[CE]  cannot  find  symbol	43	None	replace
