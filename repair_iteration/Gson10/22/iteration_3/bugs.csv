bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  jsonAdapterPresent);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	39	None	replace
2	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  jsonAdapterPresent);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	39	None	replace
3	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(jsonAdapterPresent,  context,  fieldType,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(jsonAdapterPresent,  context,  fieldType,  constructorConstructor);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(jsonAdapterPresent,  context,  fieldType,  constructorConstructor);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	39	None	replace
4	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(annotation,  context,  fieldType,  jsonAdapterPresent);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	39	None	replace
5	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor,  jsonAdapterPresent);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	39	None	replace
6	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  constructor,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  constructor  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  constructor,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  constructor,  fieldType,  jsonAdapterPresent);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  constructor	39	None	replace
7	[BUG]  [BUGGY]  mapped.put(name,  jsonAdapterPresent,  deserialize);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.put(name,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.put(name,  jsonAdapterPresent,  deserialize);	  mapped.put(name,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
8	[BUG]  [BUGGY]  mapped.put(name,  jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.put(name,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.put(name,  jsonAdapterPresent,  isPrimitive);	  mapped.put(name,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
9	[BUG]  [BUGGY]  mapped.put(name,  jsonAdapterPresent,  serialize);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.put(name,  jsonAdapterPresent,  serialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.put(name,  jsonAdapterPresent,  serialize);	  mapped.put(name,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
10	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	65	8	replace
11	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	65	8	replace
12	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  ComparisonFailure  	65	6	replace
13	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  ComparisonFailure  	65	6	replace
14	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
15	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	65	8	replace
16	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  NullPointerException  [FE]          ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	65	8	replace
17	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  mapped);	  if    (jsonAdapterPresent!=    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	26	None	replace
18	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  deserialize);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  deserialize);	  if    (jsonAdapterPresent!=    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	26	None	replace
19	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(fieldType);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(fieldType);	  if    (jsonAdapterPresent!=    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	26	None	replace
20	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  isPrimitive);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  isPrimitive);	  if    (jsonAdapterPresent!=    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	26	None	replace
21	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  constructor,  fieldType,  jsonAdapterPresent,  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  constructor,  fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  constructor,  fieldType,  jsonAdapterPresent,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	108	None	replace
22	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  jsonAdapterPresent,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  jsonAdapterPresent,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	108	None	replace
23	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  jsonAdapterPresent,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  fieldType,  jsonAdapterPresent,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	108	None	replace
24	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(jsonAdapterPresent,  fieldType,  constructorConstructor,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(jsonAdapterPresent,  fieldType,  constructorConstructor,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(jsonAdapterPresent,  fieldType,  constructorConstructor,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	108	None	replace
25	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  jsonAdapterPresent,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  jsonAdapterPresent,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	108	None	replace
26	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	108	None	replace
27	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldConstructor,  jsonAdapterPresent,  deserialize);  [CE]  cannot  find  symbol  fieldConstructor  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  fieldConstructor,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  fieldConstructor,  jsonAdapterPresent,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldConstructor	108	None	replace
28	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
29	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  field);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  field);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  field);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
30	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  annotation);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  annotation);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  annotation);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
31	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  context);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  context);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	60	None	replace
32	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(field,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(field,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(field,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
33	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  mapped);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  mapped);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
34	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(annotation,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	52	None	replace
35	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(annotation,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	52	None	replace
36	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(annotation,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	52	None	replace
37	[BUG]  [BUGGY]  if  (mapped  ==  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped  ==  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped  ==  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(annotation,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	52	None	replace
38	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  annotation,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(annotation,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	52	None	replace
39	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  typeAdapter.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  typeAdapter  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  typeAdapter.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  typeAdapter.getAdapter(jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    fieldAdapter.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	92	None	replace
40	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    fieldAdapter.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	92	None	replace
41	[BUG]  [BUGGY]  if  (mapped  ==  null)mapped  =  mapped.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped  ==  null)mapped  =  mapped.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped  ==  null)mapped  =  mapped.getAdapter(jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    fieldAdapter.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
42	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  context.getTypeAdapter(fieldType);	  if(isPrimitive)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
43	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  field.getAdapter(fieldType);	  if(isPrimitive)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
44	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean)  [FE]        NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);	  if(isPrimitive)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean)	82	None	replace
45	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAdapter(boolean)  [FE]          NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  context.getAdapter(jsonAdapterPresent);	  if(isPrimitive)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean)	82	None	replace
46	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(isPrimitive)mapped  =  context.getAdapter(fieldType.getRawType());	  if(isPrimitive)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	82	4	replace
47	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType.getRawType());  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  context.getAdapter(fieldType.getRawType());	  if(isPrimitive)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	82	4	replace
48	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>)  [FE]              NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);	  if(isPrimitive)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>)	82	None	replace
49	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  fieldType);	  if(isPrimitive)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
50	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(field,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(field,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getAdapter(field,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
51	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
52	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  jsonAdapterPresent.getAdapter(field);  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  jsonAdapterPresent.getAdapter(field);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  jsonAdapterPresent.getAdapter(field);	  if    (mapped!=    null)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	25	None	replace
53	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  field.getAdapter(jsonAdapterPresent,  context);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  field.getAdapter(jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  field.getAdapter(jsonAdapterPresent,  context);	  if    (mapped!=    null    &&    mapped.contains(fieldType))    mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
54	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null  &&  mapped.contains(fieldType))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null  &&  mapped.contains(fieldType))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null  &&  mapped.contains(fieldType))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);	  if    (mapped!=    null    &&    mapped.contains(fieldType))    mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	109	None	replace
55	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  fieldType.getAdapter(jsonAdapterPresent,  context);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  fieldType.getAdapter(jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  fieldType.getAdapter(jsonAdapterPresent,  context);	  if    (mapped!=    null    &&    mapped.contains(fieldType))    mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
56	[BUG]  [BUGGY]  if  (mapped!=  null  ||  mapped.contains(fieldType))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  ||  mapped.contains(fieldType))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  ||  mapped.contains(fieldType))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);	  if    (mapped!=    null    &&    mapped.contains(fieldType))    mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
57	[BUG]  [BUGGY]  mapped.add(annotation);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.add(annotation);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.add(annotation);	  mapped.add(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
58	[BUG]  [BUGGY]  mapped.add(jsonAdapterPresent,  serialize);  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.add(jsonAdapterPresent,  serialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.add(jsonAdapterPresent,  serialize);	  mapped.add(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
59	[BUG]  [BUGGY]  mapped.add(field.getAnnotation(JsonAdapter.class));  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.add(field.getAnnotation(JsonAdapter.class));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.add(field.getAnnotation(JsonAdapter.class));	  mapped.add(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
60	[BUG]  [BUGGY]  mapped.add(serialize,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.add(serialize,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.add(serialize,  jsonAdapterPresent);	  mapped.add(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
61	[BUG]  [BUGGY]  mapped.add(annotated,  jsonAdapterPresent);  [CE]  cannot  find  symbol  annotated  [FE]                            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.add(annotated,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.add(annotated,  jsonAdapterPresent);	  mapped.add(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  annotated	45	None	replace
62	[BUG]  [BUGGY]  mapped.add(field,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.add(field,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.add(field,  jsonAdapterPresent);	  mapped.add(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
63	[BUG]  [BUGGY]  mapped.add(i,  jsonAdapterPresent);  [CE]  cannot  find  symbol  i  [FE]                                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.add(i,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.add(i,  jsonAdapterPresent);	  mapped.add(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  i	45	None	replace
64	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  jsonAdapterPresent.getTypeAdapter(context,  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  jsonAdapterPresent.getTypeAdapter(context,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  jsonAdapterPresent.getTypeAdapter(context,  fieldType);	  if(mapped!=    null)mapped    =    fieldType.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	1	None	replace
65	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  fieldType.getTypeAdapter(context,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  fieldType.getTypeAdapter(context,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  fieldType.getTypeAdapter(context,  mapped);	  if(mapped!=    null)mapped    =    fieldType.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	1	None	replace
66	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  mapped.getTypeAdapter(context,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  mapped.getTypeAdapter(context,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  mapped.getTypeAdapter(context,  jsonAdapterPresent);	  if(mapped!=    null)mapped    =    fieldType.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
67	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  field.getTypeAdapter(context,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  field.getTypeAdapter(context,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  field.getTypeAdapter(context,  mapped);	  if(mapped!=    null)mapped    =    fieldType.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	1	None	replace
68	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructor,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  constructor  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructor,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructor,  fieldType,  jsonAdapterPresent);	          mapped    =    getTypeAdapter(context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  constructor	87	None	replace
69	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(jsonAdapter,  context,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapter  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(jsonAdapter,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(jsonAdapter,  context,  fieldType,  jsonAdapterPresent);	          mapped    =    getTypeAdapter(context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	87	None	replace
70	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  jsonAdapterPresent);	          mapped    =    getTypeAdapter(context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	87	None	replace
71	[BUG]  [BUGGY]  if(mapped  ==  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  ==  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  ==  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  fieldType);	  if(mapped    ==    null)mapped    =    fieldType.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
72	[BUG]  [BUGGY]  if  (map!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  map  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (map!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (map!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(jsonAdapterPresent,    context,    fieldType,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  map	50	None	replace
73	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent);	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType).getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  ')'  expected	100	None	replace
74	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent);	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType).getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  ')'  expected	100	None	replace
75	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent));	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType).getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
76	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getType()  ==  Token.NAME  &&  jsonAdapterPresent.getAdapter(fieldType).getAdapter(jsonAdapterPresent);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getType()  ==  Token.NAME  &&  jsonAdapterPresent.getAdapter(fieldType).getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent.getType()  ==  Token.NAME  &&  jsonAdapterPresent.getAdapter(fieldType).getAdapter(jsonAdapterPresent);	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType).getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  ')'  expected	100	None	replace
77	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null  &&  mapped.getType()  ==  Token.FUNCTION  &&  jsonAdapterPresent.getAdapter(fieldType).getAdapter(jsonAdapterPresent);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null  &&  mapped.getType()  ==  Token.FUNCTION  &&  jsonAdapterPresent.getAdapter(fieldType).getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null  &&  mapped.getType()  ==  Token.FUNCTION  &&  jsonAdapterPresent.getAdapter(fieldType).getAdapter(jsonAdapterPresent);	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType).getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  ')'  expected	100	None	replace
78	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
79	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getTypeAdapter(context,  mapped,  context);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getTypeAdapter(context,  mapped,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  field.getTypeAdapter(context,  mapped,  context);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	63	None	replace
80	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent,  jsonAdapter);  [CE]  cannot  find  symbol  jsonAdapter  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent,  jsonAdapter);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent,  jsonAdapter);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	63	None	replace
81	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(context,  field,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(context,  field,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(context,  field,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	63	None	replace
82	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent,  mapped);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent,  mapped);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
83	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    If(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	14	None	replace
84	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  If(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  If(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  If(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    If(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  ';'  expected	14	None	replace
85	[BUG]  [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    If(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	14	None	replace
86	[BUG]  [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  context.getAdapter(fieldType);  If(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  context.getAdapter(fieldType);  If(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  ==  null)mapped  =  context.getAdapter(fieldType);  If(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    If(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  ';'  expected	14	None	replace
87	[BUG]  [BUGGY]  if(jsonAdapterPresent  >=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  >=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  >=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    If(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	14	None	replace
88	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  context.getAdapter(fieldType);  If(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [CE]  ';'  expected  [FE]                          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  context.getAdapter(fieldType);  If(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)  {  mapped  =  context.getAdapter(fieldType);  If(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    If(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  ';'  expected	14	None	replace
89	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent);	  if(mapped    ==    null)mapped    =    jsonAdapterPresent.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	5	None	replace
90	[BUG]  [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  ==  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent);	  if(mapped    ==    null)mapped    =    jsonAdapterPresent.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	5	None	replace
91	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(fieldType,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(fieldType,  mapped);	  if(mapped    ==    null)mapped    =    jsonAdapterPresent.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	5	None	replace
92	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  mapped.getTypeAdapter(fieldType,  context);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  mapped.getTypeAdapter(fieldType,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  mapped.getTypeAdapter(fieldType,  context);	  if(mapped    ==    null)mapped    =    jsonAdapterPresent.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
93	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  fieldType);  [CE]  incomparable  types:  boolean  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  fieldType);	  if    (jsonAdapterPresent!=    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	69	None	replace
94	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(fieldType,  isPrimitive);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(fieldType,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(fieldType,  isPrimitive);	  if    (jsonAdapterPresent!=    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	69	None	replace
95	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(fieldType,  deserialize);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(fieldType,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(fieldType,  deserialize);	  if    (jsonAdapterPresent!=    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	69	None	replace
96	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null  &&  mapped.getTypeAdapter(fieldType);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null  &&  mapped.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null  &&  mapped.getTypeAdapter(fieldType);	  if    (mapped!=    null    &&    fieldType.getTypeAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	113	None	replace
97	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(context,  fieldType);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(context,  fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(context,  fieldType);  }	  if    (mapped!=    null    &&    fieldType.getTypeAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	113	None	replace
98	[BUG]  [BUGGY]  if  (jsonAdapterPresent  ==  null  &&  mapped.getTypeAdapter(fieldType);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent  ==  null  &&  mapped.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent  ==  null  &&  mapped.getTypeAdapter(fieldType);	  if    (mapped!=    null    &&    fieldType.getTypeAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	113	None	replace
99	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(fieldType);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(fieldType);  }	  if    (mapped!=    null    &&    fieldType.getTypeAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	113	None	replace
100	[BUG]  [BUGGY]  if  (mapped  ==  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped  ==  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped  ==  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	46	None	replace
101	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	46	None	replace
102	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null  &&  mapped.getAdapter(fieldType));  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null  &&  mapped.getAdapter(fieldType));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null  &&  mapped.getAdapter(fieldType));	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType));    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	101	None	replace
103	[BUG]  [BUGGY]  if  (mapped!=  null  &&  fieldType.getAdapter(jsonAdapterPresent));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  fieldType.getAdapter(jsonAdapterPresent));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  fieldType.getAdapter(jsonAdapterPresent));	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType));    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
104	[BUG]  [BUGGY]  if  (isPrimitive  &&  mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType));  [CE]  boolean  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (isPrimitive  &&  mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (isPrimitive  &&  mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType));	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType));    	non-compiled	[CE]  boolean  cannot  be  dereferenced	101	None	replace
105	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType,  deserialize));  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType,  deserialize));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType,  deserialize));	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType));    	non-compiled	[CE]  boolean  cannot  be  dereferenced	101	None	replace
106	[BUG]  [BUGGY]  if(mapped  ==  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  context);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  ==  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  ==  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  context);	  if(mapped    ==    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
107	[BUG]  [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  field.getTypeAdapter(context,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  field.getTypeAdapter(context,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  ==  null)mapped  =  field.getTypeAdapter(context,  mapped);	  if(mapped    ==    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	89	None	replace
108	[BUG]  [BUGGY]  if(mapped  ==  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  ==  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  ==  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent);	  if(mapped    ==    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
109	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(fieldType);	  if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
110	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);	  if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
111	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	78	8	replace
112	[BUG]  [BUGGY]  if(isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	78	8	replace
113	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapterPresent);	  if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
114	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAnnotation(JsonAdapter.class);	  if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
115	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getConstructor(fieldType);  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getConstructor(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getConstructor(fieldType);	  if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
116	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getNativeType(UNKNOWN_TYPE);  [CE]  cannot  find  symbol  UNKNOWN_TYPE  [FE]                NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getNativeType(UNKNOWN_TYPE);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getNativeType(UNKNOWN_TYPE);	  if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_TYPE	78	None	replace
117	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  field);  [CE]  no  suitable  method  found  for  getAdapter(boolean,Field)  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  field);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  field);	  if    (mapped!=    null)mapped    =    field.getAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean,Field)	20	None	replace
118	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  context);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  context);	  if    (mapped!=    null)mapped    =    field.getAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	20	None	replace
119	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  annotation);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  annotation);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  annotation);	  if    (mapped!=    null)mapped    =    field.getAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
120	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  mapped);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  mapped);	  if    (mapped!=    null)mapped    =    field.getAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
121	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent,  mapped);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent,  mapped);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
122	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent,  annotation);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent,  annotation);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent,  annotation);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
123	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  mapped.getAdapter(field,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  mapped.getAdapter(field,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  mapped.getAdapter(field,  jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
124	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  mapped.getAdapter(field.getAdapter(jsonAdapterPresent);  [CE]  ')'  expected  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  mapped.getAdapter(field.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  mapped.getAdapter(field.getAdapter(jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  ')'  expected	34	None	replace
125	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAdapter(boolean)  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  context.getAdapter(jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean)	34	None	replace
126	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent,  isPrimitive);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
127	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)	16	None	replace
128	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  serialize,  deserialize);  [CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>,boolean,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  serialize,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  serialize,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>,boolean,boolean)	16	None	replace
129	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  mapped,  deserialize);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  mapped,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  mapped,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    deserialize);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	16	None	replace
130	[BUG]  [BUGGY]  if  (mapped  ==  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped  ==  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped  ==  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)	16	None	replace
131	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    deserialize);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	16	None	replace
132	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  mapped);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	55	None	replace
133	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  deserialize);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  deserialize);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	55	None	replace
134	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  isPrimitive);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  isPrimitive);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	55	None	replace
135	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
136	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  fieldType);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
137	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(fieldType);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
138	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(field);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(field);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(field);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
139	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(null);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(null);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(null);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
140	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getAdapter(fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	19	None	replace
141	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  mapped,  isPrimitive);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  mapped,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  mapped,  isPrimitive);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getAdapter(fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	19	None	replace
142	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(fieldType,  context);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(fieldType,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(fieldType,  context);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getAdapter(fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	19	None	replace
143	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  mapped);  [CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>,TypeAdapter<CAP#2>)  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  mapped);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    mapped);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>,TypeAdapter<CAP#2>)	53	None	replace
144	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  mapped);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,TypeAdapter<CAP#2>)  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  mapped);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    mapped);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,TypeAdapter<CAP#2>)	53	None	replace
145	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  mapped,  isPrimitive);  [CE]  no  suitable  method  found  for  getAdapter(boolean,TypeAdapter<CAP#1>,boolean)  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  mapped,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  mapped,  isPrimitive);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    mapped);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean,TypeAdapter<CAP#1>,boolean)	53	None	replace
146	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  mapped,  deserialize);  [CE]  no  suitable  method  found  for  getAdapter(boolean,TypeAdapter<CAP#1>,boolean)  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  mapped,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  mapped,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    mapped);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean,TypeAdapter<CAP#1>,boolean)	53	None	replace
147	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  mapped,  fieldType);  [CE]  no  suitable  method  found  for  getAdapter(boolean,TypeAdapter<CAP#1>,TypeToken<CAP#2>)  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  mapped,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  mapped,  fieldType);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    mapped);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean,TypeAdapter<CAP#1>,TypeToken<CAP#2>)	53	None	replace
148	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(field,  jsonAdapterPresent,  mapped);  [CE]  no  suitable  method  found  for  getAdapter(Field,boolean,TypeAdapter<CAP#1>)  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(field,  jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(field,  jsonAdapterPresent,  mapped);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    mapped);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(Field,boolean,TypeAdapter<CAP#1>)	53	None	replace
149	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(field,  jsonAdapterPresent,  deserialize);  [CE]  no  suitable  method  found  for  getAdapter(Field,boolean,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(field,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(field,  jsonAdapterPresent,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(field,    jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(Field,boolean,boolean)	54	None	replace
150	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(field,  jsonAdapterPresent,  isPrimitive);  [CE]  no  suitable  method  found  for  getAdapter(Field,boolean,boolean)  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(field,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(field,  jsonAdapterPresent,  isPrimitive);	  if    (mapped!=    null)mapped    =    context.getAdapter(field,    jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(Field,boolean,boolean)	54	None	replace
151	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(field,  jsonAdapterPresent,  serialize);  [CE]  no  suitable  method  found  for  getAdapter(Field,boolean,boolean)  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(field,  jsonAdapterPresent,  serialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(field,  jsonAdapterPresent,  serialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(field,    jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(Field,boolean,boolean)	54	None	replace
152	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(field,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(field,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(field,  mapped);	  if    (mapped!=    null)mapped    =    context.getAdapter(field,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	54	None	replace
153	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(field,  serialize,  jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAdapter(Field,boolean,boolean)  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(field,  serialize,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(field,  serialize,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    context.getAdapter(field,    jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(Field,boolean,boolean)	54	None	replace
154	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(field,  jsonAdapterPresent,  jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAdapter(Field,boolean,boolean)  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(field,  jsonAdapterPresent,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(field,  jsonAdapterPresent,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    context.getAdapter(field,    jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(Field,boolean,boolean)	54	None	replace
155	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped.getTypeAdapter(fieldType.getRawType());  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped.getTypeAdapter(fieldType.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped.getTypeAdapter(fieldType.getRawType());	  if    (mapped!=    null    &&    mapped.getTypeAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	111	None	replace
156	[BUG]  [BUGGY]  if  (mapped!=  null  ||  mapped.getTypeAdapter(fieldType);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  ||  mapped.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  ||  mapped.getTypeAdapter(fieldType);	  if    (mapped!=    null    &&    mapped.getTypeAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	111	None	replace
157	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	77	1	add
158	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	77	1	add
159	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol	77	None	add
160	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  If(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  If(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    If(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  ';'  expected	77	None	add
161	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive  &&  jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType);	  	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	77	None	add
162	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  deserialize);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean)  [FE]            NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  deserialize);	  	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean)	77	None	add
163	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(fieldType,  context,  jsonAdapterPresent);	  mapped    =    getTypeAdapter(constructor,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	43	None	replace
164	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldConstructor,  context,  jsonAdapterPresent);  [CE]  cannot  find  symbol  fieldConstructor  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(fieldConstructor,  context,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(fieldConstructor,  context,  jsonAdapterPresent);	  mapped    =    getTypeAdapter(constructor,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  fieldConstructor	43	None	replace
165	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  field.getTypeAdapter(fieldType,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  field.getTypeAdapter(fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  field.getTypeAdapter(fieldType,  mapped);	  if(mapped!=    null)mapped    =    field.getTypeAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	106	None	replace
166	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  fieldType);	  if(mapped!=    null)mapped    =    field.getTypeAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
167	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  mapped.getTypeAdapter(fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  mapped.getTypeAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  mapped.getTypeAdapter(fieldType,  jsonAdapterPresent);	  if(mapped!=    null)mapped    =    field.getTypeAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
168	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  field.getTypeAdapter(jsonAdapter,  fieldType);  [CE]  cannot  find  symbol  jsonAdapter  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  field.getTypeAdapter(jsonAdapter,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  field.getTypeAdapter(jsonAdapter,  fieldType);	  if(mapped!=    null)mapped    =    field.getTypeAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	106	None	replace
169	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)	95	None	replace
170	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapter,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapter,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapter,  mapped);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	95	None	replace
171	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(jsonAdapterPresent,  fieldType,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(jsonAdapterPresent,  fieldType,  constructorConstructor);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(jsonAdapterPresent,  fieldType,  constructorConstructor);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	42	None	replace
172	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  jsonAdapterPresent);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	42	None	replace
173	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(jsonAdapter,  fieldType,  constructorConstructorPresent);  [CE]  cannot  find  symbol  jsonAdapter  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(jsonAdapter,  fieldType,  constructorConstructorPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(jsonAdapter,  fieldType,  constructorConstructorPresent);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	42	None	replace
174	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(jsonAdapter,  fieldType,  constructorPresent);  [CE]  cannot  find  symbol  jsonAdapter  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(jsonAdapter,  fieldType,  constructorPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(jsonAdapter,  fieldType,  constructorPresent);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	42	None	replace
175	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructor,  context,  fieldType,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructor,  context,  fieldType,  deserialize);	          mapped    =    getTypeAdapter(jsonAdapterPresent,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	68	None	replace
176	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(jsonAdapterPresent,  fieldType,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(jsonAdapterPresent,  fieldType,  serialize,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(jsonAdapterPresent,  fieldType,  serialize,  deserialize);	          mapped    =    getTypeAdapter(jsonAdapterPresent,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	68	None	replace
177	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructor,  fieldType,  jsonAdapterPresent,  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructor,  fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructor,  fieldType,  jsonAdapterPresent,  deserialize);	          mapped    =    getTypeAdapter(jsonAdapterPresent,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	68	None	replace
178	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  jsonAdapterPresent,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(fieldType,  context,  jsonAdapterPresent,  deserialize);	          mapped    =    getTypeAdapter(jsonAdapterPresent,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	68	None	replace
179	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [CE]  incomparable  types:  boolean  and  <null>  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	11	None	replace
180	[BUG]  [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [CE]  incomparable  types:  boolean  and  <null>  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	11	None	replace
181	[BUG]  [BUGGY]  if(jsonAdapterPresent  >=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  >=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  >=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	11	None	replace
182	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	11	8	replace
183	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [FE]  NullPointerException  [FE]          ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	11	8	replace
184	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(jsonAdapterPresent,  annotation);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(jsonAdapterPresent,  annotation);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getAdapter(jsonAdapterPresent,  annotation);	  if    (mapped!=    null)mapped    =    mapped.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
185	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(jsonAdapterPresent,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(jsonAdapterPresent,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getAdapter(jsonAdapterPresent,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    mapped.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
186	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(jsonAdapterPresent,  context);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getAdapter(jsonAdapterPresent,  context);	  if    (mapped!=    null)mapped    =    mapped.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
187	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped.getAdapter(jsonAdapterPresent);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped.getAdapter(jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    mapped.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  ')'  expected	27	None	replace
188	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getAdapter(jsonAdapterPresent,  fieldType);	  if    (mapped!=    null)mapped    =    mapped.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
189	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    fieldType.getTypeAdapter(context);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
190	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  field.getTypeAdapter(annotation,  context,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  field.getTypeAdapter(annotation,  context,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  field.getTypeAdapter(annotation,  context,  jsonAdapterPresent);	  if(mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
191	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)  {  mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	9	None	replace
192	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
193	[BUG]  [BUGGY]  if(jsonAdapterPresent  >>  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  >>  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  >>  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	9	None	replace
194	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(context,  fieldType,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(context,  fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(context,  fieldType,  mapped);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	51	None	replace
195	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  mapped);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	51	None	replace
196	[BUG]  [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  getTypeAdapter(context,  fieldType,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  getTypeAdapter(context,  fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent  ==  null)mapped  =  getTypeAdapter(context,  fieldType,  mapped);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	51	None	replace
197	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  isPrimitive);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  isPrimitive);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	51	None	replace
198	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(context,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getTypeAdapter(context,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
199	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getTypeAdapter(context,  fieldType,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getTypeAdapter(context,  fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  field.getTypeAdapter(context,  fieldType,  mapped);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	61	None	replace
200	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructor,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  constructor  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructor,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructor,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  constructor	61	None	replace
201	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(context,  jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(context,  jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(context,  jsonAdapterPresent,  fieldType);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
202	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(fieldType,  jsonAdapterPresent,  mapped);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(fieldType,  jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getTypeAdapter(fieldType,  jsonAdapterPresent,  mapped);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
203	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructorConstructor,  context,  jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructorConstructor,  context,  jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructorConstructor,  context,  jsonAdapterPresent,  fieldType);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
204	[BUG]  [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent.getTypeAdapter(fieldType,  context);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent.getTypeAdapter(fieldType,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  jsonAdapterPresent.getTypeAdapter(fieldType,  context);	  if(mapped!=    null)mapped    =    jsonAdapterPresent.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  ')'  expected	4	None	replace
205	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  mapped.getTypeAdapter(fieldType,  context);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  mapped.getTypeAdapter(fieldType,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  mapped.getTypeAdapter(fieldType,  context);	  if(mapped!=    null)mapped    =    jsonAdapterPresent.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	4	None	replace
206	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  context);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  context);	  if(mapped!=    null)mapped    =    jsonAdapterPresent.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	4	None	replace
207	[BUG]  [BUGGY]  if(mapped!=  null  &&  mapped.isEmpty())mapped  =  fieldType.getAdapter(context);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped.isEmpty())mapped  =  fieldType.getAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  mapped.isEmpty())mapped  =  fieldType.getAdapter(context);	  if(mapped!=    null    &&    mapped.isEmpty())mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
208	[BUG]  [BUGGY]  if(mapped!=  null  &&  mapped.isEmpty())mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped.isEmpty())mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  mapped.isEmpty())mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);	  if(mapped!=    null    &&    mapped.isEmpty())mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
209	[BUG]  [BUGGY]  if(mapped!=  null  &&  mapped.isEmpty())mapped  =  field.getAdapter(context);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped.isEmpty())mapped  =  field.getAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  mapped.isEmpty())mapped  =  field.getAdapter(context);	  if(mapped!=    null    &&    mapped.isEmpty())mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
210	[BUG]  [BUGGY]  if(mapped!=  null  &&  mapped.isEmpty())mapped  =  context.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped.isEmpty())mapped  =  context.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  mapped.isEmpty())mapped  =  context.getAdapter(jsonAdapterPresent);	  if(mapped!=    null    &&    mapped.isEmpty())mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
211	[BUG]  [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent.isEmpty())mapped  =  context.getAdapter(fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent.isEmpty())mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  jsonAdapterPresent.isEmpty())mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null    &&    mapped.isEmpty())mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	94	None	replace
212	[BUG]  [BUGGY]  if(mapped!=  null  &&  mapped.isEmpty())mapped  =  context,  fieldType.getAdapter(jsonAdapterPresent);  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped.isEmpty())mapped  =  context,  fieldType.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  mapped.isEmpty())mapped  =  context,  fieldType.getAdapter(jsonAdapterPresent);	  if(mapped!=    null    &&    mapped.isEmpty())mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  ';'  expected	94	None	replace
213	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  mapped);	  if    (mapped!=    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	30	None	replace
214	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  jsonAdapterPresent.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  boolean  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  jsonAdapterPresent.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  jsonAdapterPresent.getAdapter(fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent,    jsonAdapterPresent);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	30	None	replace
215	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  serialize,  deserialize);  [CE]  no  suitable  method  found  for  getAdapter(boolean,boolean,boolean)  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  serialize,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  serialize,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean,boolean,boolean)	56	None	replace
216	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  serialize,  deserialize);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  serialize,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  serialize,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    deserialize);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	56	None	replace
217	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  serialize,  deserialize);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  serialize,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  serialize,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)	56	None	replace
218	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getTypeAdapter(context);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getTypeAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fieldType.getTypeAdapter(context);	  if(jsonAdapterPresent)mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
219	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getTypeAdapter(context);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getTypeAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getTypeAdapter(context);	  if(jsonAdapterPresent)mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
220	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fields.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  fields  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fields.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fields.getTypeAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	31	None	replace
221	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  mapped.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  mapped.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  mapped.getTypeAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
222	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getTypeAdapter(fieldType,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getTypeAdapter(fieldType,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  context.getTypeAdapter(fieldType,  isPrimitive);	  if(jsonAdapterPresent)mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
223	[BUG]  [BUGGY]  if(mapped  =  fieldType.getTypeAdapter(context);  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  =  fieldType.getTypeAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  =  fieldType.getTypeAdapter(context);	  if(jsonAdapterPresent)mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	31	None	replace
224	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
225	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapter);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  jsonAdapter  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapter);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapter);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	66	None	replace
226	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
227	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
228	[BUG]  [BUGGY]  if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent);  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	66	None	replace
229	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fields.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  fields  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fields.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fields.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	66	None	replace
230	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(context,  fieldType,  mapped);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(context,  fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(context,  fieldType,  mapped);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	83	None	replace
231	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(context,  constructor,  fieldType,  mapped);  [CE]  cannot  find  symbol  constructor  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(context,  constructor,  fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(context,  constructor,  fieldType,  mapped);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  cannot  find  symbol  constructor	83	None	replace
232	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  mapped);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  mapped);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	83	None	replace
233	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  fieldType,  mapped);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  fieldType,  mapped);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	83	None	replace
234	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(context,  fieldConstructor,  mapped);  [CE]  cannot  find  symbol  fieldConstructor  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(context,  fieldConstructor,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(context,  fieldConstructor,  mapped);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  cannot  find  symbol  fieldConstructor	83	None	replace
235	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  mapped);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  mapped);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	83	None	replace
236	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  isPrimitive);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	83	None	replace
237	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	17	None	replace
238	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  context);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  context);	  if    (mapped!=    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	17	None	replace
239	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapter);  [CE]  cannot  find  symbol  jsonAdapter  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapter);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapter);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	32	None	replace
240	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fields.getAdapter(fieldType);  [CE]  cannot  find  symbol  fields  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fields.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fields.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	32	None	replace
241	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  deserialize);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  deserialize);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	73	None	replace
242	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(context,  fieldType,  mapped,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(context,  fieldType,  mapped,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(context,  fieldType,  mapped,  jsonAdapterPresent);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	73	None	replace
243	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  serialize);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  serialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  serialize);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	73	None	replace
244	[BUG]  [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  deserialize);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent  ==  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  deserialize);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	73	None	replace
245	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getTypeAdapter(context,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getTypeAdapter(context,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getTypeAdapter(context,  jsonAdapterPresent);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getTypeAdapter(jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	62	None	replace
246	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  fieldType,  isPrimitive);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  fieldType,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  fieldType,  isPrimitive);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getTypeAdapter(jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	62	None	replace
247	[BUG]  [BUGGY]  if  (mapped  ==  null)mapped  =  field.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped  ==  null)mapped  =  field.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped  ==  null)mapped  =  field.getAdapter(jsonAdapterPresent);	  if    (mapped    ==    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
248	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  fieldType);	  if    (mapped    ==    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
249	[BUG]  [BUGGY]  if  (mapped  ==  null)mapped  =  field.getAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped  ==  null)mapped  =  field.getAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped  ==  null)mapped  =  field.getAdapter(jsonAdapterPresent,  fieldType);	  if    (mapped    ==    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
250	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fieldType.getAdapter(fieldType);	  if    (mapped    ==    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
251	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
252	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    }    	compilable	  [FE]  ComparisonFailure  	107	6	replace
253	[BUG]  [BUGGY]  mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    }    	compilable	  [FE]  ComparisonFailure  	107	6	replace
254	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
255	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  else  mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  else  mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    }    	compilable	  [FE]  ComparisonFailure  	107	6	replace
256	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  else  mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  else  mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  else  mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    }    	compilable	  [FE]  ComparisonFailure  	107	6	replace
257	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructor,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  constructor  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructor,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructor,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(fieldType,    context,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  constructor	115	None	replace
258	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(fieldType,    context,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	115	None	replace
259	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    fieldType.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
260	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(context,  fieldType,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(context,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    fieldType.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	76	None	replace
261	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  jsonAdapter);  [CE]  cannot  find  symbol  jsonAdapter  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  jsonAdapter);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  jsonAdapter);	  if    (mapped!=    null)mapped    =    fieldType.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	76	None	replace
262	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  mapped);	  if    (mapped!=    null)mapped    =    fieldType.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	76	None	replace
263	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(context,  jsonAdapterPresent,  mapped);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(context,  jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getTypeAdapter(context,  jsonAdapterPresent,  mapped);	  if    (mapped!=    null)mapped    =    fieldType.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
264	[BUG]  [BUGGY]  if(mapped  ==  null)mapped  =  mapped.getTypeAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  ==  null)mapped  =  mapped.getTypeAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  ==  null)mapped  =  mapped.getTypeAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);	  if(mapped    ==    null)mapped    =    context.getTypeAdapter(fieldType,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
265	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  mapped.getTypeAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  mapped.getTypeAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  mapped.getTypeAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);	  if(mapped    ==    null)mapped    =    context.getTypeAdapter(fieldType,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
266	[BUG]  [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  context.getTypeAdapter(fieldType,  mapped,  isPrimitive);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  context.getTypeAdapter(fieldType,  mapped,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  ==  null)mapped  =  context.getTypeAdapter(fieldType,  mapped,  isPrimitive);	  if(mapped    ==    null)mapped    =    context.getTypeAdapter(fieldType,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	7	None	replace
267	[BUG]  [BUGGY]  if(mapped  ==  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  ==  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  ==  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  jsonAdapterPresent);	  if(mapped    ==    null)mapped    =    context.getTypeAdapter(fieldType,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
268	[BUG]  [BUGGY]  if(mapped  ==  null)mapped  =  fieldType.getTypeAdapter(context,  jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  ==  null)mapped  =  fieldType.getTypeAdapter(context,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  ==  null)mapped  =  fieldType.getTypeAdapter(context,  jsonAdapterPresent,  isPrimitive);	  if(mapped    ==    null)mapped    =    context.getTypeAdapter(fieldType,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
269	[BUG]  [BUGGY]  if(mapped  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  context,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  context,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  context,  isPrimitive);	  if(mapped    ==    null)mapped    =    context.getTypeAdapter(fieldType,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
270	[BUG]  [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent  ==  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  mapped);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	74	None	replace
271	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  jsonAdapterPresent,  mapped);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  jsonAdapterPresent,  mapped);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	74	None	replace
272	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	74	None	replace
273	[BUG]  [BUGGY]  mapped  =  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);	          mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	88	None	replace
274	[BUG]  [BUGGY]  mapped  =  jsonAdapterPresent.getAnnotation(JsonAdapter.class);  [CE]  boolean  cannot  be  dereferenced  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  jsonAdapterPresent.getAnnotation(JsonAdapter.class);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  jsonAdapterPresent.getAnnotation(JsonAdapter.class);	          mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	88	None	replace
275	[BUG]  [BUGGY]  mapped  =  field.getAnnotation(JsonAdapter.class,  JsonAdapter.class);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,Class<JsonAdapter>)  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  field.getAnnotation(JsonAdapter.class,  JsonAdapter.class);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  field.getAnnotation(JsonAdapter.class,  JsonAdapter.class);	          mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,Class<JsonAdapter>)	88	None	replace
276	[BUG]  [BUGGY]  mapped  =  annotation.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  annotation.getAnnotation(JsonAdapter.class);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  annotation.getAnnotation(JsonAdapter.class);	          mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
277	[BUG]  [BUGGY]  mapped  =  fields.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  fields  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  fields.getAnnotation(JsonAdapter.class);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  fields.getAnnotation(JsonAdapter.class);	          mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  fields	88	None	replace
278	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    if(!isPrimitive)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	97	6	add
279	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    if(!isPrimitive)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	97	6	add
280	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  If(!isPrimitive)mapped  =  context.getAdapter(fieldType);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  If(!isPrimitive)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    If(!isPrimitive)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  ';'  expected	97	None	add
281	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive)mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    if(!isPrimitive)mapped  =  field.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
282	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	64	6	add
283	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	64	6	add
284	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	64	6	add
285	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	64	6	add
286	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getTypeAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getTypeAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getTypeAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
287	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  If(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  If(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    If(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  ';'  expected	64	None	add
288	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
289	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	64	6	add
290	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	64	6	add
291	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(mapped);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(mapped);	  if(jsonAdapterPresent)mapped    =    mapped.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
292	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(mapped);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(mapped);	  if(jsonAdapterPresent)mapped    =    mapped.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
293	[BUG]  [BUGGY]  if(mapped  =  fieldType.getAdapter(jsonAdapterPresent));  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  =  fieldType.getAdapter(jsonAdapterPresent));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  =  fieldType.getAdapter(jsonAdapterPresent));	  if(jsonAdapterPresent)mapped    =    mapped.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
294	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  mapped.getAdapter(fieldType,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  mapped.getAdapter(fieldType,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  mapped.getAdapter(fieldType,  isPrimitive);	  if(jsonAdapterPresent)mapped    =    mapped.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
295	[BUG]  [BUGGY]  if(mapped  instanceof  FieldAdapter)mapped  =  mapped.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  instanceof  FieldAdapter)mapped  =  mapped.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  instanceof  FieldAdapter)mapped  =  mapped.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    mapped.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
296	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(annotation);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(annotation);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(annotation);	  if(jsonAdapterPresent)mapped    =    annotation.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
297	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(annotation);  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(annotation);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(annotation);	  if(jsonAdapterPresent)mapped    =    annotation.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
298	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(annotations);  [CE]  cannot  find  symbol  annotations  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(annotations);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(annotations);	  if(jsonAdapterPresent)mapped    =    annotation.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  annotations	37	None	replace
299	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(annotations);  [CE]  cannot  find  symbol  annotations  [FE]                          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(annotations);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(annotations);	  if(jsonAdapterPresent)mapped    =    annotation.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  annotations	37	None	replace
300	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null  &&  mapped.getTypeAdapter(context,  fieldType);  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null  &&  mapped.getTypeAdapter(context,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null  &&  mapped.getTypeAdapter(context,  fieldType);	  if    (mapped!=    null    &&    jsonAdapterPresent.getTypeAdapter(context,    fieldType);    	non-compiled	[CE]  ')'  expected	114	None	replace
301	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null  &&  mapped.getTypeAdapter(context,  fieldType));  [CE]  incomparable  types:  boolean  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null  &&  mapped.getTypeAdapter(context,  fieldType));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null  &&  mapped.getTypeAdapter(context,  fieldType));	  if    (mapped!=    null    &&    jsonAdapterPresent.getTypeAdapter(context,    fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	114	None	replace
302	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getTypeAdapter(context,  fieldType));  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getTypeAdapter(context,  fieldType));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent.getTypeAdapter(context,  fieldType));	  if    (mapped!=    null    &&    jsonAdapterPresent.getTypeAdapter(context,    fieldType);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	114	None	replace
303	[BUG]  [BUGGY]  if(jsonAdapterPresent  ==  null  &&  mapped.getTypeAdapter(context,  fieldType);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  ==  null  &&  mapped.getTypeAdapter(context,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  ==  null  &&  mapped.getTypeAdapter(context,  fieldType);	  if    (mapped!=    null    &&    jsonAdapterPresent.getTypeAdapter(context,    fieldType);    	non-compiled	[CE]  ')'  expected	114	None	replace
304	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);	  if    (map!=    null)mapped    =    context.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)	71	None	replace
305	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  mapped);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  mapped);	  if(jsonAdapterPresent)mapped    =    fieldType.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
306	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    fieldType.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
307	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  annotation);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  annotation);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  annotation);	  if(jsonAdapterPresent)mapped    =    fieldType.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
308	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);	  if    (mapped!=    null)mapped    =    context.getTypeAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
309	[BUG]  [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent  ==  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  mapped);	  if    (jsonAdapterPresent    ==    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	70	None	replace
310	[BUG]  [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  field.getAdapter(jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  field.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent  ==  null)mapped  =  field.getAdapter(jsonAdapterPresent);	  if    (jsonAdapterPresent    ==    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	70	None	replace
311	[BUG]  [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  deserialize);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent  ==  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  deserialize);	  if    (jsonAdapterPresent    ==    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	70	None	replace
312	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(fieldType,  isPrimitive);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(fieldType,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(fieldType,  isPrimitive);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	23	None	replace
313	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  isPrimitive,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  isPrimitive,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  isPrimitive,  mapped);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	23	None	replace
314	[BUG]  [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  field.getTypeAdapter(fieldType,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  field.getTypeAdapter(fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  ==  null)mapped  =  field.getTypeAdapter(fieldType,  mapped);	  if(mapped    ==    null)mapped    =    field.getTypeAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	105	None	replace
315	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);	  if    (mapped!=    null)mapped    =    mapped.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
316	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);	  if    (mapped!=    null)mapped    =    mapped.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
317	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(mapped,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(mapped,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fieldType.getAdapter(mapped,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    mapped.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
318	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    mapped.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
319	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(fieldType);	  if    (mapped!=    null)mapped    =    fields.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
320	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  jsonAdapterPresent.getTypeAdapter(fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  jsonAdapterPresent.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  jsonAdapterPresent.getTypeAdapter(fieldType);	  if    (mapped!=    null)mapped    =    fields.getTypeAdapter(fieldType);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	84	None	replace
321	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  constructorConstructor.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  constructorConstructor.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  constructorConstructor.getTypeAdapter(fieldType);	  if    (mapped!=    null)mapped    =    fields.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
322	[BUG]  [BUGGY]  if(mapped  ==  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  ==  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  ==  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  fieldType);	  if(mapped    ==    null)mapped    =    fieldType.getTypeAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
323	[BUG]  [BUGGY]  if(mapped  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  annotation);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  annotation);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  annotation);	  if(mapped    ==    null)mapped    =    fieldType.getTypeAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
324	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType.getRawType());  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType.getRawType());	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType());    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	41	None	replace
325	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(jsonAdapterPresent,  context,  fieldType.getRawType());  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(jsonAdapterPresent,  context,  fieldType.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(jsonAdapterPresent,  context,  fieldType.getRawType());	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType());    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	41	None	replace
326	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor.getRawType());  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor.getRawType());	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
327	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  constructor,  fieldType.getRawType());  [CE]  cannot  find  symbol  constructor  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  constructor,  fieldType.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  constructor,  fieldType.getRawType());	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol  constructor	41	None	replace
328	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldConstructor,  fieldType.getRawType());  [CE]  cannot  find  symbol  fieldConstructor  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  fieldConstructor,  fieldType.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  fieldConstructor,  fieldType.getRawType());	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol  fieldConstructor	41	None	replace
329	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor.getRawType());  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor.getRawType());	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
330	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  fieldType.getRawType());  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  fieldType.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  fieldType.getRawType());	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType());    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	41	None	replace
331	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	8	6	add
332	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	8	6	add
333	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getTypeAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getTypeAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getTypeAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
334	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	8	6	add
335	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	8	6	add
336	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	8	6	add
337	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	8	6	add
338	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAccessor(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAccessor(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAccessor(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
339	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [CE]  no  suitable  method  found  for  getAdapter(boolean)  [FE]              ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean)	8	None	add
340	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  >=  null)mapped  =  context.getAdapter(fieldType);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  >=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  >=  null)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	8	None	add
341	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(field);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(field);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getTypeAdapter(field);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
342	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(context);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(context);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
343	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	44	None	replace
344	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	44	None	replace
345	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  constructor,  fieldType,  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  constructor,  fieldType,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  constructor,  fieldType,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	44	None	replace
346	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	44	None	replace
347	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	44	None	replace
348	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  fieldConstructor,  deserialize);  [CE]  cannot  find  symbol  fieldConstructor  [FE]                            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  fieldConstructor,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(fieldType,  fieldConstructor,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldConstructor	44	None	replace
349	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(isPrimitive)mapped    =    context.getAdapter(fieldType);    if(isPrimitive)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	81	1	add
350	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped    =    context.getAdapter(fieldType);    if(isPrimitive)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	81	1	add
351	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  If(isPrimitive)mapped  =  context.getAdapter(fieldType);  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  If(isPrimitive)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped    =    context.getAdapter(fieldType);    If(isPrimitive)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  ';'  expected	81	None	add
352	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped    =    context.getAdapter(fieldType);    if(isPrimitive)mapped  =  field.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol	81	None	add
353	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	35	None	replace
354	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(fieldType,  context,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(fieldType,  context,  constructor);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(fieldType,  context,  constructor);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  constructor	35	None	replace
355	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	35	None	replace
356	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  context,  constructorConstructor,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  context,  constructorConstructor,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  context,  constructorConstructor,  fieldType);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	35	None	replace
357	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  context,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  context,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  context,  fieldType);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	35	None	replace
358	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  context,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  context,  constructorConstructor);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  context,  constructorConstructor);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	35	None	replace
359	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  context.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped  =  context.getTypeAdapter(fieldType);	  if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
360	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAdapter(boolean)  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped  =  context.getAdapter(jsonAdapterPresent);	  if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean)	98	None	replace
361	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped  =  field.getAdapter(fieldType);	  if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
362	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>)  [FE]          ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);	  if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>)	98	None	replace
363	[BUG]  [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent  ==  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	48	None	replace
364	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(fieldType,  constructorConstructor,  jsonAdapterPresent);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	48	None	replace
365	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	10	6	add
366	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	10	6	add
367	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	10	6	add
368	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	10	6	add
369	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getTypeAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getTypeAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getTypeAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
370	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	10	6	add
371	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	10	6	add
372	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getTypeAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getTypeAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getTypeAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
373	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  >=  null)mapped  =  context.getAdapter(fieldType);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  >=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  >=  null)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	10	None	add
374	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	10	6	add
375	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	10	6	add
376	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  isPrimitive);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,TypeAdapter<CAP#2>,boolean)  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  isPrimitive);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType,    mapped);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,TypeAdapter<CAP#2>,boolean)	96	None	replace
377	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  deserialize);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,TypeAdapter<CAP#2>,boolean)  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  deserialize);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType,    mapped);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,TypeAdapter<CAP#2>,boolean)	96	None	replace
378	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  serialize);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,TypeAdapter<CAP#2>,boolean)  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  serialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  serialize);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType,    mapped);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,TypeAdapter<CAP#2>,boolean)	96	None	replace
379	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  fieldNamingStrategy);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  fieldNamingStrategy);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType,    mapped);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	96	None	replace
380	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,TypeAdapter<CAP#2>,boolean)  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType,    mapped);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,TypeAdapter<CAP#2>,boolean)	96	None	replace
381	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  annotation);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,JsonAdapter)  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  annotation);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  annotation);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType,    mapped);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,JsonAdapter)	96	None	replace
382	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  description);  [CE]  cannot  find  symbol  description  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  description);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped,  description);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType,    mapped);    	non-compiled	[CE]  cannot  find  symbol  description	96	None	replace
383	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  jsonAdapterPresent.getTypeAdapter(context);  [CE]  boolean  cannot  be  dereferenced  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  jsonAdapterPresent.getTypeAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  jsonAdapterPresent.getTypeAdapter(context);	  if(mapped!=    null)mapped    =    context.getTypeAdapter(jsonAdapterPresent);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	38	None	replace
384	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  mapped.getTypeAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  mapped.getTypeAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  mapped.getTypeAdapter(jsonAdapterPresent);	  if(mapped!=    null)mapped    =    context.getTypeAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
385	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  jsonAdapterPresent);	  if(mapped!=    null)mapped    =    context.getTypeAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
386	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent);	  if(mapped!=    null)mapped    =    context.getTypeAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	38	None	replace
387	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  context,  jsonAdapterPresent.getTypeAdapter(jsonAdapterPresent);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  context,  jsonAdapterPresent.getTypeAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  context,  jsonAdapterPresent.getTypeAdapter(jsonAdapterPresent);	  if(mapped!=    null)mapped    =    context.getTypeAdapter(jsonAdapterPresent);    	non-compiled	[CE]  ';'  expected	38	None	replace
388	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  mapped.getTypeAdapter(fieldType,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  mapped.getTypeAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  mapped.getTypeAdapter(fieldType,  jsonAdapterPresent);	  if(jsonAdapterPresent    ==    null)mapped    =    context.getTypeAdapter(fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	3	None	replace
389	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  mapped);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  mapped);	  if(jsonAdapterPresent    ==    null)mapped    =    context.getTypeAdapter(fieldType,    mapped);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
390	[BUG]  [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  mapped.getTypeAdapter(fieldType,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  mapped.getTypeAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  ==  null)mapped  =  mapped.getTypeAdapter(fieldType,  jsonAdapterPresent);	  if(jsonAdapterPresent    ==    null)mapped    =    context.getTypeAdapter(fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	3	None	replace
391	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(fieldType,  mapped,  isPrimitive);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(fieldType,  mapped,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  context.getTypeAdapter(fieldType,  mapped,  isPrimitive);	  if(jsonAdapterPresent    ==    null)mapped    =    context.getTypeAdapter(fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	3	None	replace
392	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  mapped,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  mapped,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  mapped,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	72	None	replace
393	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(jsonAdapterPresent,  context,  constructorConstructor,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(jsonAdapterPresent,  context,  constructorConstructor,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(jsonAdapterPresent,  context,  constructorConstructor,  fieldType);	  if    (mapped!=    null)mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	72	None	replace
394	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(context);  [CE]  incomparable  types:  boolean  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(context);	  if    (jsonAdapterPresent!=    null)mapped    =    fieldType.getAdapter(context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	21	None	replace
395	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(annotation);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(annotation);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(annotation);	  if    (jsonAdapterPresent!=    null)mapped    =    fieldType.getAdapter(context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	21	None	replace
396	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType.getRawType(),  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType.getRawType(),  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  fieldType.getRawType(),  jsonAdapterPresent);	          mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType(),    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	86	None	replace
397	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType.getRawType(),  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType.getRawType(),  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType.getRawType(),  jsonAdapterPresent);	          mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType(),    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	86	None	replace
398	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(jsonAdapterPresent,  context,  fieldType.getRawType(),  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(jsonAdapterPresent,  context,  fieldType.getRawType(),  constructorConstructor);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(jsonAdapterPresent,  context,  fieldType.getRawType(),  constructorConstructor);	          mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType(),    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	86	None	replace
399	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor.getRawType(),  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor.getRawType(),  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(fieldType,  context,  constructorConstructor.getRawType(),  jsonAdapterPresent);	          mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType(),    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
400	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  constructor,  fieldType.getRawType(),  jsonAdapterPresent);  [CE]  cannot  find  symbol  constructor  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  constructor,  fieldType.getRawType(),  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  constructor,  fieldType.getRawType(),  jsonAdapterPresent);	          mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType(),    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  constructor	86	None	replace
401	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  fieldConstructor.getRawType(),  jsonAdapterPresent);  [CE]  cannot  find  symbol  fieldConstructor  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  fieldConstructor.getRawType(),  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(fieldType,  fieldConstructor.getRawType(),  jsonAdapterPresent);	          mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType(),    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  fieldConstructor	86	None	replace
402	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context.getRawType(),  constructorConstructorPresent);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context.getRawType(),  constructorConstructorPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(fieldType,  context.getRawType(),  constructorConstructorPresent);	          mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType(),    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
403	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  serialize);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  serialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  serialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)	15	None	replace
404	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  serialize,  jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  serialize,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  serialize,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    context.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)	15	None	replace
405	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(fieldType,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(fieldType,  mapped);	  if    (mapped!=    null)mapped    =    field.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	110	None	replace
406	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  fieldType);	  if    (mapped!=    null)mapped    =    field.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
407	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  jsonAdapterPresent.getAdapter(fieldType,  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  jsonAdapterPresent.getAdapter(fieldType,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  jsonAdapterPresent.getAdapter(fieldType,  fieldType);	  if    (mapped!=    null)mapped    =    field.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	110	None	replace
408	[BUG]  [BUGGY]  if(mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  context.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  context.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  context.getAdapter(jsonAdapterPresent);	  if(mapped!=    null    &&    mapped.contains(fieldType))    mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
409	[BUG]  [BUGGY]  if(mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  field.getAdapter(context);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  field.getAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  field.getAdapter(context);	  if(mapped!=    null    &&    mapped.contains(fieldType))    mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
410	[BUG]  [BUGGY]  if(mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  fieldType.getAdapter(context);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  fieldType.getAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  fieldType.getAdapter(context);	  if(mapped!=    null    &&    mapped.contains(fieldType))    mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
411	[BUG]  [BUGGY]  if(mapped!=  null  &&  fieldType.contains(mapped))  mapped  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  fieldType.contains(mapped))  mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  fieldType.contains(mapped))  mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null    &&    mapped.contains(fieldType))    mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
412	[BUG]  [BUGGY]  if(mapped!=  null  ||  mapped.contains(fieldType))  mapped  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  ||  mapped.contains(fieldType))  mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  ||  mapped.contains(fieldType))  mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null    &&    mapped.contains(fieldType))    mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
413	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null  &&  mapped  =  field.getAdapter(jsonAdapterPresent);  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null  &&  mapped  =  field.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null  &&  mapped  =  field.getAdapter(jsonAdapterPresent);	  if    (mapped!=    null    &&    jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  ')'  expected	99	None	replace
414	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  context.getAdapter(jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAdapter(boolean)  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  context.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  context.getAdapter(jsonAdapterPresent);	  if    (mapped!=    null    &&    jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean)	99	None	replace
415	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  fields.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  fields.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  fields.getAdapter(jsonAdapterPresent);	  if    (mapped!=    null    &&    jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  fields	99	None	replace
416	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent,  jsonAdapterPresent);	  if    (mapped!=    null    &&    jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
417	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getAdapter(context);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  fieldType.getAdapter(context);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    >=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
418	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  >=  null)mapped  =  context.getAdapter(fieldType);  [CE]  incomparable  types:  boolean  and  <null>  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  >=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  >=  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    >=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	12	None	replace
419	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped!=  context.getAdapter(fieldType))  mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(mapped!=  null  &&  mapped!=  context.getAdapter(fieldType))  mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    >=    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	12	8	replace
420	[BUG]  [BUGGY]  if(mapped!=  null  &&  mapped!=  context.getAdapter(fieldType))  mapped  =  context.getAdapter(fieldType);  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped!=  context.getAdapter(fieldType))  mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  mapped!=  context.getAdapter(fieldType))  mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    >=    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	12	8	replace
421	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [CE]  incomparable  types:  boolean  and  <null>  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    If(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	67	None	replace
422	[BUG]  [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [CE]  incomparable  types:  boolean  and  <null>  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  ==  null)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    If(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	67	None	replace
423	[BUG]  [BUGGY]  if(jsonAdapterPresent  >  0)mapped  =  context.getAdapter(fieldType);  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  >  0)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  >  0)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    If(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	67	None	replace
424	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  deserialize);	  if    (mapped!=    null)mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	49	None	replace
425	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	49	None	replace
426	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  serialize,  isPrimitive);  [CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>,boolean,boolean)  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  serialize,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  serialize,  isPrimitive);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>,boolean,boolean)	18	None	replace
427	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  mapped,  isPrimitive);  [CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>,TypeAdapter<CAP#2>,boolean)  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  mapped,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  mapped,  isPrimitive);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>,TypeAdapter<CAP#2>,boolean)	18	None	replace
428	[BUG]  [BUGGY]  if  (mapped  ==  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped  ==  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped  ==  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)	18	None	replace
429	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  serialize);  [CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>,boolean)  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  serialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  serialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>,boolean)	18	None	replace
430	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getAdapter(fieldType);	  if    (mapped!=    null)mapped    =    jsonAdapterPresent.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
431	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType);	  if    (mapped!=    null)mapped    =    jsonAdapterPresent.getAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	91	None	replace
432	[BUG]  [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(fieldType);	  if(!isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
433	[BUG]  [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);	  if(!isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
434	[BUG]  [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  fieldType.getAdapter(jsonAdapterPresent);	  if(!isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
435	[BUG]  [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAnnotation(JsonAdapter.class);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAnnotation(JsonAdapter.class);	  if(!isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
436	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(fieldType,    context,    mapped,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	116	None	replace
437	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  mapped,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  mapped,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  mapped,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(fieldType,    context,    mapped,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	116	None	replace
438	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructor,  fieldType,  mapped,  jsonAdapterPresent);  [CE]  cannot  find  symbol  constructor  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructor,  fieldType,  mapped,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructor,  fieldType,  mapped,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(fieldType,    context,    mapped,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  constructor	116	None	replace
439	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(jsonAdapterPresent,  context,  mapped,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(jsonAdapterPresent,  context,  mapped,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(jsonAdapterPresent,  context,  mapped,  fieldType);	  if    (mapped!=    null)mapped    =    getTypeAdapter(fieldType,    context,    mapped,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	116	None	replace
440	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(!isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	79	6	add
441	[BUG]  [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	79	6	add
442	[BUG]  [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol	79	None	add
443	[BUG]  [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  If(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  If(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    If(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  ';'  expected	79	None	add
444	[BUG]  [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType);	  	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	79	None	add
445	[BUG]  [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  deserialize);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean)  [FE]            NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  deserialize);	  	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean)	79	None	add
446	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  deserialize);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  deserialize);	  if    (jsonAdapterPresent!=    null)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	28	None	replace
447	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  isPrimitive);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  isPrimitive);	  if    (jsonAdapterPresent!=    null)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	28	None	replace
448	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  annotation);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  annotation);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(jsonAdapterPresent,  annotation);	  if    (jsonAdapterPresent!=    null)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	28	None	replace
449	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getAdapter(field);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getAdapter(field);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  fieldType.getAdapter(field);	  if(mapped!=    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
450	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [CE]  incomparable  types:  boolean  and  <null>  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	8	None	add
451	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(map!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  map  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(map!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(map!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol  map	8	None	add
452	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	8	6	add
453	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	8	6	add
454	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    >=    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	12	8	replace
455	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    >=    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	12	8	replace
456	[BUG]  [BUGGY]  if  (isPrimitive  &&  jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (isPrimitive  &&  jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (isPrimitive  &&  jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	48	None	replace
457	[BUG]  [BUGGY]  if  (fieldType!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (fieldType!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (fieldType!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  jsonAdapterPresent);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	48	None	replace
458	[BUG]  [BUGGY]  if  (mapped  ==  null)mapped  =  fieldType.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped  ==  null)mapped  =  fieldType.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped  ==  null)mapped  =  fieldType.getAdapter(fieldType);	  if    (mapped    ==    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
459	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null  &&  mapped)mapped  =  field.getAdapter(jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null  &&  mapped)mapped  =  field.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null  &&  mapped)mapped  =  field.getAdapter(jsonAdapterPresent);	  if    (mapped!=    null    &&    jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	99	None	replace
460	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null  &&  mapped.getAdapter(field))  =  field.getAdapter(jsonAdapterPresent);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null  &&  mapped.getAdapter(field))  =  field.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null  &&  mapped.getAdapter(field))  =  field.getAdapter(jsonAdapterPresent);	  if    (mapped!=    null    &&    jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
461	[BUG]  [BUGGY]  if  (map!=  null  &&  jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  map  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (map!=  null  &&  jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (map!=  null  &&  jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent);	  if    (mapped!=    null    &&    jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  map	99	None	replace
462	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapter);  [CE]  incomparable  types:  boolean  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapter);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapter);	  if    (jsonAdapterPresent!=    null)mapped    =    fieldType.getAdapter(context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	21	None	replace
463	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructor,  context,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  constructor  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructor,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructor,  context,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(fieldType,    context,    mapped,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  constructor	116	None	replace
464	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructorPresent,  jsonAdapterPresent);  [CE]  cannot  find  symbol  constructorConstructorPresent  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructorPresent,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  fieldType,  constructorConstructorPresent,  jsonAdapterPresent);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  constructorConstructorPresent	39	None	replace
465	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  If(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  If(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  If(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    If(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  ';'  expected	14	None	replace
466	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)  {  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(jsonAdapterPresent)  {  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    If(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	14	8	replace
467	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)  {  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)  {  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    If(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	14	8	replace
468	[BUG]  [BUGGY]  if(jsonAdapterPresent  ==  null)  {  mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  ==  null)  {  mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  ==  null)  {  mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    If(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	14	None	replace
469	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  jsonAdapterPresent.getAdapter(context);  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  jsonAdapterPresent.getAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  jsonAdapterPresent.getAdapter(context);	  if    (mapped!=    null)mapped    =    mapped.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	27	None	replace
470	[BUG]  [BUGGY]  if  (value!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  value  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (value!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (value!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);	  if    (map!=    null)mapped    =    context.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  value	71	None	replace
471	[BUG]  [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  isPrimitive);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent  ==  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  isPrimitive);	  if    (jsonAdapterPresent    ==    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	70	None	replace
472	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(mapped);	  if    (mapped!=    null)mapped    =    jsonAdapterPresent.getAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	91	None	replace
473	[BUG]  [BUGGY]  if  (isPrimitive  &&  mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (isPrimitive  &&  mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (isPrimitive  &&  mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(annotation,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	52	None	replace
474	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  field.getAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  field.getAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  field.getAdapter(jsonAdapterPresent,  fieldType);	  if    (mapped!=    null    &&    mapped.contains(fieldType))    mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
475	[BUG]  [BUGGY]  if  (fieldType!=  null  &&  mapped.contains(fieldType))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (fieldType!=  null  &&  mapped.contains(fieldType))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (fieldType!=  null  &&  mapped.contains(fieldType))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);	  if    (mapped!=    null    &&    mapped.contains(fieldType))    mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
476	[BUG]  [BUGGY]  if  (mapped!=  null  &&  fieldType.contains(mapped))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  fieldType.contains(mapped))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  fieldType.contains(mapped))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);	  if    (mapped!=    null    &&    mapped.contains(fieldType))    mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
477	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  fieldNamingStrategy);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  fieldNamingStrategy);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType,  fieldNamingStrategy);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getAdapter(fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	19	None	replace
478	[BUG]  [BUGGY]  if(mapped!=  null  &&  fieldType.isEmpty())mapped  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  fieldType.isEmpty())mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  fieldType.isEmpty())mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null    &&    mapped.isEmpty())mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
479	[BUG]  [BUGGY]  if(mapped!=  null  &&  mapped.isEmpty())mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped.isEmpty())mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  mapped.isEmpty())mapped  =  field.getAdapter(fieldType);	  if(mapped!=    null    &&    mapped.isEmpty())mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
480	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	77	6	add
481	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	77	6	add
482	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive)map  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  map  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive)map  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    if(!isPrimitive)map  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol  map	97	None	add
483	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  for(!isPrimitive)mapped  =  context.getAdapter(fieldType);  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  for(!isPrimitive)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    for(!isPrimitive)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  not  a  statement	97	None	add
484	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	95	None	replace
485	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(fieldType!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(fieldType!=  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    >>    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  ComparisonFailure  	13	6	replace
486	[BUG]  [BUGGY]  if(fieldType!=  null)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(fieldType!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(fieldType!=  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    >>    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  ComparisonFailure  	13	6	replace
487	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    >>    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	13	8	replace
488	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    >>    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	13	8	replace
489	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldConstructor,  context,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  fieldConstructor  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(fieldConstructor,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(fieldConstructor,  context,  fieldType,  jsonAdapterPresent);	  mapped    =    getTypeAdapter(constructor,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  fieldConstructor	43	None	replace
490	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotationConstructor,  context,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  annotationConstructor  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(annotationConstructor,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(annotationConstructor,  context,  fieldType,  jsonAdapterPresent);	  mapped    =    getTypeAdapter(constructor,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  annotationConstructor	43	None	replace
491	[BUG]  [BUGGY]  if  (map!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  map  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (map!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (map!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(fieldType,    constructorConstructor,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  map	46	None	replace
492	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorPrector,  context,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  constructorPrector  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorPrector,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorPrector,  context,  fieldType,  jsonAdapterPresent);	          mapped    =    getTypeAdapter(context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  constructorPrector	87	None	replace
493	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  null,  fieldType,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  null,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  null,  fieldType,  jsonAdapterPresent);	          mapped    =    getTypeAdapter(context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	87	None	replace
494	[BUG]  [BUGGY]  if  (isPrimitive  &&  mapped!=  null  &&  mapped.getAdapter(fieldType));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (isPrimitive  &&  mapped!=  null  &&  mapped.getAdapter(fieldType));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (isPrimitive  &&  mapped!=  null  &&  mapped.getAdapter(fieldType));	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType));    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
495	[BUG]  [BUGGY]  if  (fieldType!=  null  &&  mapped.getAdapter(fieldType));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (fieldType!=  null  &&  mapped.getAdapter(fieldType));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (fieldType!=  null  &&  mapped.getAdapter(fieldType));	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType));    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
496	[BUG]  [BUGGY]  if  (!isPrimitive  &&  mapped!=  null  &&  mapped.getAdapter(fieldType));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (!isPrimitive  &&  mapped!=  null  &&  mapped.getAdapter(fieldType));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (!isPrimitive  &&  mapped!=  null  &&  mapped.getAdapter(fieldType));	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType));    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
497	[BUG]  [BUGGY]  if  (isPrimitive  &&  mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (isPrimitive  &&  mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (isPrimitive  &&  mapped!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)	16	None	replace
498	[BUG]  [BUGGY]  if  (map!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);  [CE]  cannot  find  symbol  map  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (map!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (map!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  map	16	None	replace
499	[BUG]  [BUGGY]  if  (isPrimitive)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (isPrimitive)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (isPrimitive)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean,boolean)	16	None	replace
500	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  fieldType.getRawType(),  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(fieldType,  context,  fieldType.getRawType(),  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(fieldType,  context,  fieldType.getRawType(),  jsonAdapterPresent);	          mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType(),    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	86	None	replace
501	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  fieldType.getRawType(),  jsonAdapterPresent,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  fieldType.getRawType(),  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  fieldType.getRawType(),  jsonAdapterPresent,  deserialize);	          mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType(),    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	86	None	replace
502	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructor,  fieldType,  fieldType.getRawType(),  jsonAdapterPresent,  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructor,  fieldType,  fieldType.getRawType(),  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructor,  fieldType,  fieldType.getRawType(),  jsonAdapterPresent,  deserialize);	          mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType(),    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  constructor	86	None	replace
503	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fields.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  fields  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  fields.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fields.getAdapter(jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  fields	25	None	replace
504	[BUG]  [BUGGY]  if  (isPrimitive  &&  mapped!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (isPrimitive  &&  mapped!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (isPrimitive  &&  mapped!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent);	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType).getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  ')'  expected	100	None	replace
505	[BUG]  [BUGGY]  if(!isPrimitive  &&  mapped!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive  &&  mapped!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive  &&  mapped!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent);	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType).getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  ')'  expected	100	None	replace
506	[BUG]  [BUGGY]  if(fieldType!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(fieldType!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(fieldType!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent);	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType).getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  ')'  expected	100	None	replace
507	[BUG]  [BUGGY]  if  (fieldType!=  null)mapped  =  field.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (fieldType!=  null)mapped  =  field.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (fieldType!=  null)mapped  =  field.getAdapter(jsonAdapterPresent);	  if    (jsonAdapterPresent!=    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
508	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  field.getAdapter(fieldType,  jsonAdapterPresent);	  if    (jsonAdapterPresent!=    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	69	None	replace
509	[BUG]  [BUGGY]  mapped.put(name,  jsonAdapterPresent,  delegate);  [CE]  cannot  find  symbol  delegate  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.put(name,  jsonAdapterPresent,  delegate);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.put(name,  jsonAdapterPresent,  delegate);	  mapped.put(name,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  delegate	40	None	replace
510	[BUG]  [BUGGY]  mapped.put(name,  jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.put(name,  jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.put(name,  jsonAdapterPresent,  fieldType);	  mapped.put(name,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
511	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructorConstructor);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructorConstructor);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructorConstructor);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
512	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  isPrimitive);	  if    (mapped!=    null)mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	49	None	replace
513	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent,  deserialize);	  if    (mapped!=    null)mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	49	None	replace
514	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  field.getTypeAdapter(constructorConstructor,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  field.getTypeAdapter(constructorConstructor,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  field.getTypeAdapter(constructorConstructor,  jsonAdapterPresent);	  if(mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
515	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  field.getTypeAdapter(field,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  field.getTypeAdapter(field,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  field.getTypeAdapter(field,  jsonAdapterPresent);	  if(mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
516	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructorConstructor,  jsonAdapterPresent,  context);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructorConstructor,  jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructorConstructor,  jsonAdapterPresent,  context);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
517	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getTypeAdapter(field,  jsonAdapterPresent,  fieldType);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
518	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructor,  context,  jsonAdapterPresent);  [CE]  cannot  find  symbol  constructor  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructor,  context,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructor,  context,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol  constructor	63	None	replace
519	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(context,  jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(context,  jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getTypeAdapter(context,  jsonAdapterPresent,  fieldType);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
520	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [CE]  incomparable  types:  boolean  and  <null>  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	10	None	add
521	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(map!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  map  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(map!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(map!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol  map	10	None	add
522	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  >=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  >=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped  >=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	10	None	add
523	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAccessor(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAccessor(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAccessor(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
524	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  fieldType.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  fieldType.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped  =  fieldType.getAdapter(jsonAdapterPresent);	  if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
525	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  fieldType.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  fieldType.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  fieldType.getAdapter(jsonAdapterPresent);	  if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
526	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null  &&  mapped!=  null  &&  mapped.getTypeAdapter(fieldType);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null  &&  mapped!=  null  &&  mapped.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null  &&  mapped!=  null  &&  mapped.getTypeAdapter(fieldType);	  if    (mapped!=    null    &&    fieldType.getTypeAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	113	None	replace
527	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null  &&  mapped!=  null  &&  fieldType.getTypeAdapter(fieldType);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null  &&  mapped!=  null  &&  fieldType.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null  &&  mapped!=  null  &&  fieldType.getTypeAdapter(fieldType);	  if    (mapped!=    null    &&    fieldType.getTypeAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	113	None	replace
528	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  context,  fieldType);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  context,  fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  context,  fieldType);  }	  if    (mapped!=    null    &&    fieldType.getTypeAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	113	None	replace
529	[BUG]  [BUGGY]  if  (isPrimitive  &&  mapped!=  null  &&  mapped.getTypeAdapter(fieldType);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (isPrimitive  &&  mapped!=  null  &&  mapped.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (isPrimitive  &&  mapped!=  null  &&  mapped.getTypeAdapter(fieldType);	  if    (mapped!=    null    &&    fieldType.getTypeAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	113	None	replace
530	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  context,  fieldType);  }  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  context,  fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  context,  fieldType);  }	  if    (mapped!=    null    &&    fieldType.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
531	[BUG]  [BUGGY]  if(mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  field.getAdapter(fieldType);	  if(mapped!=    null    &&    mapped.contains(fieldType))    mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
532	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getAdapter(field,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getAdapter(field,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getAdapter(field,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    field.getAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
533	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(field,  jsonAdapterPresent,  context);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(field,  jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getAdapter(field,  jsonAdapterPresent,  context);	  if    (mapped!=    null)mapped    =    field.getAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
534	[BUG]  [BUGGY]  if  (isPrimitive  &&  mapped!=  null  &&  mapped.getTypeAdapter(context,  fieldType);  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (isPrimitive  &&  mapped!=  null  &&  mapped.getTypeAdapter(context,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (isPrimitive  &&  mapped!=  null  &&  mapped.getTypeAdapter(context,  fieldType);	  if    (mapped!=    null    &&    jsonAdapterPresent.getTypeAdapter(context,    fieldType);    	non-compiled	[CE]  ')'  expected	114	None	replace
535	[BUG]  [BUGGY]  if  (!isPrimitive  &&  mapped!=  null  &&  mapped.getTypeAdapter(context,  fieldType);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (!isPrimitive  &&  mapped!=  null  &&  mapped.getTypeAdapter(context,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (!isPrimitive  &&  mapped!=  null  &&  mapped.getTypeAdapter(context,  fieldType);	  if    (mapped!=    null    &&    jsonAdapterPresent.getTypeAdapter(context,    fieldType);    	non-compiled	[CE]  ')'  expected	114	None	replace
536	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean)  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    fieldType.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean)	33	None	replace
537	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(JsonAdapterPresent);  [CE]  cannot  find  symbol  JsonAdapterPresent  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(JsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(JsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    fieldType.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  JsonAdapterPresent	33	None	replace
538	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  field.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  field.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  field.getAdapter(jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    fieldType.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
539	[BUG]  [BUGGY]  if  (isPrimitive  &&  jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (isPrimitive  &&  jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (isPrimitive  &&  jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  mapped);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(context,    constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	74	None	replace
540	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  field.getAdapter(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  field.getAdapter(JsonAdapter.class);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  field.getAdapter(JsonAdapter.class);	  if(mapped!=    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
541	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  fields.getAdapter(fieldType);  [CE]  cannot  find  symbol  fields  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  fields.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  fields.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	85	None	replace
542	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  field.getTypeAdapter(value,  jsonAdapterPresent);  [CE]  cannot  find  symbol  value  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  field.getTypeAdapter(value,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  field.getTypeAdapter(value,  jsonAdapterPresent);	  if(mapped!=    null)mapped    =    field.getTypeAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  value	106	None	replace
543	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  fields.getTypeAdapter(fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  fields  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  fields.getTypeAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  fields.getTypeAdapter(fieldType,  jsonAdapterPresent);	  if(mapped!=    null)mapped    =    field.getTypeAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  fields	106	None	replace
544	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
545	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(context);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(context);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(context);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
546	[BUG]  [BUGGY]  if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [CE]  ')'  expected  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	66	None	replace
547	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  field.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  field.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  field.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
548	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  serialize);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  serialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  serialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    deserialize);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	56	None	replace
549	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  fieldType,  constructorConstructor);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	35	None	replace
550	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  fieldType,  context);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  fieldType,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  fieldType,  context);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	35	None	replace
551	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  fieldType,  constructor);  [CE]  cannot  find  symbol  constructor  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  fieldType,  constructor);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  fieldType,  constructor);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  constructor	35	None	replace
552	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)map  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  map  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)map  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped    =    context.getAdapter(fieldType);    if(isPrimitive)map  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol  map	81	None	add
553	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
554	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  jsonAdapterPresent,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  jsonAdapterPresent,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	108	None	replace
555	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructor,  fieldType,  serialize,  jsonAdapterPresent,  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructor,  fieldType,  serialize,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructor,  fieldType,  serialize,  jsonAdapterPresent,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	108	None	replace
556	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  jsonAdapterPresent,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  jsonAdapterPresent,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	108	None	replace
557	[BUG]  [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  field.getAdapter(context);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  field.getAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent  ==  null)mapped  =  field.getAdapter(context);	  if    (jsonAdapterPresent    ==    null)mapped    =    fieldType.getAdapter(context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	22	None	replace
558	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  constructorConstructor.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  constructorConstructor.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  constructorConstructor.getAdapter(jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    fieldAdapter.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
559	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  constructorConstructor.getTypeAdapter(context);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  constructorConstructor.getTypeAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  constructorConstructor.getTypeAdapter(context);	  if    (mapped!=    null)mapped    =    fieldType.getTypeAdapter(context);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
560	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent,  fieldType);	  if    (mapped!=    null)mapped    =    fieldType.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
561	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  fields.getTypeAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  fields  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  fields.getTypeAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  fields.getTypeAdapter(jsonAdapterPresent);	  if(mapped!=    null)mapped    =    context.getTypeAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  fields	38	None	replace
562	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  context.getTypeAdapter(jsonAdapterPresent,  isPrimitive);	  if(mapped!=    null)mapped    =    context.getTypeAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
563	[BUG]  [BUGGY]  mapped.add(field.getAnnotation(JsonAdapter.class),  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.add(field.getAnnotation(JsonAdapter.class),  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.add(field.getAnnotation(JsonAdapter.class),  jsonAdapterPresent);	  mapped.add(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
564	[BUG]  [BUGGY]  mapped.add(annotation,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.add(annotation,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.add(annotation,  jsonAdapterPresent);	  mapped.add(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
565	[BUG]  [BUGGY]  mapped.add(field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent));  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.add(field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.add(field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent));	  mapped.add(jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	45	None	replace
566	[BUG]  [BUGGY]  mapped.add(annotations,  jsonAdapterPresent);  [CE]  cannot  find  symbol  annotations  [FE]                          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.add(annotations,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.add(annotations,  jsonAdapterPresent);	  mapped.add(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  annotations	45	None	replace
567	[BUG]  [BUGGY]  if(fieldType.getTypeAdapter(jsonAdapterPresent)mapped  =  context.getTypeAdapter(jsonAdapterPresent);  [CE]  ')'  expected  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(fieldType.getTypeAdapter(jsonAdapterPresent)mapped  =  context.getTypeAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(fieldType.getTypeAdapter(jsonAdapterPresent)mapped  =  context.getTypeAdapter(jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	31	None	replace
568	[BUG]  [BUGGY]  if(fieldType.getTypeAdapter(jsonAdapterPresent)mapped  =  context.getTypeAdapter(jsonAdapter);  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(fieldType.getTypeAdapter(jsonAdapterPresent)mapped  =  context.getTypeAdapter(jsonAdapter);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(fieldType.getTypeAdapter(jsonAdapterPresent)mapped  =  context.getTypeAdapter(jsonAdapter);	  if(jsonAdapterPresent)mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	31	None	replace
569	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getTypeAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getTypeAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getTypeAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
570	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  mapped);	  if(jsonAdapterPresent    ==    null)mapped    =    context.getTypeAdapter(fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	3	None	replace
571	[BUG]  [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  mapped);	  if(jsonAdapterPresent    ==    null)mapped    =    context.getTypeAdapter(fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	3	None	replace
572	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  deserialize);	          mapped    =    getTypeAdapter(jsonAdapterPresent,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	68	None	replace
573	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  null,  context,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  null,  context,  fieldType,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  null,  context,  fieldType,  deserialize);	          mapped    =    getTypeAdapter(jsonAdapterPresent,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	68	None	replace
574	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(isPrimitive  &&  isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    If(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	67	8	replace
575	[BUG]  [BUGGY]  if(isPrimitive  &&  isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    If(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	67	8	replace
576	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  If(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  If(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  context.getAdapter(fieldType);  If(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    If(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  ';'  expected	67	None	replace
577	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  If(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  If(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  If(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    If(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  ';'  expected	67	None	replace
578	[BUG]  [BUGGY]  if  (fieldType  ==  null)mapped  =  field.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (fieldType  ==  null)mapped  =  field.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (fieldType  ==  null)mapped  =  field.getAdapter(jsonAdapterPresent);	  if    (jsonAdapterPresent    ==    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
579	[BUG]  [BUGGY]  if(jsonAdapterPresent  >  0)  {  mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  >  0)  {  mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  >  0)  {  mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	9	None	replace
580	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	9	8	replace
581	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  }  [FE]  NullPointerException  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	9	8	replace
582	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(i,  fieldType);  [CE]  cannot  find  symbol  i  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getTypeAdapter(i,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getTypeAdapter(i,  fieldType);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  i	112	None	replace
583	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fields.getTypeAdapter(jsonAdapterPresent,  context);  [CE]  cannot  find  symbol  fields  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  fields.getTypeAdapter(jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fields.getTypeAdapter(jsonAdapterPresent,  context);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol  fields	60	None	replace
584	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(target);  [CE]  cannot  find  symbol  target  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(target);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fieldType.getTypeAdapter(target);	  if    (mapped!=    null)mapped    =    fields.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  target	84	None	replace
585	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  mapped  =  mapped.getTypeAdapter(fieldType);  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)  {  mapped  =  mapped.getTypeAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)  {  mapped  =  mapped.getTypeAdapter(fieldType);  }	  if    (mapped!=    null    &&    mapped.getTypeAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
586	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
587	[BUG]  [BUGGY]  if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	32	None	replace
588	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(field);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(field);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fieldType.getAdapter(field);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
589	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  else  mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  else  mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  context.getAdapter(fieldType);  else  mapped  =  context.getAdapter(fieldType);  }	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
590	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  else  mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(isPrimitive)mapped  =  context.getAdapter(fieldType);  else  mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    }    	compilable	  [FE]  ComparisonFailure  	107	6	replace
591	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  else  mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  else  mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  context.getAdapter(fieldType);  else  mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    }    	compilable	  [FE]  ComparisonFailure  	107	6	replace
592	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  isPrimitive)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(isPrimitive  &&  isPrimitive)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	65	4	replace
593	[BUG]  [BUGGY]  if(isPrimitive  &&  isPrimitive)mapped  =  context.getAdapter(fieldType);  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  isPrimitive)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  isPrimitive)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	65	4	replace
594	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,TypeAdapter<CAP#2>)  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  mapped);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType,    mapped);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,TypeAdapter<CAP#2>)	96	None	replace
595	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  fieldNamingStrategy,  mapped);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  fieldNamingStrategy,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType,  fieldNamingStrategy,  mapped);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType,    mapped);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	96	None	replace
596	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  jsonAdapterPresent);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	42	None	replace
597	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(jsonAdapter,  fieldType,  constructorConstructor);  [CE]  cannot  find  symbol  jsonAdapter  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(jsonAdapter,  fieldType,  constructorConstructor);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(jsonAdapter,  fieldType,  constructorConstructor);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	42	None	replace
598	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(fieldType,  constructorConstructor);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(fieldType,  constructorConstructor);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(fieldType,  constructorConstructor);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	51	None	replace
599	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(annotation,  fieldType,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(annotation,  fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(annotation,  fieldType,  mapped);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	51	None	replace
600	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(field,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(field,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(field,  jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
601	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType,  jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
602	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(field.getAdapter(jsonAdapterPresent);  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(field.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(field.getAdapter(jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  ')'  expected	34	None	replace
603	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  fields.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  fields  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  fields.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  fields.getAdapter(jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  fields	34	None	replace
604	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(field);  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(field);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(field);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
605	[BUG]  [BUGGY]  mapped  =  field.getAnnotation(JsonAdapter.class),  jsonAdapterPresent);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  field.getAnnotation(JsonAdapter.class),  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  field.getAnnotation(JsonAdapter.class),  jsonAdapterPresent);	          mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	88	None	replace
606	[BUG]  [BUGGY]  if(mapped  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  fieldType);	  if(mapped    ==    null)mapped    =    field.getTypeAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
607	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  jsonAdapterPresent.getAdapter(fieldType,  mapped);  [CE]  boolean  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  jsonAdapterPresent.getAdapter(fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  jsonAdapterPresent.getAdapter(fieldType,  mapped);	  if    (mapped!=    null)mapped    =    mapped.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	29	None	replace
608	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getAdapter(mapped,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getAdapter(mapped,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getAdapter(mapped,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    mapped.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
609	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(fieldType,  mapped);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(fieldType,  mapped);	  if    (mapped!=    null)mapped    =    mapped.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	29	None	replace
610	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getTypeAdapter(context,  jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getTypeAdapter(context,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  fieldType.getTypeAdapter(context,  jsonAdapterPresent,  isPrimitive);	  if(mapped    ==    null)mapped    =    context.getTypeAdapter(fieldType,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
611	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  context,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  context,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  context,  isPrimitive);	  if(mapped    ==    null)mapped    =    context.getTypeAdapter(fieldType,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
612	[BUG]  [BUGGY]  if(mapped  ==  null)mapped  =  field.getTypeAdapter(context,  jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  ==  null)mapped  =  field.getTypeAdapter(context,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  ==  null)mapped  =  field.getTypeAdapter(context,  jsonAdapterPresent,  isPrimitive);	  if(mapped    ==    null)mapped    =    context.getTypeAdapter(fieldType,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
613	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(fieldType,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(fieldType,  constructorConstructor);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(fieldType,  constructorConstructor);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	83	None	replace
614	[BUG]  [BUGGY]  if  (isPrimitive!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (isPrimitive!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (isPrimitive!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	23	None	replace
615	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapter,  isPrimitive);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapter,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  fieldType.getAdapter(jsonAdapter,  isPrimitive);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	23	None	replace
616	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	64	6	add
617	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	64	6	add
618	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	64	6	add
619	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	64	6	add
620	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(serialize)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(serialize)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	64	6	add
621	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(serialize)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(serialize)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(serialize)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	64	6	add
622	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)mapped  =  context.getTypeAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)mapped  =  context.getTypeAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive)mapped  =  context.getTypeAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
623	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  serialize,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  serialize,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	44	None	replace
624	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  fieldType,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	44	None	replace
625	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  constructorConstructor,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  constructorConstructor,  serialize,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  constructorConstructor,  serialize,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	44	None	replace
626	[BUG]  [BUGGY]  if  (map!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  map  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (map!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (map!=  null)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  map	18	None	replace
627	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(map);  [CE]  cannot  find  symbol  map  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(map);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(map);	  if(jsonAdapterPresent)mapped    =    mapped.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  map	36	None	replace
628	[BUG]  [BUGGY]  if(isPrimitive)mapped  =  mapped.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive)mapped  =  mapped.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive)mapped  =  mapped.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    mapped.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
629	[BUG]  [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  context);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  context);	  if(mapped    ==    null)mapped    =    jsonAdapterPresent.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	5	None	replace
630	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  fields.getAdapter(fieldType);  [CE]  cannot  find  symbol  fields  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  fields.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  fields.getAdapter(fieldType);	  if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	78	None	replace
631	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  fieldType);	  if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	78	None	replace
632	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  FieldUtils.safeMultiply(context,  fieldType);  [CE]  cannot  find  symbol  FieldUtils  [FE]        NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  FieldUtils.safeMultiply(context,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  FieldUtils.safeMultiply(context,  fieldType);	  if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	78	None	replace
633	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	11	8	replace
634	[BUG]  [BUGGY]  if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)  {  mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	11	8	replace
635	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)  {  mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	11	None	replace
636	[BUG]  [BUGGY]  if(jsonAdapterPresent  >  0)  {  mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  >  0)  {  mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  >  0)  {  mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	11	None	replace
637	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  jsonAdapterPresent);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  jsonAdapterPresent);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	73	None	replace
638	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructor,  fieldType,  context.getRawType());  [CE]  cannot  find  symbol  constructor  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructor,  fieldType,  context.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructor,  fieldType,  context.getRawType());	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol  constructor	41	None	replace
639	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType.getRawType());  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(annotation,  context,  fieldType.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(annotation,  context,  fieldType.getRawType());	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType());    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	41	None	replace
640	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  context.getRawType());  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  context.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  context.getRawType());	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
641	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  field.getAdapter(context);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  field.getAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  field.getAdapter(context);	  if    (jsonAdapterPresent!=    null)mapped    =    fieldType.getAdapter(context);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
642	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(context,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(context,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
643	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
644	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(constructorConstructor,  context,  fieldType);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(constructorConstructor,  context,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(constructorConstructor,  context,  fieldType);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
645	[BUG]  [BUGGY]  if(mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);	  if(mapped!=    null    &&    mapped.contains(fieldType))    mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
646	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }	  	non-compiled	[CE]  illegal  start  of  type	77	None	add
647	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  context);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(jsonAdapterPresent,  context);	  if    (mapped!=    null)mapped    =    fieldType.getTypeAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
648	[BUG]  [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(!isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }	  	non-compiled	[CE]  illegal  start  of  type	79	None	add
649	[BUG]  [BUGGY]  mapped.add(field.getAnnotation(JsonAdapter.class,  serialize),  jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.add(field.getAnnotation(JsonAdapter.class,  serialize),  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.add(field.getAnnotation(JsonAdapter.class,  serialize),  jsonAdapterPresent);	  mapped.add(jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	45	None	replace
650	[BUG]  [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent);	  if(mapped!=    null)mapped    =    jsonAdapterPresent.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
651	[BUG]  [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent.getTypeAdapter(fieldType,  context));  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent.getTypeAdapter(fieldType,  context));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  jsonAdapterPresent.getTypeAdapter(fieldType,  context));	  if(mapped!=    null)mapped    =    jsonAdapterPresent.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	4	None	replace
652	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null  &&  mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null  &&  mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null  &&  mapped  =  context.getTypeAdapter(fieldType,  jsonAdapterPresent);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getTypeAdapter(jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  ')'  expected	62	None	replace
653	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  mapped.getTypeAdapter(context,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  mapped.getTypeAdapter(context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  mapped.getTypeAdapter(context,  fieldType,  jsonAdapterPresent);	  if(mapped    ==    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
654	[BUG]  [BUGGY]  if(mapped  ==  null)mapped  =  field.getTypeAdapter(annotation,  context,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  ==  null)mapped  =  field.getTypeAdapter(annotation,  context,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  ==  null)mapped  =  field.getTypeAdapter(annotation,  context,  jsonAdapterPresent);	  if(mapped    ==    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
655	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent,    jsonAdapterPresent);    	non-compiled	[CE]  ')'  expected	30	None	replace
656	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  isPrimitive);	  mapped    =    getTypeAdapter(constructor,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	43	None	replace
657	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped.getAdapter(fieldType));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped.getAdapter(fieldType));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped.getAdapter(fieldType));	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType));    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
658	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getAdapter(mapped);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getAdapter(mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  fieldType.getAdapter(mapped);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    >=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
659	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped.getTypeAdapter(context);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped.getTypeAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped.getTypeAdapter(context);	  if    (mapped!=    null)mapped    =    fieldType.getTypeAdapter(context);    	non-compiled	[CE]  ')'  expected	57	None	replace
660	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped  =  field.getTypeAdapter(context);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped  =  field.getTypeAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped  =  field.getTypeAdapter(context);	  if    (mapped!=    null)mapped    =    fieldType.getTypeAdapter(context);    	non-compiled	[CE]  ')'  expected	57	None	replace
661	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  fieldType,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(annotation,  fieldType,  jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	35	None	replace
662	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(field));  [CE]  boolean  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(field));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(field));	  if    (mapped!=    null)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	25	None	replace
663	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  jsonAdapterPresent.getTypeAdapter(context,  field);  [CE]  boolean  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  jsonAdapterPresent.getTypeAdapter(context,  field);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  jsonAdapterPresent.getTypeAdapter(context,  field);	  if(mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	6	None	replace
664	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  field.getTypeAdapter(context,  jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  field.getTypeAdapter(context,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  field.getTypeAdapter(context,  jsonAdapterPresent,  isPrimitive);	  if(mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
665	[BUG]  [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(context,  fieldType);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(context,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(context,  fieldType);	  if(mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
666	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  FieldUtils.getAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  FieldUtils  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  FieldUtils.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  FieldUtils.getAdapter(jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    fieldAdapter.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	92	None	replace
667	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean)  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);	  if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean)	98	None	replace
668	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(!isPrimitive)mapped  =  context.getAdapter(fieldType.getRawType());	  if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  ComparisonFailure  	98	6	replace
669	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType.getRawType());  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped  =  context.getAdapter(fieldType.getRawType());	  if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  ComparisonFailure  	98	6	replace
670	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructor,  context,  mapped,  jsonAdapterPresent);  [CE]  cannot  find  symbol  constructor  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructor,  context,  mapped,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructor,  context,  mapped,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(fieldType,    context,    mapped,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  constructor	116	None	replace
671	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  field.getAdapter(constructorConstructor,  fieldType);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  field.getAdapter(constructorConstructor,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  field.getAdapter(constructorConstructor,  fieldType);	  if    (mapped!=    null    &&    mapped.contains(fieldType))    mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
672	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  jsonAdapterPresent,  deserialize);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  jsonAdapterPresent,  deserialize);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped,    jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	73	None	replace
673	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  mapped);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  mapped);	  if    (jsonAdapterPresent!=    null)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	73	None	replace
674	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);	  if    (map!=    null)mapped    =    context.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  ')'  expected	71	None	replace
675	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  }	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
676	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	add
677	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType,  mapped);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  field.getAdapter(fieldType,  mapped);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType,    mapped);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
678	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType,  jsonAdapterPresent);	  if    (mapped!=    null    &&    jsonAdapterPresent)mapped    =    field.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
679	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(constructor,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  constructor  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(constructor,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(constructor,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    fieldType.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol  constructor	76	None	replace
680	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    fieldType.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
681	[BUG]  [BUGGY]  if(jsonAdapterPresent  >=  null)mapped  =  context.getAdapter(fieldType);  If(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  >=  null)mapped  =  context.getAdapter(fieldType);  If(mapped!=  null)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  >=  null)mapped  =  context.getAdapter(fieldType);  If(mapped!=  null)mapped  =  context.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    If(mapped!=    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  ';'  expected	14	None	replace
682	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  }	  if    (mapped!=    null    &&    mapped.getTypeAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	111	None	replace
683	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  fieldType);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  fieldType);  }	  if    (mapped!=    null    &&    mapped.getTypeAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	111	None	replace
684	[BUG]  [BUGGY]  if(jsonAdapterPresent  ==  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent  ==  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent  ==  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  }	  if    (mapped!=    null    &&    mapped.getTypeAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	111	None	replace
685	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  fieldType,  deserialize);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  fieldType,  deserialize);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  fieldType,  deserialize);  }	  if    (mapped!=    null    &&    mapped.getTypeAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	111	None	replace
686	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent,  context);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getAdapter(jsonAdapterPresent,  context);	  if    (mapped!=    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
687	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType,  context);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType,  context);	  if    (mapped!=    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  ')'  expected	17	None	replace
688	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  fieldType.getRawType(),  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  fieldType.getRawType(),  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  fieldType.getRawType(),  jsonAdapterPresent);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType());    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	41	None	replace
689	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  fieldType.getRawType());  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(context,  fieldType,  fieldType.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(context,  fieldType,  fieldType.getRawType());	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType());    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	41	None	replace
690	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructor,  fieldType,  fieldType.getRawType());  [CE]  cannot  find  symbol  constructor  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructor,  fieldType,  fieldType.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructor,  fieldType,  fieldType.getRawType());	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol  constructor	41	None	replace
691	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  deserialize);  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(fieldType,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,boolean)	16	None	replace
692	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  mapped,  deserialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  mapped,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  mapped,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
693	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  deserialize);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
694	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  jsonAdapterPresent);  [CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(boolean,TypeToken<CAP#1>,boolean)	95	None	replace
695	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  annotation);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent,  annotation);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	42	None	replace
696	[BUG]  [BUGGY]  if(mapped  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  mapped);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  ==  null)mapped  =  fieldType.getTypeAdapter(jsonAdapterPresent,  mapped);	  if(jsonAdapterPresent    ==    null)mapped    =    context.getTypeAdapter(fieldType,    mapped);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
697	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  context.getTypeAdapter(fieldType,  mapped);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  context.getTypeAdapter(fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  context.getTypeAdapter(fieldType,  mapped);	  if(jsonAdapterPresent    ==    null)mapped    =    context.getTypeAdapter(fieldType,    mapped);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
698	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
699	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
700	[BUG]  [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getTypeAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  if(mapped!=  null)mapped  =  context.getTypeAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=        null)mapped        =        context.getAdapter(fieldType);        if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    if(mapped!=  null)mapped  =  context.getTypeAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
701	[BUG]  [BUGGY]  mapped.put(name,  jsonAdapterPresent,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.put(name,  jsonAdapterPresent,  deserialized);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.put(name,  jsonAdapterPresent,  deserialized);	  mapped.put(name,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  deserialized	40	None	replace
702	[BUG]  [BUGGY]  mapped.put(name,  jsonAdapterPresent,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped.put(name,  jsonAdapterPresent,  serializedName);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped.put(name,  jsonAdapterPresent,  serializedName);	  mapped.put(name,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  serializedName	40	None	replace
703	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
704	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getTypeAdapter(annotation,  context,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  fieldType.getTypeAdapter(annotation,  context,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  fieldType.getTypeAdapter(annotation,  context,  jsonAdapterPresent);	  if(mapped    ==    null)mapped    =    fieldType.getTypeAdapter(context,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
705	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorconstructor,  context,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  constructorconstructor  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorconstructor,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorconstructor,  context,  fieldType,  jsonAdapterPresent);	          mapped    =    getTypeAdapter(context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  constructorconstructor	87	None	replace
706	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(!isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(!isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  ComparisonFailure  	80	6	replace
707	[BUG]  [BUGGY]  if(!isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive  ||  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(!isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  ComparisonFailure  	80	6	replace
708	[BUG]  [BUGGY]  if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  mapped.getAdapter(fieldType);  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  mapped.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  mapped.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	32	None	replace
709	[BUG]  [BUGGY]  if(mapped  =  field.getAdapter(fieldType);  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  =  field.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	32	None	replace
710	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getAdapter(fieldType,  jsonAdapterPresent,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    mapped.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
711	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType,  mapped));  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType,  mapped));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent.getAdapter(fieldType,  mapped));	  if    (mapped!=    null)mapped    =    mapped.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	29	None	replace
712	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  fieldType.getRawType(),  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  fieldType.getRawType(),  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  fieldType.getRawType(),  jsonAdapterPresent);	          mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType(),    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	86	None	replace
713	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  fieldType.getRawType(),  jsonAdapterPresent,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  fieldType.getRawType(),  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  fieldType.getRawType(),  jsonAdapterPresent,  isPrimitive);	          mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType.getRawType(),    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	86	None	replace
714	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(isPrimitive)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }	  	non-compiled	[CE]  illegal  start  of  type	64	None	add
715	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  }	  	non-compiled	[CE]  illegal  start  of  type	64	None	add
716	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(fieldType!=  null)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(fieldType!=  null)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	64	6	add
717	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(fieldType!=  null)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  if(fieldType!=  null)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped        =        context.getAdapter(fieldType);        if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(fieldType!=  null)mapped  =  context.getAdapter(fieldType);  if(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  	compilable	  [FE]  ComparisonFailure  	64	6	add
718	[BUG]  [BUGGY]  if(mapped!=  null  &&  mapped.getAdapter(fieldType);  [CE]  ')'  expected  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  mapped.getAdapter(fieldType);	  if(mapped!=    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	85	None	replace
719	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped.contains(fieldType))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  isPrimitive);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
720	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    isPrimitive);    	non-compiled	[CE]  ')'  expected	18	None	replace
721	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType,  isPrimitive))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType,  isPrimitive))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped.contains(fieldType,  isPrimitive))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  isPrimitive);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
722	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType,  isPrimitive))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType,  isPrimitive))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped.contains(fieldType,  isPrimitive))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
723	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType,  isPrimitive))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  deserialize);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType,  isPrimitive))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped.contains(fieldType,  isPrimitive))  mapped  =  context.getAdapter(jsonAdapterPresent,  fieldType,  deserialize);	  if    (mapped!=    null)mapped    =    context.getAdapter(jsonAdapterPresent,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
724	[BUG]  [BUGGY]  if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  annotation.getAdapter(fieldType);  [CE]  ')'  expected  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  annotation.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  annotation.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    annotation.getAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	37	None	replace
725	[BUG]  [BUGGY]  if(mapped  =  fieldType.getAdapter(fieldType);  [CE]  ')'  expected  [FE]                      NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  =  fieldType.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  =  fieldType.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    annotation.getAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	37	None	replace
726	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getAdapter(fieldType);	  if    (jsonAdapterPresent!=    null)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
727	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  jsonAdapterPresent);	  if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	78	None	replace
728	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType.getRawType());	  if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	78	4	replace
729	[BUG]  [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType.getRawType());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType.getRawType());  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(isPrimitive  &&  jsonAdapterPresent)mapped  =  context.getAdapter(fieldType.getRawType());	  if(isPrimitive    &&    jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	78	4	replace
730	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	47	None	replace
731	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(jsonAdapterPresent,  context);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(jsonAdapterPresent,  context);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
732	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(field,  jsonAdapterPresent,  context);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(field,  jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(field,  jsonAdapterPresent,  context);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
733	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  mapped);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  mapped);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getAdapter(fieldType,    mapped);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
734	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  jsonAdapterPresent,  constructorConstructor);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(annotation,  fieldType,  jsonAdapterPresent,  constructorConstructor);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(annotation,  fieldType,  jsonAdapterPresent,  constructorConstructor);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	39	None	replace
735	[BUG]  [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  mapped.getAdapter(fieldType);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent  ==  null)mapped  =  mapped.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent  ==  null)mapped  =  mapped.getAdapter(fieldType);	  if    (jsonAdapterPresent    ==    null)mapped    =    fieldType.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	70	None	replace
736	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(context,  jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(context,  jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(context,  jsonAdapterPresent,  fieldType);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
737	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(context,  fieldType,  jsonAdapterPresent,  context);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(context,  fieldType,  jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  mapped.getTypeAdapter(context,  fieldType,  jsonAdapterPresent,  context);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
738	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(context,  jsonAdapterPresent,  fieldType);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(context,  jsonAdapterPresent,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(context,  jsonAdapterPresent,  fieldType);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
739	[BUG]  [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(context,  jsonAdapterPresent,  context);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(context,  jsonAdapterPresent,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(context,  jsonAdapterPresent,  context);	  if    (mapped!=    null)mapped    =    field.getTypeAdapter(context,    jsonAdapterPresent,    context);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
740	[BUG]  [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(context);  [CE]  incomparable  types:  boolean  and  <null>  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (jsonAdapterPresent!=  null)mapped  =  mapped.getAdapter(context);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	55	None	replace
741	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(jsonAdapterPresent,    context,    fieldType,    constructorConstructor);    	non-compiled	[CE]  ')'  expected	50	None	replace
742	[BUG]  [BUGGY]  if  (mapped!=  null  ||  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  ||  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  ||  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(jsonAdapterPresent,    context,    fieldType,    constructorConstructor);    	non-compiled	[CE]  ')'  expected	50	None	replace
743	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	44	None	replace
744	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(fieldType,  fieldType,  constructorConstructor,  jsonAdapterPresent,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(fieldType,  fieldType,  constructorConstructor,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(fieldType,  fieldType,  constructorConstructor,  jsonAdapterPresent,  deserialize);	  if    (mapped!=    null)mapped    =    getTypeAdapter(fieldType,    context,    constructorConstructor,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	72	None	replace
745	[BUG]  [BUGGY]  if(fieldType!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(fieldType!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent))  {  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(fieldType!=  null  &&  mapped.getAdapter(fieldType).getAdapter(jsonAdapterPresent))  {	  if    (mapped!=    null    &&    jsonAdapterPresent.getAdapter(fieldType).getAdapter(jsonAdapterPresent);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
746	[BUG]  [BUGGY]  if(mapped  ==  null)mapped  =  mapped.getTypeAdapter(fieldType,  context);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  ==  null)mapped  =  mapped.getTypeAdapter(fieldType,  context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  ==  null)mapped  =  mapped.getTypeAdapter(fieldType,  context);	  if(mapped    ==    null)mapped    =    jsonAdapterPresent.getTypeAdapter(fieldType,    context);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
747	[BUG]  [BUGGY]  if  (mapped  ==  null)mapped  =  fieldType.getAdapter(context);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped  ==  null)mapped  =  fieldType.getAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped  ==  null)mapped  =  fieldType.getAdapter(context);	  if    (jsonAdapterPresent    ==    null)mapped    =    fieldType.getAdapter(context);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
748	[BUG]  [BUGGY]  if  (mapped  ==  null)mapped  =  field.getAdapter(context);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped  ==  null)mapped  =  field.getAdapter(context);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped  ==  null)mapped  =  field.getAdapter(context);	  if    (jsonAdapterPresent    ==    null)mapped    =    fieldType.getAdapter(context);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
749	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!serialize  &&  isPrimitive)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	add	if(!serialize  &&  isPrimitive)mapped  =  context.getAdapter(fieldType);	  if(isPrimitive)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	82	4	replace
750	[BUG]  [BUGGY]  if(!serialize  &&  isPrimitive)mapped  =  context.getAdapter(fieldType);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!serialize  &&  isPrimitive)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!serialize  &&  isPrimitive)mapped  =  context.getAdapter(fieldType);	  if(isPrimitive)mapped    =    context.getAdapter(fieldType);    	compilable	  [FE]  NullPointerException  	82	4	replace
751	[BUG]  [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  jsonAdapterPresent)mapped  =  context.getTypeAdapter(jsonAdapterPresent);	  if(mapped!=    null)mapped    =    context.getTypeAdapter(jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
752	[BUG]  [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent.getTypeAdapter(context).getTypeAdapter(jsonAdapterPresent);  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent.getTypeAdapter(context).getTypeAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  jsonAdapterPresent.getTypeAdapter(context).getTypeAdapter(jsonAdapterPresent);	  if(mapped!=    null)mapped    =    context.getTypeAdapter(jsonAdapterPresent);    	non-compiled	[CE]  ')'  expected	38	None	replace
753	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  jsonAdapterPresent);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  annotation,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    getTypeAdapter(annotation,    context,    fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	52	None	replace
754	[BUG]  [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(!isPrimitive)mapped    =    context.getAdapter(fieldType);    if(!isPrimitive)mapped  =  context.getAdapter(fieldType);  }	  	non-compiled	[CE]  illegal  start  of  type	97	None	add
755	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(constructorFactory,  context,  fieldType,  deserialize);  [CE]  cannot  find  symbol  constructorFactory  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(constructorFactory,  context,  fieldType,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(constructorFactory,  context,  fieldType,  deserialize);	          mapped    =    getTypeAdapter(jsonAdapterPresent,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructorFactory	68	None	replace
756	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  jsonAdapterPresent.getTypeAdapter(fieldType,  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  jsonAdapterPresent.getTypeAdapter(fieldType,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  jsonAdapterPresent.getTypeAdapter(fieldType,  fieldType);	  if(mapped!=    null)mapped    =    field.getTypeAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	106	None	replace
757	[BUG]  [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  jsonAdapterPresent)mapped  =  field.getTypeAdapter(fieldType,  jsonAdapterPresent);	  if(mapped!=    null)mapped    =    field.getTypeAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
758	[BUG]  [BUGGY]  if(mapped!=  null)mapped  =  field.getTypeAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null)mapped  =  field.getTypeAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null)mapped  =  field.getTypeAdapter(fieldType,  jsonAdapterPresent,  isPrimitive);	  if(mapped!=    null)mapped    =    field.getTypeAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
759	[BUG]  [BUGGY]  mapped  =  mapped.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  mapped.getAnnotation(JsonAdapter.class);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  mapped.getAnnotation(JsonAdapter.class);	          mapped    =    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
760	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  mapped);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  mapped);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  mapped);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	83	None	replace
761	[BUG]  [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  annotation);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  annotation);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent)mapped  =  getTypeAdapter(constructorConstructor,  fieldType,  mapped,  annotation);	  if(jsonAdapterPresent)mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    mapped);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	83	None	replace
762	[BUG]  [BUGGY]  mapped  =  getTypeAdapter(jsonAdapter,  fieldType,  jsonAdapterPresent,  deserialize);  [CE]  cannot  find  symbol  jsonAdapter  [FE]        NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  mapped  =  getTypeAdapter(jsonAdapter,  fieldType,  jsonAdapterPresent,  deserialize);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	mapped  =  getTypeAdapter(jsonAdapter,  fieldType,  jsonAdapterPresent,  deserialize);	  mapped    =    getTypeAdapter(constructorConstructor,    fieldType,    jsonAdapterPresent,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	108	None	replace
763	[BUG]  [BUGGY]  if(mapped  =  fieldType.getAdapter(jsonAdapterPresent)).getAdapter(fieldType);  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped  =  fieldType.getAdapter(jsonAdapterPresent)).getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped  =  fieldType.getAdapter(jsonAdapterPresent)).getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    mapped.getAdapter(fieldType);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
764	[BUG]  [BUGGY]  if(mapped)mapped  =  field.getAdapter(jsonAdapterPresent);  [CE]  incompatible  types  [FE]                    NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped)mapped  =  field.getAdapter(jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped)mapped  =  field.getAdapter(jsonAdapterPresent);	  if(jsonAdapterPresent)mapped    =    mapped.getAdapter(fieldType);    	non-compiled	[CE]  incompatible  types	36	None	replace
765	[BUG]  [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  isPrimitive);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null)mapped  =  fieldType.getAdapter(jsonAdapterPresent,  isPrimitive);	  if    (jsonAdapterPresent!=    null)mapped    =    context.getAdapter(fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
766	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)mapped  =  context.getAdapter(fieldType);  if(mapped  ==  null)mapped  =  context.getAdapter(fieldType);  }	  if(mapped!=    null)mapped    =    context.getAdapter(fieldType);    if(mapped    ==    null)mapped    =    context.getAdapter(fieldType);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
767	[BUG]  [BUGGY]  if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(fieldType.getAdapter(jsonAdapterPresent)mapped  =  context.getAdapter(fieldType);	  if(jsonAdapterPresent)mapped    =    context.getAdapter(fieldType);    if(jsonAdapterPresent)mapped    =    field.getAdapter(fieldType);    	non-compiled	[CE]  ')'  expected	66	None	replace
768	[BUG]  [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  context,  fieldType,  deserialize);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  context,  fieldType,  deserialize);  }  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(jsonAdapterPresent!=  null)  {  mapped  =  mapped.getTypeAdapter(constructorConstructor,  context,  fieldType,  deserialize);  }	  if    (mapped!=    null    &&    fieldType.getTypeAdapter(fieldType);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	113	None	replace
769	[BUG]  [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType,  jsonAdapterPresent))  mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if  (mapped!=  null  &&  mapped.contains(fieldType,  jsonAdapterPresent))  mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if  (mapped!=  null  &&  mapped.contains(fieldType,  jsonAdapterPresent))  mapped  =  context.getAdapter(fieldType,  jsonAdapterPresent);	  if    (mapped!=    null)mapped    =    context.getAdapter(fieldType,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
770	[BUG]  [BUGGY]  if(mapped!=  null  &&  mapped.getTypeAdapter(context,  fieldType);  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped.getTypeAdapter(context,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  mapped.getTypeAdapter(context,  fieldType);	  if    (mapped!=    null    &&    jsonAdapterPresent.getTypeAdapter(context,    fieldType);    	non-compiled	[CE]  ')'  expected	114	None	replace
771	[BUG]  [BUGGY]  if(fieldType!=  null  &&  mapped.getTypeAdapter(context,  fieldType);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(fieldType!=  null  &&  mapped.getTypeAdapter(context,  fieldType);  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(fieldType!=  null  &&  mapped.getTypeAdapter(context,  fieldType);	  if    (mapped!=    null    &&    jsonAdapterPresent.getTypeAdapter(context,    fieldType);    	non-compiled	[CE]  ')'  expected	114	None	replace
772	[BUG]  [BUGGY]  if(mapped!=  null  &&  mapped.getTypeAdapter(context,  fieldType));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;      [BUGGY]  if(mapped!=  null  &&  mapped.getTypeAdapter(context,  fieldType));  [BUGGY]        final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  @Override  void  write(JsonWriter  writer,  Object  value)  throws  IOException,  IllegalAccessException  {  Object  fieldValue  =  field.get(value);  TypeAdapter  t  =  new  TypeAdapterRuntimeTypeWrapper(context,  typeAdapter,  fieldType.getType());  t.write(writer,  fieldValue);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	114	114	1	replace	if(mapped!=  null  &&  mapped.getTypeAdapter(context,  fieldType));	  if    (mapped!=    null    &&    jsonAdapterPresent.getTypeAdapter(context,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
