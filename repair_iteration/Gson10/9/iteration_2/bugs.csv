bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName,  f.type);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName,  f.type);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName,  f.type);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	4	None	replace
2	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  f.type);  [CE]  type  has  private  access  in  Field  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  f.type);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  f.type);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.type);    	non-compiled	[CE]  type  has  private  access  in  Field	4	None	replace
3	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize,  f.type);  [CE]  cannot  find  symbol  serialize  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize,  f.type);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize,  f.type);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.type);    	non-compiled	[CE]  cannot  find  symbol  serialize	4	None	replace
4	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName.type);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName.type);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName.type);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	4	None	replace
5	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.type,  serialize);  [CE]  type  has  private  access  in  Field  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.type,  serialize);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.type,  serialize);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.type);    	non-compiled	[CE]  type  has  private  access  in  Field	4	None	replace
6	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.type,  serializedName);  [CE]  type  has  private  access  in  Field  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.type,  serializedName);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.type,  serializedName);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.type);    	non-compiled	[CE]  type  has  private  access  in  Field	4	None	replace
7	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  name);  [CE]  cannot  find  symbol  name  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  name);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  name);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  name	1	None	replace
8	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  f);  [CE]  cannot  find  symbol  serializedName  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  f);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  f);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	1	None	replace
9	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  deserializedName);  [CE]  cannot  find  symbol  deserializedName  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  deserializedName);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  deserializedName);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  deserializedName	1	None	replace
10	[BUG]  [BUGGY]  SerializedName  annotation  =  serialize.getAnnotation(SerializedName.class,  f);  [CE]  cannot  find  symbol  serialize  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serialize.getAnnotation(SerializedName.class,  f);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serialize.getAnnotation(SerializedName.class,  f);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serialize	1	None	replace
11	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  $anonymous1);  [CE]  cannot  find  symbol  $anonymous1  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  $anonymous1);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  $anonymous1);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  $anonymous1	1	None	replace
12	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName,  null);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName,  null);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName,  null);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  cannot  find  symbol  serializedName	5	None	replace
13	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  serializedName);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  serializedName);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  cannot  find  symbol  serializedName	5	None	replace
14	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize,  null);  [CE]  cannot  find  symbol  serialize  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize,  null);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize,  null);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  cannot  find  symbol  serialize	5	None	replace
15	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(serializedName,  f.class,  null);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(serializedName,  f.class,  null);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(serializedName,  f.class,  null);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  cannot  find  symbol  serializedName	5	None	replace
16	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  null);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  null);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  null);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  cannot  find  symbol  serializedName	5	None	replace
17	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  serialize);  [CE]  cannot  find  symbol  serialize  [FE]                          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  serialize);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  serialize);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  cannot  find  symbol  serialize	5	None	replace
18	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(FieldNamingStrategy.class);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(FieldNamingStrategy.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(FieldNamingStrategy.class);	  SerializedName    annotation    =    f.getAnnotation(FieldNamingStrategy.class);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
19	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f.getAnnotation(FieldNamingStrategy.class);  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f.getAnnotation(FieldNamingStrategy.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f.getAnnotation(FieldNamingStrategy.class);	  SerializedName    annotation    =    f.getAnnotation(FieldNamingStrategy.class);    	non-compiled	[CE]  ')'  expected	10	None	replace
20	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  FieldNamingStrategy.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  FieldNamingStrategy.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  FieldNamingStrategy.class);	  SerializedName    annotation    =    f.getAnnotation(FieldNamingStrategy.class);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
21	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f.getAnnotation(FieldNamingStrategy.class));  [CE]  no  suitable  method  found  for  getAnnotation(Class<FieldNamingStrategy>)  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f.getAnnotation(FieldNamingStrategy.class));  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f.getAnnotation(FieldNamingStrategy.class));	  SerializedName    annotation    =    f.getAnnotation(FieldNamingStrategy.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<FieldNamingStrategy>)	10	None	replace
22	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(FieldNamingStrategy.class,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(FieldNamingStrategy.class,  serializedName);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(FieldNamingStrategy.class,  serializedName);	  SerializedName    annotation    =    f.getAnnotation(FieldNamingStrategy.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	10	None	replace
23	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(FunctionNamingStrategy.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(FunctionNamingStrategy.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(FunctionNamingStrategy.class);	  SerializedName    annotation    =    f.getAnnotation(FieldNamingStrategy.class);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
24	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName.name());  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName.name());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName.name());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name());    	non-compiled	[CE]  cannot  find  symbol  serializedName	11	None	replace
25	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  f.name());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  f.name());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  f.name());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
26	[BUG]  [BUGGY]  SerializedName  annotation  =  serialized.getAnnotation(SerializedName.class,  f.name());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serialized.getAnnotation(SerializedName.class,  f.name());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serialized.getAnnotation(SerializedName.class,  f.name());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
27	[BUG]  [BUGGY]  SerializedName  annotation  =  serialize.getAnnotation(SerializedName.class,  f.name());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serialize.getAnnotation(SerializedName.class,  f.name());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serialize.getAnnotation(SerializedName.class,  f.name());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
28	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedFactory.getAnnotation(SerializedName.class,  f.name());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializedFactory.getAnnotation(SerializedName.class,  f.name());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializedFactory.getAnnotation(SerializedName.class,  f.name());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
29	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize.name());  [CE]  cannot  find  symbol  serialize  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize.name());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize.name());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name());    	non-compiled	[CE]  cannot  find  symbol  serialize	11	None	replace
30	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedField.getAnnotation(SerializedName.class,  f.name());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializedField.getAnnotation(SerializedName.class,  f.name());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializedField.getAnnotation(SerializedName.class,  f.name());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
31	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(f.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(f.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializedName.getAnnotation(f.class);	  SerializedName    annotation    =    f.getAnnotation(serializedName.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
32	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(serializedName,  f.class);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(serializedName,  f.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(serializedName,  f.class);	  SerializedName    annotation    =    f.getAnnotation(serializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	6	None	replace
33	[BUG]  [BUGGY]  SerializedName  annotation  =  serialized.getAnnotation(f.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serialized.getAnnotation(f.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serialized.getAnnotation(f.class);	  SerializedName    annotation    =    f.getAnnotation(serializedName.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
34	[BUG]  [BUGGY]  SerializedName  annotation  =  serialize.getAnnotation(f.class);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serialize.getAnnotation(f.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serialize.getAnnotation(f.class);	  SerializedName    annotation    =    f.getAnnotation(serializedName.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
35	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(serializedName.class);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(serializedName.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  serializedName  =  f.getAnnotation(serializedName.class);	  SerializedName    annotation    =    f.getAnnotation(serializedName.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
36	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedFactory.getAnnotation(f.class);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializedFactory.getAnnotation(f.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializedFactory.getAnnotation(f.class);	  SerializedName    annotation    =    f.getAnnotation(serializedName.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
37	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(serializedName,  f.class);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(serializedName,  f.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  serializedName  =  f.getAnnotation(serializedName,  f.class);	  SerializedName    annotation    =    f.getAnnotation(serializedName.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
38	[BUG]  [BUGGY]  SerializedName  annotation  =  serialized.getAnnotation(SerializedName.class,  f);  [CE]  cannot  find  symbol  serialized  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serialized.getAnnotation(SerializedName.class,  f);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serialized.getAnnotation(SerializedName.class,  f);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    serialize);    	non-compiled	[CE]  cannot  find  symbol  serialized	3	None	replace
39	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
40	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName,  f.class);  [CE]  cannot  find  symbol  SerializedName  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName,  f.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName,  f.class);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  SerializedName	8	None	replace
41	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class);  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	8	None	replace
42	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  serializedName);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	8	None	replace
43	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(serializedName,  f.class);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(serializedName,  f.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(serializedName,  f.class);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	8	None	replace
44	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName,  f);  [CE]  cannot  find  symbol  serializedName  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName,  f);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName,  f);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f);    	non-compiled	[CE]  cannot  find  symbol  serializedName	14	None	replace
45	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize,  f);  [CE]  cannot  find  symbol  serialize  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize,  f);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize,  f);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f);    	non-compiled	[CE]  cannot  find  symbol  serialize	14	None	replace
46	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(serializedName.class,  f);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(serializedName.class,  f);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(serializedName.class,  f);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
47	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName,  f.name);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName,  f.name);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName,  f.name);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	12	None	replace
48	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  f.name);  [CE]  name  has  private  access  in  Field  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  f.name);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  f.name);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	12	None	replace
49	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize,  f.name);  [CE]  cannot  find  symbol  serialize  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize,  f.name);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize,  f.name);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  cannot  find  symbol  serialize	12	None	replace
50	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f.name);  [CE]  name  has  private  access  in  Field  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f.name);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f.name);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	12	None	replace
51	[BUG]  [BUGGY]  SerializedName  annotation  =  serialize.getAnnotation(SerializedName.class,  f.name);  [CE]  name  has  private  access  in  Field  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serialize.getAnnotation(SerializedName.class,  f.name);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serialize.getAnnotation(SerializedName.class,  f.name);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	12	None	replace
52	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(serializedName.class,  f.name);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(serializedName.class,  f.name);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(serializedName.class,  f.name);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
53	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName.value());  [CE]  cannot  find  symbol  serializedName  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName.value());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serializedName.value());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.value());    	non-compiled	[CE]  cannot  find  symbol  serializedName	9	None	replace
54	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  f.value());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  f.value());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializedName.getAnnotation(SerializedName.class,  f.value());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.value());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
55	[BUG]  [BUGGY]  SerializedName  annotation  =  serialized.getAnnotation(SerializedName.class,  f.value());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serialized.getAnnotation(SerializedName.class,  f.value());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serialized.getAnnotation(SerializedName.class,  f.value());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.value());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
56	[BUG]  [BUGGY]  SerializedName  annotation  =  serialize.getAnnotation(SerializedName.class,  f.value());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serialize.getAnnotation(SerializedName.class,  f.value());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serialize.getAnnotation(SerializedName.class,  f.value());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.value());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
57	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedFactory.getAnnotation(SerializedName.class,  f.value());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializedFactory.getAnnotation(SerializedName.class,  f.value());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializedFactory.getAnnotation(SerializedName.class,  f.value());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.value());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
58	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize.value());  [CE]  cannot  find  symbol  serialize  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize.value());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  serialize.value());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.value());    	non-compiled	[CE]  cannot  find  symbol  serialize	9	None	replace
59	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy();  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
60	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getRawClass();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getRawClass();  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getRawClass();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
61	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy();  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
62	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy();  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
63	[BUG]  [BUGGY]  FieldNamingStrategy  constructor  =  f.getConstructor();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  FieldNamingStrategy  constructor  =  f.getConstructor();  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	FieldNamingStrategy  constructor  =  f.getConstructor();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
64	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getDeclaredFields();  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getDeclaredFields();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
65	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getDeclaredFieldNames();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getDeclaredFieldNames();  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getDeclaredFieldNames();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
66	[BUG]  [BUGGY]  SerializedName  annotation  =  serialized.getAnnotation(Serializable.class);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serialized.getAnnotation(Serializable.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serialized.getAnnotation(Serializable.class);	  SerializedName    annotation    =    f.getAnnotation(Serializable.class);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
67	[BUG]  [BUGGY]  SerializedName  annotation  =  serialize.getAnnotation(Serializable.class);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serialize.getAnnotation(Serializable.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serialize.getAnnotation(Serializable.class);	  SerializedName    annotation    =    f.getAnnotation(Serializable.class);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
68	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(Serializable.class,  serializedName);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(Serializable.class,  serializedName);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(Serializable.class,  serializedName);	  SerializedName    annotation    =    f.getAnnotation(Serializable.class);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
69	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedFactory.getAnnotation(Serializable.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializedFactory.getAnnotation(Serializable.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializedFactory.getAnnotation(Serializable.class);	  SerializedName    annotation    =    f.getAnnotation(Serializable.class);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
70	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(Serializable.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(Serializable.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(Serializable.class);	  SerializedName    annotation    =    f.getAnnotation(Serializable.class);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
71	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedFunction.getAnnotation(Serializable.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializedFunction.getAnnotation(Serializable.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializedFunction.getAnnotation(Serializable.class);	  SerializedName    annotation    =    f.getAnnotation(Serializable.class);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
72	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  f.class);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  f.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  f.class);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(f.class);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
73	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(fieldNamingPolicy.class);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(fieldNamingPolicy.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(fieldNamingPolicy.class);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(f.class);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
74	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(f.class);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
75	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  this.fieldNamingStrategy.class);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  this.fieldNamingStrategy.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  this.fieldNamingStrategy.class);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(f.class);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
76	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  this.class);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  this.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  this.class);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(f.class);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
77	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  serializedName);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  serializedName);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(f.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	13	None	replace
78	[BUG]  [BUGGY]  SerializedName  annotation  =  this.fieldNamingPolicy.getAnnotation(f.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  this.fieldNamingPolicy.getAnnotation(f.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  this.fieldNamingPolicy.getAnnotation(f.class);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(f.class);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
79	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  f.value);  [CE]  name  has  private  access  in  Field  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  f.value);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  f.value);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	12	None	replace
80	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  f.type);  [CE]  name  has  private  access  in  Field  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  f.type);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  f.type);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	12	None	replace
81	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  f.value());  [CE]  name  has  private  access  in  Field  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  f.value());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  f.value());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	12	None	replace
82	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  serialize);  [CE]  name  has  private  access  in  Field  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  serialize);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  serialize);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	12	None	replace
83	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.value);  [CE]  cannot  find  symbol  value  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.value);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.value);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  cannot  find  symbol  value	12	None	replace
84	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  ObjectConstructor.class);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  ObjectConstructor.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  ObjectConstructor.class);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(f.class);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
85	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  _class);  [CE]  cannot  find  symbol  _class  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  _class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  _class);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(f.class);    	non-compiled	[CE]  cannot  find  symbol  _class	13	None	replace
86	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f.value());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f.value());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f.value());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.value());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
87	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(serializedName);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(serializedName);	  SerializedName    annotation    =    f.getAnnotation(serializedName.class);    	non-compiled	[CE]  cannot  find  symbol  serializedName	6	None	replace
88	[BUG]  [BUGGY]  SerializedName  annotation  =  scope.getAnnotation(serializedName.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  scope.getAnnotation(serializedName.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  scope.getAnnotation(serializedName.class);	  SerializedName    annotation    =    f.getAnnotation(serializedName.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
89	[BUG]  [BUGGY]  List  <  String>  fieldNames  =  f.getFieldNames();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  List  <  String>  fieldNames  =  f.getFieldNames();  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	List  <  String>  fieldNames  =  f.getFieldNames();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
90	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getConstructor(f);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getConstructor(f);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	ObjectConstructor  constructor  =  fieldNamingPolicy.getConstructor(f);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
91	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(f);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(f);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(f);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
92	[BUG]  [BUGGY]  SerializedName  annotation  =  this.fieldNamingPolicy.getAnnotation(Serializable.class);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  this.fieldNamingPolicy.getAnnotation(Serializable.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  this.fieldNamingPolicy.getAnnotation(Serializable.class);	  SerializedName    annotation    =    f.getAnnotation(Serializable.class);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
93	[BUG]  [BUGGY]  SerializedName  annotation  =  typeFactory.getAnnotation(Serializable.class);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  typeFactory.getAnnotation(Serializable.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  typeFactory.getAnnotation(Serializable.class);	  SerializedName    annotation    =    f.getAnnotation(Serializable.class);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
94	[BUG]  [BUGGY]  SerializedName  annotation  =  Serializable.getAnnotation(f.class);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  Serializable.getAnnotation(f.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  Serializable.getAnnotation(f.class);	  SerializedName    annotation    =    f.getAnnotation(Serializable.class);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
95	[BUG]  [BUGGY]  SerializedName  annotation  =  scope.getAnnotation(Serializable.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  scope.getAnnotation(Serializable.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  scope.getAnnotation(Serializable.class);	  SerializedName    annotation    =    f.getAnnotation(Serializable.class);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
96	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f,  fieldNamingPolicy);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Field,FieldNamingStrategy)  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f,  fieldNamingPolicy);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f,  fieldNamingPolicy);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,Field,FieldNamingStrategy)	14	None	replace
97	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f,  name);  [CE]  cannot  find  symbol  name  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f,  name);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f,  name);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f);    	non-compiled	[CE]  cannot  find  symbol  name	14	None	replace
98	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f,  serialize);  [CE]  cannot  find  symbol  serialize  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f,  serialize);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f,  serialize);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f);    	non-compiled	[CE]  cannot  find  symbol  serialize	14	None	replace
99	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f,  serializedName);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f,  serializedName);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f);    	non-compiled	[CE]  cannot  find  symbol  serializedName	14	None	replace
100	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  f.type);  [CE]  type  has  private  access  in  Field  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  f.type);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  f.type);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  type  has  private  access  in  Field	5	None	replace
101	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  f.value());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  f.value());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  f.value());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
102	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  fieldNamingPolicy);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>,FieldNamingStrategy)  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  fieldNamingPolicy);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  fieldNamingPolicy);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,<null>,FieldNamingStrategy)	5	None	replace
103	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  null);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  null);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  null);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
104	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(serializedName.class);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(serializedName.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(serializedName.class);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
105	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  f);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  f);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class),  f);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(SerializedName.class);    	non-compiled	[CE]  ';'  expected	8	None	replace
106	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f.type);  [CE]  type  has  private  access  in  Field  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f.type);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f.type);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.type);    	non-compiled	[CE]  type  has  private  access  in  Field	4	None	replace
107	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.type,  f.value());  [CE]  type  has  private  access  in  Field  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.type,  f.value());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.type,  f.value());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.type);    	non-compiled	[CE]  type  has  private  access  in  Field	4	None	replace
108	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  alternates);  [CE]  cannot  find  symbol  alternates  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  alternates);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  alternates);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  alternates	1	None	replace
109	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  this.serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  this.serializedName);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  this.serializedName);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  serializedName	1	None	replace
110	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  false);  [CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,boolean)  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  false);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  false);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    serialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<SerializedName>,boolean)	3	None	replace
111	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  deserialize);  [CE]  cannot  find  symbol  deserialize  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  deserialize);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  deserialize);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    serialize);    	non-compiled	[CE]  cannot  find  symbol  deserialize	3	None	replace
112	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f.name());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f.name());  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(SerializedName.class,  f.name());	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
113	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(FieldNamingStrategy.class,  fieldNamingPolicy);  [CE]  no  suitable  method  found  for  getAnnotation(Class<FieldNamingStrategy>,FieldNamingStrategy)  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(FieldNamingStrategy.class,  fieldNamingPolicy);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(FieldNamingStrategy.class,  fieldNamingPolicy);	  SerializedName    annotation    =    f.getAnnotation(FieldNamingStrategy.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<FieldNamingStrategy>,FieldNamingStrategy)	10	None	replace
114	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(Factory.class);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(Factory.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(Factory.class);	  SerializedName    annotation    =    f.getAnnotation(FieldNamingStrategy.class);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
115	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(FieldNamingStrategy.class,  f.type);  [CE]  type  has  private  access  in  Field  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(FieldNamingStrategy.class,  f.type);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(FieldNamingStrategy.class,  f.type);	  SerializedName    annotation    =    f.getAnnotation(FieldNamingStrategy.class);    	non-compiled	[CE]  type  has  private  access  in  Field	10	None	replace
116	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(FieldNamingStrategy.class,  f.name);  [CE]  name  has  private  access  in  Field  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(FieldNamingStrategy.class,  f.name);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(FieldNamingStrategy.class,  f.name);	  SerializedName    annotation    =    f.getAnnotation(FieldNamingStrategy.class);    	non-compiled	[CE]  name  has  private  access  in  Field	10	None	replace
117	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor();  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	ObjectConstructor  constructor  =  f.getConstructor();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
118	[BUG]  [BUGGY]  List  <  String>  annotation  =  fieldNamingPolicy.getFieldNames(f);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  List  <  String>  annotation  =  fieldNamingPolicy.getFieldNames(f);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	List  <  String>  annotation  =  fieldNamingPolicy.getFieldNames(f);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
119	[BUG]  [BUGGY]  Collections.  <  String>  boundFields  =  f.getCollection();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  Collections.  <  String>  boundFields  =  f.getCollection();  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	Collections.  <  String>  boundFields  =  f.getCollection();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
120	[BUG]  [BUGGY]  FieldNamingStrategy  annotation  =  fieldNamingPolicy.getAnnotation(f);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  FieldNamingStrategy  annotation  =  fieldNamingPolicy.getAnnotation(f);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	FieldNamingStrategy  annotation  =  fieldNamingPolicy.getAnnotation(f);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
121	[BUG]  [BUGGY]  FieldNamingStrategy  annotation  =  f.getAnnotation(Constructor.class);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  FieldNamingStrategy  annotation  =  f.getAnnotation(Constructor.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	FieldNamingStrategy  annotation  =  f.getAnnotation(Constructor.class);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
122	[BUG]  [BUGGY]  List  <  String>  annotation  =  f.getAnnotation(Constructor.class);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  List  <  String>  annotation  =  f.getAnnotation(Constructor.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	List  <  String>  annotation  =  f.getAnnotation(Constructor.class);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
123	[BUG]  [BUGGY]  FieldNamingStrategy  annotation  =  f.getAnnotation(JsonString.class);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  FieldNamingStrategy  annotation  =  f.getAnnotation(JsonString.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	FieldNamingStrategy  annotation  =  f.getAnnotation(JsonString.class);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
124	[BUG]  [BUGGY]  SerializedName  annotation  =  serializedNames.getAnnotation(f.class);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializedNames.getAnnotation(f.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializedNames.getAnnotation(f.class);	  SerializedName    annotation    =    f.getAnnotation(serializedName.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
125	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f,  deserialized);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f,  deserialized);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f);    	non-compiled	[CE]  cannot  find  symbol  deserialized	14	None	replace
126	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  this.fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  this.fieldNamingStrategy);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  this.fieldNamingStrategy);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(f.class);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	13	None	replace
127	[BUG]  [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  _objectConstructor.class);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  _objectConstructor.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  fieldNamingPolicy.getAnnotation(f,  _objectConstructor.class);	  SerializedName    annotation    =    fieldNamingPolicy.getAnnotation(f.class);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
128	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  deserialized);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  deserialized);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    serialize);    	non-compiled	[CE]  cannot  find  symbol  deserialized	3	None	replace
129	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  serializedName);  [CE]  name  has  private  access  in  Field  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  serializedName);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  serializedName);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	12	None	replace
130	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  alternates);  [CE]  name  has  private  access  in  Field  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  alternates);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.name,  alternates);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    f.name);    	non-compiled	[CE]  name  has  private  access  in  Field	12	None	replace
131	[BUG]  [BUGGY]  SerializedName  annotation  =  serializer.getAnnotation(Serializable.class);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  serializer.getAnnotation(Serializable.class);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  serializer.getAnnotation(Serializable.class);	  SerializedName    annotation    =    f.getAnnotation(Serializable.class);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
132	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  alternate);  [CE]  cannot  find  symbol  alternate  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  alternate);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  alternate);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    serializedName);    	non-compiled	[CE]  cannot  find  symbol  alternate	1	None	replace
133	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  alternates);  [CE]  cannot  find  symbol  alternates  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  alternates);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  null,  alternates);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  cannot  find  symbol  alternates	5	None	replace
134	[BUG]  [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.type,  null);  [CE]  type  has  private  access  in  Field  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {    [BUGGY]  SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.type,  null);  [BUGGY]    if  (annotation  ==  null)  {  String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	72	72	1	replace	SerializedName  annotation  =  f.getAnnotation(SerializedName.class,  f.type,  null);	  SerializedName    annotation    =    f.getAnnotation(SerializedName.class,    null);    	non-compiled	[CE]  type  has  private  access  in  Field	5	None	replace
