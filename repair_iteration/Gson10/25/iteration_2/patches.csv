bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	3	None	add
2	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  Collection  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  Collection  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    Collection  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
3	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	3	None	add
4	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  final  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  final  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    final  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	3	None	add
5	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  List  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]            StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  List  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    List  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);	  	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	3	None	add
6	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  Set  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  [CE]  cannot  find  symbol  [FE]              StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  Set  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    Set  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
7	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  field);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  field);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	3	None	add
8	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  Raw);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  Raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  Raw);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	3	None	add
9	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type,  raw);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type,  raw);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(type);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	19	None	replace
10	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedList  <  String,  BoundField>(type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedList  <  String,  BoundField>(type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedList  <  String,  BoundField>(type);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
11	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type,  fieldNames);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(type);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	19	None	replace
12	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames,  type);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames,  type);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	41	None	replace
13	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames,  raw);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames,  raw);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	41	None	replace
14	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames,  fieldType);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames,  fieldType);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames,  fieldType);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	41	None	replace
15	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	41	None	replace
16	[BUG]  [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	41	None	replace
17	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames,  null);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames,  null);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames,  null);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	41	None	replace
18	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type,  raw);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type,  raw);	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
19	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.toString());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.toString());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.toString());	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
20	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context,  type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context,  type);	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
21	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context.getType());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context.getType());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context.getType());	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
22	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type);	  final    Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	31	None	replace
23	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields);	  final    Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	31	None	replace
24	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(raw);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(raw);	  final    Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	31	None	replace
25	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(0);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(0);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(0);	  final    Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	31	None	replace
26	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw,  type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw,  type);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
27	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  raw);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  raw);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
28	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw,  fieldNames);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
29	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(raw,  fieldNames);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(raw,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(raw,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(raw);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	32	None	replace
30	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(raw,  type);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(raw,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(raw,  type);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(raw);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	32	None	replace
31	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(field);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(field);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(raw);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	32	None	replace
32	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  fieldNames);	  Map    <    String,    BoundField>    result    =    getBounds(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	42	None	replace
33	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  field);  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  field);	  Map    <    String,    BoundField>    result    =    getBounds(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  field	42	None	replace
34	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  boundFields);  [CE]  cannot  find  symbol  boundFields  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  boundFields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  boundFields);	  Map    <    String,    BoundField>    result    =    getBounds(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  boundFields	42	None	replace
35	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  null);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  null);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  null);	  Map    <    String,    BoundField>    result    =    getBounds(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
36	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  jsonAdapter);  [CE]  cannot  find  symbol  jsonAdapter  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  jsonAdapter);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  jsonAdapter);	  Map    <    String,    BoundField>    result    =    getBounds(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	42	None	replace
37	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  fieldType);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  fieldType);	  Map    <    String,    BoundField>    result    =    getBounds(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  fieldType	42	None	replace
38	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  jsonAdapterPresent);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  jsonAdapterPresent);	  Map    <    String,    BoundField>    result    =    getBounds(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	42	None	replace
39	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames.length);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames.length);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames.length);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	17	None	replace
40	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedList  <  String,  BoundField>(fieldNames);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedList  <  String,  BoundField>(fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedList  <  String,  BoundField>(fieldNames);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
41	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames,  fieldType);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames,  fieldType);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames,  fieldType);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	17	None	replace
42	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames,  type);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames,  type);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	17	None	replace
43	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames,  raw);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames,  raw);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	17	None	replace
44	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames,  fieldNamingPolicy);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames,  fieldNamingPolicy);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames,  fieldNamingPolicy);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	17	None	replace
45	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedList  <  String,  BoundField>(raw);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedList  <  String,  BoundField>(raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedList  <  String,  BoundField>(raw);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
46	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw,  fieldNames);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(raw);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	46	None	replace
47	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(4);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(4);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(4);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(1);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	52	None	replace
48	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type.getName());  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type.getName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type.getName());	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(1);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	52	None	replace
49	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getName(),  raw);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getName(),  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getName(),  raw);	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
50	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context.getName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context.getName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context.getName());	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
51	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getName()  +  1);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getName()  +  1);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getName()  +  1);	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
52	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getSimpleName());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getSimpleName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getSimpleName());	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
53	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getName(),  field);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getName(),  field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getName(),  field);	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
54	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames,  type);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames,  type);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
55	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames,  raw);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames,  raw);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
56	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames,  fieldNamingPolicy);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames,  fieldNamingPolicy);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames,  fieldNamingPolicy);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
57	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames.values());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames.values());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames.values());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
58	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames,  fieldType);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames,  fieldType);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames,  fieldType);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
59	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames.keySet());  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames.keySet());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames.keySet());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
60	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  fields  =  field.getFields();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  fields  =  field.getFields();	  Field[]    fields    =    type.getFields();    	non-compiled	[CE]  cannot  find  symbol  field	5	None	replace
61	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  [CE]  cannot  find  symbol  result  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  fields  =  raw.getFields();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  fields  =  raw.getFields();	  Field[]    fields    =    type.getFields();    	non-compiled	[CE]  cannot  find  symbol  result	5	None	replace
62	[BUG]  [BUGGY]  Field[]  fields  =  jsonAdapterPresent.getFields();  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  fields  =  jsonAdapterPresent.getFields();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  fields  =  jsonAdapterPresent.getFields();	  Field[]    fields    =    type.getFields();    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	5	None	replace
63	[BUG]  [BUGGY]  Field[]  fields  =  _context.getFields();  [CE]  cannot  find  symbol  _context  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  fields  =  _context.getFields();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  fields  =  _context.getFields();	  Field[]    fields    =    type.getFields();    	non-compiled	[CE]  cannot  find  symbol  _context	5	None	replace
64	[BUG]  [BUGGY]  Field[]  fields  =  getFields(context,  type).getFields();  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  fields  =  getFields(context,  type).getFields();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  fields  =  getFields(context,  type).getFields();	  Field[]    fields    =    type.getFields();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
65	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(fields);  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(fields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(fields);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  fields	49	None	replace
66	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type.getName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type.getName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type.getName());	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
67	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type.names);  [CE]  cannot  find  symbol  names  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type.names);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type.names);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  names	49	None	replace
68	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(collection);  [CE]  cannot  find  symbol  collection  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(collection);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(collection);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  collection	49	None	replace
69	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(context,  type,  raw);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Gson,TypeToken<CAP#1>,Class<CAP#2>)  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(context,  type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(context,  type,  raw);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(type,    raw);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Gson,TypeToken<CAP#1>,Class<CAP#2>)	10	None	replace
70	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  raw,  fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  raw,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  raw,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(type,    raw);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	10	None	replace
71	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  raw,  boundFields);  [CE]  cannot  find  symbol  boundFields  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  raw,  boundFields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  raw,  boundFields);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(type,    raw);    	non-compiled	[CE]  cannot  find  symbol  boundFields	10	None	replace
72	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  raw,  field);  [CE]  cannot  find  symbol  field  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  raw,  field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  raw,  field);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(type,    raw);    	non-compiled	[CE]  cannot  find  symbol  field	10	None	replace
73	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(raw,  type);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(raw,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(raw,  type);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(type,    raw);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
74	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  raw,  fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  raw,  fieldType);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  raw,  fieldType);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(type,    raw);    	non-compiled	[CE]  cannot  find  symbol  fieldType	10	None	replace
75	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context,  fieldNames);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(context);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
76	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context,  field);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context,  field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context,  field);	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(context);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
77	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context,  raw);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context,  raw);	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(context);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
78	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(raw,  type);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(raw,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(raw,  type);	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
79	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(raw,  fieldNames);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(raw,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(raw,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
80	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw,  type);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw,  type);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
81	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  raw);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  raw);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
82	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type,  raw);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type,  raw);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
83	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw,  fieldNames);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
84	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
85	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type,  raw);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type,  raw);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
86	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  type);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
87	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.toString());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.toString());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.toString());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
88	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  field);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  field);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(context);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
89	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  fieldNames);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(context);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
90	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(type);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
91	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(context,  type);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Gson,TypeToken<CAP#1>)  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(context,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(context,  type);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(type);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Gson,TypeToken<CAP#1>)	9	None	replace
92	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	9	None	replace
93	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields,  type);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields,  type);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(fields);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	33	None	replace
94	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  Field,  BoundField>(fields);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  Field,  BoundField>(fields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  Field,  BoundField>(fields);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(fields);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	33	None	replace
95	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields,  fieldNames);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(fields);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	33	None	replace
96	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields,  raw);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields,  raw);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(fields);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	33	None	replace
97	[BUG]  [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(fields);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	33	None	replace
98	[BUG]  [BUGGY]  Field[]  fields  =  this.context.getFields();  [CE]  cannot  find  symbol  context  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  fields  =  this.context.getFields();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  fields  =  this.context.getFields();	  Field[]    fields    =    context.getFields();    	non-compiled	[CE]  cannot  find  symbol  context	1	None	replace
99	[BUG]  [BUGGY]  Field[]  fields  =  getFields(context,  type.getFields();  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  fields  =  getFields(context,  type.getFields();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  fields  =  getFields(context,  type.getFields();	  Field[]    fields    =    context.getFields();    	non-compiled	[CE]  ')'  expected	1	None	replace
100	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getName(),  raw);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getName(),  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getName(),  raw);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
101	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getName());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
102	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getName()  +  1);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getName()  +  1);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getName()  +  1);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
103	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.toName());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.toName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.toName());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
104	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getSimpleName());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getSimpleName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getSimpleName());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
105	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields,  type);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields,  type);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(fields);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	18	None	replace
106	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields,  fieldNames);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(fields);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	18	None	replace
107	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedList  <  String,  BoundField>(fields);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedList  <  String,  BoundField>(fields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedList  <  String,  BoundField>(fields);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(fields);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
108	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields,  raw);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields,  raw);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(fields);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	18	None	replace
109	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields,  raw.length);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields,  raw.length);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields,  raw.length);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(fields);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	18	None	replace
110	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields.length);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields.length);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields.length);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(fields);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	18	None	replace
111	[BUG]  [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type);	  Collection    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
112	[BUG]  [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context);	  Collection    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
113	[BUG]  [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw);	  Collection    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
114	[BUG]  [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>();	  Collection    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
115	[BUG]  [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context.getType());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context.getType());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context.getType());	  Collection    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
116	[BUG]  [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>();	  Collection    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
117	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  null);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Class<CAP#1>,<null>)  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  null);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  null);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    boundFields);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Class<CAP#1>,<null>)	15	None	replace
118	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  fields);  [CE]  cannot  find  symbol  fields  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  fields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  fields);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    boundFields);    	non-compiled	[CE]  cannot  find  symbol  fields	15	None	replace
119	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  false);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Class<CAP#1>,boolean)  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  false);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  false);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    boundFields);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Class<CAP#1>,boolean)	15	None	replace
120	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  current);  [CE]  cannot  find  symbol  current  [FE]                                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  current);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  current);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    boundFields);    	non-compiled	[CE]  cannot  find  symbol  current	15	None	replace
121	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  subtype);  [CE]  cannot  find  symbol  subtype  [FE]                                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  subtype);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  subtype);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    boundFields);    	non-compiled	[CE]  cannot  find  symbol  subtype	15	None	replace
122	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  type);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  type);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(context);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
123	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  field);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  field);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(context);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
124	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  fieldNames);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(context);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
125	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  scope);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  scope);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  scope);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(context);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
126	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	add	final  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>();	  final    Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>();    	compilable	  [FE]  ComparisonFailure  	23	1	replace
127	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>();  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>();	  final    Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>();    	compilable	  [FE]  ComparisonFailure  	23	1	replace
128	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type);	  final    Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
129	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getName());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getName());	  final    Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
130	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context);	  final    Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
131	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>();	  final    Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
132	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw);	  final    Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
133	[BUG]  [BUGGY]  java.util.Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  java.util.Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	java.util.Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();	  java.util.ArrayMap    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
134	[BUG]  [BUGGY]  ArrayMap  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  ArrayMap  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ArrayMap  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>();	  java.util.ArrayMap    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
135	[BUG]  [BUGGY]  java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context);	  java.util.ArrayMap    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
136	[BUG]  [BUGGY]  java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type);	  java.util.ArrayMap    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
137	[BUG]  [BUGGY]  java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(2);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(2);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(2);	  java.util.ArrayMap    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
138	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type,  raw);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type,  raw);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(type);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	29	None	replace
139	[BUG]  [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(type);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	29	None	replace
140	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type,  fieldNames);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(type);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	29	None	replace
141	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type,  boundFields);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type,  boundFields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type,  boundFields);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(type);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	29	None	replace
142	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>();  [CE]  Map  is  abstract;  cannot  be  instantiated  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>();	  final    Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  Map  is  abstract;  cannot  be  instantiated	38	None	replace
143	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context);	  final    Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
144	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type);	  final    Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
145	[BUG]  [BUGGY]  final  java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();	  final    Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
146	[BUG]  [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap(context);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap(context);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String>  boundFields  =  Collections.emptyMap(context);	  Collection    <    String>    boundFields    =    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
147	[BUG]  [BUGGY]  Collection  <  String>  boundFields  =  Collections.EMPTY_MAP;  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String>  boundFields  =  Collections.EMPTY_MAP;  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String>  boundFields  =  Collections.EMPTY_MAP;	  Collection    <    String>    boundFields    =    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
148	[BUG]  [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap(context,  fieldNames);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap(context,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String>  boundFields  =  Collections.emptyMap(context,  fieldNames);	  Collection    <    String>    boundFields    =    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
149	[BUG]  [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap(context,  type);  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap(context,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String>  boundFields  =  Collections.emptyMap(context,  type);	  Collection    <    String>    boundFields    =    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
150	[BUG]  [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap(raw);  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap(raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String>  boundFields  =  Collections.emptyMap(raw);	  Collection    <    String>    boundFields    =    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
151	[BUG]  [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap(type);  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap(type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String>  boundFields  =  Collections.emptyMap(type);	  Collection    <    String>    boundFields    =    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
152	[BUG]  [BUGGY]  List  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  List  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	List  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>();	  ArrayList    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	30	None	replace
153	[BUG]  [BUGGY]  Collection  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>();	  ArrayList    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
154	[BUG]  [BUGGY]  Set  <  String,  BoundField>  result  =  new  HashSet  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Set  <  String,  BoundField>  result  =  new  HashSet  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Set  <  String,  BoundField>  result  =  new  HashSet  <  String,  BoundField>();	  ArrayList    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
155	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(i);  [CE]  cannot  find  symbol  i  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(i);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(i);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(boundFields);    	non-compiled	[CE]  cannot  find  symbol  i	14	None	replace
156	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(8);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(8);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(8);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(2);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	51	None	replace
157	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.size()  -  1);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.size()  -  1);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.size()  -  1);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(raw.size());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
158	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.size());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.size());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.size());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(raw.size());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
159	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.size()  +  1);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.size()  +  1);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.size()  +  1);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(raw.size());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
160	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.size()  -  2);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.size()  -  2);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.size()  -  2);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(raw.size());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
161	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.getName());  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.getName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.getName());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(raw.size());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
162	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.getClass());  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.getClass());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.getClass());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(raw.size());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
163	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  field);  [CE]  cannot  find  symbol  field  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  field);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  field	7	None	replace
164	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(type,  context);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(type,  context);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(type,  context);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
165	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]                                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  fieldNames);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	7	None	replace
166	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  jsonAdapterPresent);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  jsonAdapterPresent);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	7	None	replace
167	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  fieldType);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  fieldType);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  fieldType	7	None	replace
168	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  boundFields);  [CE]  cannot  find  symbol  boundFields  [FE]                                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  boundFields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  boundFields);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  boundFields	7	None	replace
169	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  field);  [CE]  cannot  find  symbol  field  [FE]    StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  field);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  field	4	None	replace
170	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]      StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  fieldNames);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	4	None	replace
171	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  boundFields);  [CE]  cannot  find  symbol  boundFields  [FE]        StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  boundFields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  boundFields);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  boundFields	4	None	replace
172	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  null);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  null);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  null);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
173	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]            StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  fieldType);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  fieldType);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  fieldType	4	None	replace
174	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  jsonAdapter);  [CE]  cannot  find  symbol  jsonAdapter  [FE]              StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  jsonAdapter);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  jsonAdapter);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	4	None	replace
175	[BUG]  [BUGGY]  List  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  List  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	List  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();	  ArrayMap    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	36	None	replace
176	[BUG]  [BUGGY]  ObjectMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  ObjectMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ObjectMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();	  ArrayMap    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
177	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw,  type);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw,  type);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    type);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	11	None	replace
178	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  type,  fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  type,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  type,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	11	None	replace
179	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  type,  raw);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Class<CAP#1>,TypeToken<CAP#2>,Class<CAP#3>)  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  type,  raw);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    type);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Class<CAP#1>,TypeToken<CAP#2>,Class<CAP#3>)	11	None	replace
180	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  field);  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  type,  raw,  field);	  Field[]    boundFields    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  field	2	None	replace
181	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  fieldType);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  type,  raw,  fieldType);	  Field[]    boundFields    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  fieldType	2	None	replace
182	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  type,  raw,  fieldNames);	  Field[]    boundFields    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	2	None	replace
183	[BUG]  [BUGGY]  Field[]  resultFields  =  getBoundFields(context,  type,  raw);  [CE]  incompatible  types  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  resultFields  =  getBoundFields(context,  type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  resultFields  =  getBoundFields(context,  type,  raw);	  Field[]    boundFields    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  incompatible  types	2	None	replace
184	[BUG]  [BUGGY]  Field[]  rawFields  =  getBoundFields(context,  type,  raw);  [CE]  incompatible  types  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  rawFields  =  getBoundFields(context,  type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  rawFields  =  getBoundFields(context,  type,  raw);	  Field[]    boundFields    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  incompatible  types	2	None	replace
185	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  jsonAdapter);  [CE]  cannot  find  symbol  jsonAdapter  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  jsonAdapter);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  type,  raw,  jsonAdapter);	  Field[]    boundFields    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	2	None	replace
186	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  raw.type);  [CE]  cannot  find  symbol  type  [FE]                                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  raw.type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  type,  raw,  raw.type);	  Field[]    boundFields    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  type	2	None	replace
187	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type,  context);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type,  context);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type,  context);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
188	[BUG]  [BUGGY]  ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
189	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getType());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getType());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getType());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(context.getType());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
190	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getType(),  raw);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getType(),  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getType(),  raw);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(context.getType());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
191	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  type.getType());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  type.getType());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  type.getType());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(context.getType());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
192	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getType(),  type);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getType(),  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getType(),  type);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(context.getType());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
193	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getValue());  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getValue());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getValue());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(context.getType());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
194	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.getType());  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.getType());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.getType());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(context.getType());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
195	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  fieldTypes);  [CE]  cannot  find  symbol  fieldTypes  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  fieldTypes);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  fieldTypes);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    fieldNames);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	12	None	replace
196	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  serializedName);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  serializedName);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    fieldNames);    	non-compiled	[CE]  cannot  find  symbol  serializedName	12	None	replace
197	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  types);  [CE]  cannot  find  symbol  types  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  types);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  types);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    fieldNames);    	non-compiled	[CE]  cannot  find  symbol  types	12	None	replace
198	[BUG]  [BUGGY]  Field[]  resultFields  =  getBoundFields(context,  type);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  resultFields  =  getBoundFields(context,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  resultFields  =  getBoundFields(context,  type);	  Field[]    boundFields    =    getBoundFields(context,    type);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
199	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  field);  [CE]  cannot  find  symbol  field  [FE]                                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  type,  field);	  Field[]    boundFields    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  field	8	None	replace
200	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  jsonAdapterPresent);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  type,  jsonAdapterPresent);	  Field[]    boundFields    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	8	None	replace
201	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  fieldType);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  type,  fieldType);	  Field[]    boundFields    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  fieldType	8	None	replace
202	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw.getDeclaredFields());  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw.getDeclaredFields());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  type,  raw.getDeclaredFields());	  Field[]    boundFields    =    getBoundFields(context,    type);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
203	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>(type);  [CE]  Map  is  abstract;  cannot  be  instantiated  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>(type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>(type);	  Map    <    String,    BoundField>    result    =    new    java.util.Map    <    String,    BoundField>();    	non-compiled	[CE]  Map  is  abstract;  cannot  be  instantiated	39	None	replace
204	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>(raw);  [CE]  Map  is  abstract;  cannot  be  instantiated  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>(raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>(raw);	  Map    <    String,    BoundField>    result    =    new    java.util.Map    <    String,    BoundField>();    	non-compiled	[CE]  Map  is  abstract;  cannot  be  instantiated	39	None	replace
205	[BUG]  [BUGGY]  java.util.Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>();  [CE]  Map  is  abstract;  cannot  be  instantiated  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  java.util.Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	java.util.Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>();	  Map    <    String,    BoundField>    result    =    new    java.util.Map    <    String,    BoundField>();    	non-compiled	[CE]  Map  is  abstract;  cannot  be  instantiated	39	None	replace
206	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedMap  <  String,  BoundField>(raw);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedMap  <  String,  BoundField>(raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedMap  <  String,  BoundField>(raw);	  Map    <    String,    BoundField>    result    =    new    ArrayMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
207	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(0);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	add	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(0);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(0);    	compilable	  [FE]  ComparisonFailure  	50	1	replace
208	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(0);  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(0);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(0);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(0);    	compilable	  [FE]  ComparisonFailure  	50	1	replace
209	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(1);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	add	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(1);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(0);    	compilable	  [FE]  ComparisonFailure  	50	1	replace
210	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(1);  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(1);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(1);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(0);    	compilable	  [FE]  ComparisonFailure  	50	1	replace
211	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(1);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(1);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(1);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(0);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	50	None	replace
212	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type.getName());  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type.getName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type.getName());	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(0);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	50	None	replace
213	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedList  <  String,  BoundField>(0);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedList  <  String,  BoundField>(0);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedList  <  String,  BoundField>(0);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(0);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
214	[BUG]  [BUGGY]  ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(context);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
215	[BUG]  [BUGGY]  ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw);	  ArrayMap    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
216	[BUG]  [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(raw);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	32	None	replace
217	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>();	  final    Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
218	[BUG]  [BUGGY]  final  HashMap  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  HashMap  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  HashMap  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>();	  final    Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
219	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(type.getName());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(type.getName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(type.getName());	  Map    <    String,    BoundField>    result    =    new    ArrayMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
220	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(raw,  fieldNames);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(raw,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(raw,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    ArrayMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
221	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(boundFields);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(boundFields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(boundFields);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(raw);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	46	None	replace
222	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(fieldNames,  type,  raw);  [CE]  cannot  find  symbol  fieldNames  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(fieldNames,  type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(fieldNames,  type,  raw);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(type,    raw);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	10	None	replace
223	[BUG]  [BUGGY]  Field[]  fields  =  this.fields.getFields();  [CE]  cannot  find  symbol  fields  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  fields  =  this.fields.getFields();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  fields  =  this.fields.getFields();	  Field[]    fields    =    context.getFields();    	non-compiled	[CE]  cannot  find  symbol  fields	1	None	replace
224	[BUG]  [BUGGY]  ArrayMap  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(type);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  ArrayMap  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ArrayMap  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(type);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
225	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw,  context);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw,  context);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw,  context);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
226	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  field,  type);  [CE]  cannot  find  symbol  field  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  field,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  field,  type);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  field	7	None	replace
227	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  row);  [CE]  cannot  find  symbol  row  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  row);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  row);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  row	7	None	replace
228	[BUG]  [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap(fieldNames);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap(fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String>  boundFields  =  Collections.emptyMap(fieldNames);	  Collection    <    String>    boundFields    =    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
229	[BUG]  [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap(result);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap(result);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String>  boundFields  =  Collections.emptyMap(result);	  Collection    <    String>    boundFields    =    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
230	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.values());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.values());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.values());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(raw.size());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
231	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  fieldNamingPolicy);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Class<CAP#1>,FieldNamingStrategy)  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  fieldNamingPolicy);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  fieldNamingPolicy);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    fieldNames);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Class<CAP#1>,FieldNamingStrategy)	12	None	replace
232	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  row);  [CE]  cannot  find  symbol  row  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  row);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  row);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    fieldNames);    	non-compiled	[CE]  cannot  find  symbol  row	12	None	replace
233	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.toName());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.toName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.toName());	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
234	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type,  raw.getName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type,  raw.getName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type,  raw.getName());	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
235	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getTypeToken());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getTypeToken());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getTypeToken());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
236	[BUG]  [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(0);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(0);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(0);	  ArrayList    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	30	None	replace
237	[BUG]  [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(2);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(2);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(2);	  ArrayList    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	30	None	replace
238	[BUG]  [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(1);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(1);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(1);	  ArrayList    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	30	None	replace
239	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(collectionNames);  [CE]  cannot  find  symbol  collectionNames  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(collectionNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(collectionNames);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  collectionNames	49	None	replace
240	[BUG]  [BUGGY]  Collection  <  Object,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  Object,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  Object,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();	  Collection    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
241	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  field,  type);  [CE]  cannot  find  symbol  field  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  field,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  field,  type);	  Field[]    boundFields    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  field	8	None	replace
242	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  fieldType,  type);  [CE]  cannot  find  symbol  fieldType  [FE]                                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  fieldType,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  fieldType,  type);	  Field[]    boundFields    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  fieldType	8	None	replace
243	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]                                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  type,  fieldNames);	  Field[]    boundFields    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	8	None	replace
244	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(rows);  [CE]  cannot  find  symbol  rows  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(rows);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(rows);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(boundFields);    	non-compiled	[CE]  cannot  find  symbol  rows	14	None	replace
245	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  field.getType());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  field.getType());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  field.getType());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(context.getType());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
246	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  raw.getType());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  raw.getType());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context,  raw.getType());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(context.getType());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
247	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  field);  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  field);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  field	11	None	replace
248	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context.getTypeToken());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context.getTypeToken());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context.getTypeToken());	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
249	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(2);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(2);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(2);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(0);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	50	None	replace
250	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  previous);  [CE]  cannot  find  symbol  previous  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  previous);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  previous);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    boundFields);    	non-compiled	[CE]  cannot  find  symbol  previous	15	None	replace
251	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  context);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Class<CAP#1>,Gson)  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  context);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  context);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    boundFields);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Class<CAP#1>,Gson)	15	None	replace
252	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  fieldNamingPolicy);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  fieldNamingPolicy);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  type,  raw,  fieldNamingPolicy);	  Field[]    boundFields    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
253	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  jsonAdapterPresent);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  type,  raw,  jsonAdapterPresent);	  Field[]    boundFields    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	2	None	replace
254	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames,  fieldNamingPolicy);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames,  fieldNamingPolicy);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames,  fieldNamingPolicy);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	41	None	replace
255	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(typeNames);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(typeNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(typeNames);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	41	None	replace
256	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames.length);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames.length);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames.length);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
257	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(typeNames);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(typeNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(typeNames);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
258	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type,  raw.getName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type,  raw.getName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type,  raw.getName());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
259	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getName(),  field);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getName(),  field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getName(),  field);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
260	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(2);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(2);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(2);	  final    Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	31	None	replace
261	[BUG]  [BUGGY]  java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw);	  java.util.ArrayMap    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
262	[BUG]  [BUGGY]  java.util.ObjectMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  java.util.ObjectMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	java.util.ObjectMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();	  java.util.ArrayMap    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
263	[BUG]  [BUGGY]  Field[]  fields  =  getFields(context,  type.getType());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  fields  =  getFields(context,  type.getType());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  fields  =  getFields(context,  type.getType());	  Field[]    fields    =    type.getFields();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
264	[BUG]  [BUGGY]  Field[]  fields  =  scope.getFields();  [CE]  cannot  find  symbol  scope  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  fields  =  scope.getFields();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  fields  =  scope.getFields();	  Field[]    fields    =    type.getFields();    	non-compiled	[CE]  cannot  find  symbol  scope	5	None	replace
265	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  ArrayList  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]    StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  ArrayList  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    ArrayList  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);	  	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	3	None	add
266	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  Map  <  String,  BoundField>  result  =  getBoundFields(context,  field,  raw);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  Map  <  String,  BoundField>  result  =  getBoundFields(context,  field,  raw);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    Map  <  String,  BoundField>  result  =  getBoundFields(context,  field,  raw);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	3	None	add
267	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(1);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(1);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(1);	  final    Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	31	None	replace
268	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  fields);  [CE]  cannot  find  symbol  fields  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  fields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw,  fields);	  Map    <    String,    BoundField>    result    =    getBounds(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  fields	42	None	replace
269	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  fields);  [CE]  cannot  find  symbol  fields  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw,  fields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  type,  raw,  fields);	  Field[]    boundFields    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  fields	2	None	replace
270	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.restrictByNotNullOrUndefined());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.restrictByNotNullOrUndefined());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.restrictByNotNullOrUndefined());	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
271	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields,  fieldType);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields,  fieldType);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields,  fieldType);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(fields);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	33	None	replace
272	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>(context);  [CE]  Map  is  abstract;  cannot  be  instantiated  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>(context);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>(context);	  Map    <    String,    BoundField>    result    =    new    java.util.Map    <    String,    BoundField>();    	non-compiled	[CE]  Map  is  abstract;  cannot  be  instantiated	39	None	replace
273	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw.length);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw.length);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw.length);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(raw);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	46	None	replace
274	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type.toString());  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type.toString());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type.toString());	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>(type);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	19	None	replace
275	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.getFields();  [CE]  cannot  find  symbol  fieldNames  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  fields  =  fieldNames.getFields();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  fields  =  fieldNames.getFields();	  Field[]    fields    =    type.getFields();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	5	None	replace
276	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  [CE]  cannot  find  symbol  fieldType  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  fields  =  fieldType.getFields();  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  fields  =  fieldType.getFields();	  Field[]    fields    =    type.getFields();    	non-compiled	[CE]  cannot  find  symbol  fieldType	5	None	replace
277	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(fieldNames);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(fieldNames);	  Map    <    String,    BoundField>    result    =    new    ArrayMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
278	[BUG]  [BUGGY]  Collection  <  String>  boundFields  =  Collections.unmodifiableMap(context,  fieldNames);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String>  boundFields  =  Collections.unmodifiableMap(context,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String>  boundFields  =  Collections.unmodifiableMap(context,  fieldNames);	  Collection    <    String>    boundFields    =    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
279	[BUG]  [BUGGY]  Collection  <  String>  boundFields  =  Collections.unmodifiableMap(context);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String>  boundFields  =  Collections.unmodifiableMap(context);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String>  boundFields  =  Collections.unmodifiableMap(context);	  Collection    <    String>    boundFields    =    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
280	[BUG]  [BUGGY]  Collection  <  String>  boundFields  =  Collections.synchronizedMap(fieldNames);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String>  boundFields  =  Collections.synchronizedMap(fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String>  boundFields  =  Collections.synchronizedMap(fieldNames);	  Collection    <    String>    boundFields    =    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
281	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  method);  [CE]  cannot  find  symbol  method  [FE]                                ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  method);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  method);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    boundFields);    	non-compiled	[CE]  cannot  find  symbol  method	15	None	replace
282	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  this.fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  this.fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  this.fieldNames);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    boundFields);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	15	None	replace
283	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  this.fields);  [CE]  cannot  find  symbol  fields  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  this.fields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  this.fields);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    boundFields);    	non-compiled	[CE]  cannot  find  symbol  fields	15	None	replace
284	[BUG]  [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(2);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(2);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(2);	  Collection    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
285	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(context.getTypeToken());  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(context.getTypeToken());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(context.getTypeToken());	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(type);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	29	None	replace
286	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(context);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(context);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(context);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>(type);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	29	None	replace
287	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(fieldNames);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(fieldNames);	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
288	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  fieldType);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  fieldType);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context,  fieldType);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(context);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
289	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(context);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Gson)  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(context);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(context);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(context);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Gson)	24	None	replace
290	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getRawClass());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getRawClass());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getRawClass());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
291	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(field.getName());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(field.getName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(field.getName());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
292	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(result);  [CE]  variable  result  might  not  have  been  initialized  [FE]                              ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(result);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(result);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(boundFields);    	non-compiled	[CE]  variable  result  might  not  have  been  initialized	14	None	replace
293	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  fieldNames,  type);  [CE]  cannot  find  symbol  fieldNames  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  fieldNames,  type);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  fieldNames,  type);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	11	None	replace
294	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  type,  field);  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  type,  field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  type,  field);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw,    type);    	non-compiled	[CE]  cannot  find  symbol  field	11	None	replace
295	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  fields);  [CE]  cannot  find  symbol  fields  [FE]    StackOverflowError    [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  fields);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw,  fields);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type,    raw);    	non-compiled	[CE]  cannot  find  symbol  fields	4	None	replace
296	[BUG]  [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw.size());  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                        ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw.size());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw.size());	  ArrayList    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	30	None	replace
297	[BUG]  [BUGGY]  Field[]  resultFields  =  getBoundFields(context,  type,  fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]                                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  resultFields  =  getBoundFields(context,  type,  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  resultFields  =  getBoundFields(context,  type,  fieldNames);	  Field[]    boundFields    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	8	None	replace
298	[BUG]  [BUGGY]  Field[]  resultFields  =  getBoundFields(context,  type,  field);  [CE]  cannot  find  symbol  field  [FE]                                      ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Field[]  resultFields  =  getBoundFields(context,  type,  field);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  resultFields  =  getBoundFields(context,  type,  field);	  Field[]    boundFields    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  field	8	None	replace
299	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  boundField);  [CE]  cannot  find  symbol  boundField  [FE]                                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  boundField);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  boundField);	  Map    <    String,    BoundField>    result    =    getBoundFields(context,    type);    	non-compiled	[CE]  cannot  find  symbol  boundField	7	None	replace
300	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(typeNames);  [CE]  cannot  find  symbol  typeNames  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(typeNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(typeNames);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(fieldNames);    	non-compiled	[CE]  cannot  find  symbol  typeNames	49	None	replace
301	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context.getTypeToken());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context.getTypeToken());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context.getTypeToken());	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>(type);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
302	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getRawClass());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getRawClass());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getRawClass());	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
303	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(field.getName());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(field.getName());  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(field.getName());	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>(type.getName());    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
304	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getType(),  fieldNames);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {      [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getType(),  fieldNames);  [BUGGY]      if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getType(),  fieldNames);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>(context.getType());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
