bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Field[]  fields  =  context.getFields();  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  fields  =  context.getFields();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
2	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw);  [CE]  incompatible  types  [FE]                      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type,  raw);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  type,  raw);	      	non-compiled	[CE]  incompatible  types	7	None	replace
3	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	add	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);	      	compilable	  [FE]  StackOverflowError  	7	9	replace
4	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  [FE]  StackOverflowError  [FE]                        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type,  raw);	      	compilable	  [FE]  StackOverflowError  	7	9	replace
5	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Field[]  fields  =  type.getFields();  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  fields  =  type.getFields();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
6	[BUG]  [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Collection  <  String>  boundFields  =  Collections.emptyMap();  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String>  boundFields  =  Collections.emptyMap();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
7	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  getBoundFields(context,  type);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBoundFields(context,  type);	      	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
8	[BUG]  [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type);  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Field[]  boundFields  =  getBoundFields(context,  type);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Field[]  boundFields  =  getBoundFields(context,  type);	      	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
9	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(TypeToken<CAP#1>)  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(TypeToken<CAP#1>)	5	None	replace
10	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  raw);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(TypeToken<CAP#1>,Class<CAP#2>)  [FE]                  ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  raw);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(type,  raw);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(TypeToken<CAP#1>,Class<CAP#2>)	5	None	replace
11	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  type);  [CE]  no  suitable  constructor  found  for  LinkedHashMap(Class<CAP#1>,TypeToken<CAP#2>)  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  type);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  type);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  no  suitable  constructor  found  for  LinkedHashMap(Class<CAP#1>,TypeToken<CAP#2>)	5	None	replace
12	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]                      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  fieldNames);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  fieldNames);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	5	None	replace
13	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(raw);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(raw);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayMap  <  String,  BoundField>(raw);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
14	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(boundFields);  [CE]  cannot  find  symbol  boundFields  [FE]                          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(boundFields);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(boundFields);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol  boundFields	5	None	replace
15	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  boundFields);  [CE]  cannot  find  symbol  boundFields  [FE]                            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  boundFields);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(raw,  boundFields);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol  boundFields	5	None	replace
16	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedMap  <  String,  BoundField>();  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedMap  <  String,  BoundField>();	  Map    <    String,    BoundField>    result    =    new    ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
17	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fieldNames);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	1	None	replace
18	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(fields);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	1	None	replace
19	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(type);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	1	None	replace
20	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
21	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
22	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getName());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getName());  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(type.getName());	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
23	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>();  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>();	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
24	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context);	  Map    <    String,    BoundField>    result    =    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
25	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type);	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
26	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(raw);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(raw);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(raw);	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
27	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(context);	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
28	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getName());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getName());  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  TreeMap  <  String,  BoundField>(type.getName());	  Map    <    String,    BoundField>    result    =    new    TreeMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
29	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                  ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(type);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	6	None	replace
30	[BUG]  [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>();  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ArrayList  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>();	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	6	None	replace
31	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>();  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>();  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>();	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	6	None	replace
32	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(raw);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(raw);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(raw);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	6	None	replace
33	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fields);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	6	None	replace
34	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(0);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(0);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(0);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	6	None	replace
35	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(type);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
36	[BUG]  [BUGGY]  ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
37	[BUG]  [BUGGY]  java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	java.util.ArrayMap  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
38	[BUG]  [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	final  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
39	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>();  [CE]  Map  is  abstract;  cannot  be  instantiated  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>();  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.Map  <  String,  BoundField>();	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  Map  is  abstract;  cannot  be  instantiated	8	None	replace
40	[BUG]  [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Collection  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>();	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
41	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                  ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(fieldNames);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	6	None	replace
42	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  getBounds(context,  type,  raw);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
43	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(fieldNames);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
44	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getType());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getType());  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(context.getType());	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
45	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.size());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.size());  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  HashMap  <  String,  BoundField>(raw.size());	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
46	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(raw);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	5	None	replace
47	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(context);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
48	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayMap  <  String,  BoundField>(raw);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
49	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]                ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(fieldNames);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  LinkedHashMap  <  String,  BoundField>(fieldNames);	  Map    <    String,    BoundField>    result    =    new    LinkedHashMap    <    String,    BoundField>(raw);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	5	None	replace
50	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(0);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]        ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(0);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  ArrayList  <  String,  BoundField>(0);	  Map    <    String,    BoundField>    result    =    new    ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	1	None	replace
51	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(2);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                  ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(2);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(2);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	6	None	replace
52	[BUG]  [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(1);  [CE]  wrong  number  of  type  arguments;  required  1  [FE]                    ComparisonFailure    [CONTEXT]    private  Map<String,  BoundField>  getBoundFields(Gson  context,  TypeToken<?>  type,  Class<?>  raw)  {    [BUGGY]  Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(1);  [BUGGY]    if  (raw.isInterface())  {  return  result;  }  Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	142	142	1	replace	Map  <  String,  BoundField>  result  =  new  java.util.ArrayList  <  String,  BoundField>(1);	  Map    <    String,    BoundField>    result    =    new    java.util.ArrayList    <    String,    BoundField>();    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	6	None	replace
