bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  field.setAccessible(false,  true);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]        ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false,  true);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false,  true);	  field.setAccessible(false,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	9	None	replace
2	[BUG]  [BUGGY]  field.setAccessible(false,  false,  deserialize);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]          ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false,  false,  deserialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false,  false,  deserialize);	  field.setAccessible(false,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	9	None	replace
3	[BUG]  [BUGGY]  field.setAccessible(false,  false,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]            ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false,  false,  jsonAdapterPresent);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false,  false,  jsonAdapterPresent);	  field.setAccessible(false,    false);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	9	None	replace
4	[BUG]  [BUGGY]  field.setAccessible(false,  false,  raw);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>)  [FE]              ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false,  false,  raw);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false,  false,  raw);	  field.setAccessible(false,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>)	9	None	replace
5	[BUG]  [BUGGY]  field.setAccessible(false,  deserialize,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]                ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false,  deserialize,  false);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false,  deserialize,  false);	  field.setAccessible(false,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	9	None	replace
6	[BUG]  [BUGGY]  field.setAccessible(false,  false,  serialize);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]                  ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false,  false,  serialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false,  false,  serialize);	  field.setAccessible(false,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	9	None	replace
7	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false);  field.setAccessible(false);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	add	field.setAccessible(false);    field.setAccessible(false);	  	compilable	  [FE]  ComparisonFailure  	1	1	add
8	[BUG]  [BUGGY]  field.setAccessible(false);  field.setAccessible(false);  [FE]  ComparisonFailure  [FE]    AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false);  field.setAccessible(false);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false);    field.setAccessible(false);	  	compilable	  [FE]  ComparisonFailure  	1	1	add
9	[BUG]  [BUGGY]  field.setAccessible(false);  Field  field.setAccessible(false);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false);  Field  field.setAccessible(false);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false);    Field  field.setAccessible(false);	  	non-compiled	[CE]  ';'  expected	1	None	add
10	[BUG]  [BUGGY]  field.setAccessible(false);  Field[]  fields  =  field.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false);  Field[]  fields  =  field.getDeclaredFields();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false);    Field[]  fields  =  field.getDeclaredFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
11	[BUG]  [BUGGY]  field.setAccessible(false);  Field  field  =  getField(field.getGenericType());  [CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false);  Field  field  =  getField(field.getGenericType());  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false);    Field  field  =  getField(field.getGenericType());	  	non-compiled	[CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
12	[BUG]  [BUGGY]  field.setAccessible(false);  Field.setAccessible(false);  [CE]  non-static  method  setAccessible(boolean)  cannot  be  referenced  from  a  static  context  [FE]            AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false);  Field.setAccessible(false);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false);    Field.setAccessible(false);	  	non-compiled	[CE]  non-static  method  setAccessible(boolean)  cannot  be  referenced  from  a  static  context	1	None	add
13	[BUG]  [BUGGY]  field.setAccessible(false);  Field  field  =  context.getField(field.getGenericType());  [CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]              AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false);  Field  field  =  context.getField(field.getGenericType());  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false);    Field  field  =  context.getField(field.getGenericType());	  	non-compiled	[CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
14	[BUG]  [BUGGY]  field.setAccessible(false);  Field  field  =  getField(field.getType());  [CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false);  Field  field  =  getField(field.getType());  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false);    Field  field  =  getField(field.getType());	  	non-compiled	[CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
15	[BUG]  [BUGGY]  field.setAccessible(false);  Field  field  =  context.getField(field.getType());  [CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false);  Field  field  =  context.getField(field.getType());  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false);    Field  field  =  context.getField(field.getType());	  	non-compiled	[CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
16	[BUG]  [BUGGY]  field.setAccessible(true,  serialize,  deserialize);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]            ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  serialize,  deserialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  serialize,  deserialize);	  field.setAccessible(true,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	4	None	replace
17	[BUG]  [BUGGY]  field.setAccessible(false,  serialize,  deserialize);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]              ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false,  serialize,  deserialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false,  serialize,  deserialize);	  field.setAccessible(true,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	4	None	replace
18	[BUG]  [BUGGY]  field.setAccessible(true,  serialize);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]                ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  serialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  serialize);	  field.setAccessible(true,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	4	None	replace
19	[BUG]  [BUGGY]  field.setAccessible(true,  false,  deserialize);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]                  ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  false,  deserialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  false,  deserialize);	  field.setAccessible(true,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	4	None	replace
20	[BUG]  [BUGGY]  field.setAccessible(true,  true,  deserialize);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]                    ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  true,  deserialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  true,  deserialize);	  field.setAccessible(true,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	4	None	replace
21	[BUG]  [BUGGY]  field.setAccessible(true,  deserialize,  serialize);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]                      ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  deserialize,  serialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  deserialize,  serialize);	  field.setAccessible(true,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	4	None	replace
22	[BUG]  [BUGGY]  Field[]  raw  =(Field[])fields.toArray(new  Field[fields.size()  ]);  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  raw  =(Field[])fields.toArray(new  Field[fields.size()  ]);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  raw  =(Field[])fields.toArray(new  Field[fields.size()  ]);	  field.setAccessible(false);    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	2	None	replace
23	[BUG]  [BUGGY]  Field[]  raw  =  new  Field[field.getGenericType().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass()  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  raw  =  new  Field[field.getGenericType().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass()  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  raw  =  new  Field[field.getGenericType().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass()	  field.setAccessible(false);    	non-compiled	[CE]  ']'  expected	2	None	replace
24	[BUG]  [BUGGY]  Field[]  raw  =  new  Field[field.getGenericType().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass());  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  raw  =  new  Field[field.getGenericType().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass());  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  raw  =  new  Field[field.getGenericType().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass());	  field.setAccessible(false);    	non-compiled	[CE]  ']'  expected	2	None	replace
25	[BUG]  [BUGGY]  Field[]  raw  =  new  Field[field.getGenericType().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  raw  =  new  Field[field.getGenericType().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  raw  =  new  Field[field.getGenericType().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass	  field.setAccessible(false);    	non-compiled	[CE]  ']'  expected	2	None	replace
26	[BUG]  [BUGGY]  Field[]  raw  =  new  Field[field.getGenericType().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass());  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  raw  =  new  Field[field.getGenericType().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass());  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  raw  =  new  Field[field.getGenericType().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass().getRawClass());	  field.setAccessible(false);    	non-compiled	[CE]  ']'  expected	2	None	replace
27	[BUG]  [BUGGY]  field.setAccessible(true,  false,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]          ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  false,  jsonAdapterPresent);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  false,  jsonAdapterPresent);	  field.setAccessible(true,    false);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	3	None	replace
28	[BUG]  [BUGGY]  field.setAccessible(true,  false,  raw);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>)  [FE]            ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  false,  raw);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  false,  raw);	  field.setAccessible(true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,Class<CAP#1>)	3	None	replace
29	[BUG]  [BUGGY]  field.setAccessible(true,  false,  serialize);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]              ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  false,  serialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  false,  serialize);	  field.setAccessible(true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	3	None	replace
30	[BUG]  [BUGGY]  field.setAccessible(true,  false,  null);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,<null>)  [FE]                ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  false,  null);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  false,  null);	  field.setAccessible(true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,<null>)	3	None	replace
31	[BUG]  [BUGGY]  field.setAccessible(true,  null,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean)  [FE]                  ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  null,  false);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  null,  false);	  field.setAccessible(true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean)	3	None	replace
32	[BUG]  [BUGGY]  Type[]  raw  =  type.getRawTypes();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Type[]  raw  =  type.getRawTypes();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Type[]  raw  =  type.getRawTypes();	      	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	replace
33	[BUG]  [BUGGY]  Field[]  raw  =  field.getRawTypes();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  raw  =  field.getRawTypes();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  raw  =  field.getRawTypes();	      	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	replace
34	[BUG]  [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  fields  =  field.getDeclaredFields();	      	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	replace
35	[BUG]  [BUGGY]  Type[]  raw  =  field.getRawTypes();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Type[]  raw  =  field.getRawTypes();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Type[]  raw  =  field.getRawTypes();	      	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	8	None	replace
36	[BUG]  [BUGGY]  Field[]  rawFields  =  field.getRawFields();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  rawFields  =  field.getRawFields();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  rawFields  =  field.getRawFields();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
37	[BUG]  [BUGGY]  Constructor  constructor  =  context.getConstructor();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Constructor  constructor  =  context.getConstructor();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Constructor  constructor  =  context.getConstructor();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
38	[BUG]  [BUGGY]  Field[]  raw  =  fields.getRawClasses();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  raw  =  fields.getRawClasses();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  raw  =  fields.getRawClasses();	  Field[]    raw    =    field.getRawClasses();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	replace
39	[BUG]  [BUGGY]  Field[]  raw  =  field.getGenericClasses();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  raw  =  field.getGenericClasses();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  raw  =  field.getGenericClasses();	  Field[]    raw    =    field.getRawClasses();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	replace
40	[BUG]  [BUGGY]  Field[]  raw  =  field.getGenericFields();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                    ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  raw  =  field.getGenericFields();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  raw  =  field.getGenericFields();	  Field[]    raw    =    field.getRawClasses();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	replace
41	[BUG]  [BUGGY]  Field[]  raw  =  field.getDeclaredFields();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                      ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  raw  =  field.getDeclaredFields();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  raw  =  field.getDeclaredFields();	  Field[]    raw    =    field.getRawClasses();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	replace
42	[BUG]  [BUGGY]  Field[]  raw  =  field.getGenericValues();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  raw  =  field.getGenericValues();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  raw  =  field.getGenericValues();	  Field[]    raw    =    field.getRawClasses();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	replace
43	[BUG]  [BUGGY]  Field[]  raw  =  field.getGenericType();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  raw  =  field.getGenericType();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  raw  =  field.getGenericType();	  Field[]    raw    =    field.getRawClasses();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	replace
44	[BUG]  [BUGGY]  field.setAccessible(true,  true,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]              ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  true,  jsonAdapterPresent);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  true,  jsonAdapterPresent);	  field.setAccessible(true,    true);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	5	None	replace
45	[BUG]  [BUGGY]  field.setAccessible(true,  true,  serialize);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]                ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  true,  serialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  true,  serialize);	  field.setAccessible(true,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	5	None	replace
46	[BUG]  [BUGGY]  field.setAccessible(true,  true,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]                  ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  true,  false);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  true,  false);	  field.setAccessible(true,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	5	None	replace
47	[BUG]  [BUGGY]  field.setAccessible(false,  true,  deserialize);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]                    ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false,  true,  deserialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false,  true,  deserialize);	  field.setAccessible(true,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	5	None	replace
48	[BUG]  [BUGGY]      Field[]  raw  =  field.getRawClass();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]      Field[]  raw  =  field.getRawClass();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	        Field[]  raw  =  field.getRawClass();	  	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	add
49	[BUG]  [BUGGY]  field.setAccessible(true,  null,  true);  [CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean)  [FE]              ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  null,  true);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  null,  true);	  field.setAccessible(true,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,<null>,boolean)	5	None	replace
50	[BUG]  [BUGGY]  field.setAccessible(true,  deserialize,  true);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]                ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  deserialize,  true);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  deserialize,  true);	  field.setAccessible(true,    true);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	5	None	replace
51	[BUG]  [BUGGY]      Field[]  fields  =  raw.getDeclaredFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]      Field[]  fields  =  raw.getDeclaredFields();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	        Field[]  fields  =  raw.getDeclaredFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	add
52	[BUG]  [BUGGY]      Field[]  fields  =  raw.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]      Field[]  fields  =  raw.getFields();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	        Field[]  fields  =  raw.getFields();	  	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	add
53	[BUG]  [BUGGY]      Type[]  types  =  type.getTypes();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]      Type[]  types  =  type.getTypes();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	        Type[]  types  =  type.getTypes();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
54	[BUG]  [BUGGY]      Type[]  types  =  field.getTypes();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]      Type[]  types  =  field.getTypes();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	        Type[]  types  =  field.getTypes();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
55	[BUG]  [BUGGY]  field.setAccessible(false,  null);  [CE]  no  suitable  method  found  for  setAccessible(boolean,<null>)  [FE]        ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false,  null);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false,  null);	  field.setAccessible(false,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,<null>)	9	None	replace
56	[BUG]  [BUGGY]  field.setAccessible(false,  deserialize);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]    AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false,  deserialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false,  deserialize);	  field.setAccessible(false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	2	None	replace
57	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  fields  =  field.getFields();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  fields  =  field.getFields();	  field.setAccessible(false);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	2	None	replace
58	[BUG]  [BUGGY]  field.setAccessible(serialize,  deserialize);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]            ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(serialize,  deserialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(serialize,  deserialize);	  field.setAccessible(true,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	4	None	replace
59	[BUG]  [BUGGY]  field.setAccessible(false,  serialize);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)  [FE]              ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false,  serialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false,  serialize);	  field.setAccessible(true,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean)	4	None	replace
60	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false);  field.setAccessible(true);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	add	field.setAccessible(false);    field.setAccessible(true);	  	compilable	  [FE]  ComparisonFailure  	1	1	add
61	[BUG]  [BUGGY]  field.setAccessible(false);  field.setAccessible(true);  [FE]  ComparisonFailure  [FE]    AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false);  field.setAccessible(true);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false);    field.setAccessible(true);	  	compilable	  [FE]  ComparisonFailure  	1	1	add
62	[BUG]  [BUGGY]  field.setAccessible(false);  Field  field  =  new  Field(field.getGenericType());  [CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false);  Field  field  =  new  Field(field.getGenericType());  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false);    Field  field  =  new  Field(field.getGenericType());	  	non-compiled	[CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
63	[BUG]  [BUGGY]      Constructor  <?>  constructor  =  context.getConstructor();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]      Constructor  <?>  constructor  =  context.getConstructor();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	        Constructor  <?>  constructor  =  context.getConstructor();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
64	[BUG]  [BUGGY]      Field[]  fieldNames  =  field.getGenericFields();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]      Field[]  fieldNames  =  field.getGenericFields();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	        Field[]  fieldNames  =  field.getGenericFields();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
65	[BUG]  [BUGGY]      Constructor  <?>  constructor  =  field.getConstructor();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]      Constructor  <?>  constructor  =  field.getConstructor();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	        Constructor  <?>  constructor  =  field.getConstructor();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
66	[BUG]  [BUGGY]      Class  <?>  raw  =  field.getRawClass();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]      Class  <?>  raw  =  field.getRawClass();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	        Class  <?>  raw  =  field.getRawClass();	  	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	7	None	add
67	[BUG]  [BUGGY]      Constructor  <?>  constructor  =  context.getConstructor(field);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]      Constructor  <?>  constructor  =  context.getConstructor(field);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	        Constructor  <?>  constructor  =  context.getConstructor(field);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
68	[BUG]  [BUGGY]  Field[]  raw  =  field.getGenericRawClasses();  [CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  Field[]  raw  =  field.getGenericRawClasses();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	Field[]  raw  =  field.getGenericRawClasses();	  Field[]    raw    =    field.getRawClasses();    	non-compiled	[CE]  variable  raw  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	6	None	replace
69	[BUG]  [BUGGY]  field.setAccessible(true,  deserialize,  false);  [CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)  [FE]          ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(true,  deserialize,  false);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(true,  deserialize,  false);	  field.setAccessible(true,    false);    	non-compiled	[CE]  no  suitable  method  found  for  setAccessible(boolean,boolean,boolean)	3	None	replace
70	[BUG]  [BUGGY]  FieldUtils.checkState(field.getGenericType()!=  deserialize);  [CE]  incomparable  types:  Type  and  boolean  [FE]    AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  FieldUtils.checkState(field.getGenericType()!=  deserialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	FieldUtils.checkState(field.getGenericType()!=  deserialize);	  field.setAccessible(false);    	non-compiled	[CE]  incomparable  types:  Type  and  boolean	2	None	replace
71	[BUG]  [BUGGY]  FieldUtils.checkState(field.getGenericType()  ==  null);  [CE]  cannot  find  symbol  FieldUtils  [FE]      AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  FieldUtils.checkState(field.getGenericType()  ==  null);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	FieldUtils.checkState(field.getGenericType()  ==  null);	  field.setAccessible(false);    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	2	None	replace
72	[BUG]  [BUGGY]  FieldUtils.checkState(field.getGenericType()  ==  deserialize);  [CE]  incomparable  types:  Type  and  boolean  [FE]        AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  FieldUtils.checkState(field.getGenericType()  ==  deserialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	FieldUtils.checkState(field.getGenericType()  ==  deserialize);	  field.setAccessible(false);    	non-compiled	[CE]  incomparable  types:  Type  and  boolean	2	None	replace
73	[BUG]  [BUGGY]  FieldUtils.setAccessible(field,  deserialize);  [CE]  cannot  find  symbol  FieldUtils  [FE]            ComparisonFailure    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  FieldUtils.setAccessible(field,  deserialize);  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	FieldUtils.setAccessible(field,  deserialize);	  field.setAccessible(true,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	4	None	replace
74	[BUG]  [BUGGY]  field.setAccessible(false);  Field  field  =  new  Field(field.getGenericType(),  field.getGenericType());  [CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false);  Field  field  =  new  Field(field.getGenericType(),  field.getGenericType());  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false);    Field  field  =  new  Field(field.getGenericType(),  field.getGenericType());	  	non-compiled	[CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
75	[BUG]  [BUGGY]  field.setAccessible(false);  Field  field  =  context.getField(field.getGenericType()).getDeclaredFields();  [CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]      AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false);  Field  field  =  context.getField(field.getGenericType()).getDeclaredFields();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false);    Field  field  =  context.getField(field.getGenericType()).getDeclaredFields();	  	non-compiled	[CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
76	[BUG]  [BUGGY]  field.setAccessible(false);  Field  field  =  getField(field.getGenericType()).getDeclaredFields();  [CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        AssertionError    [CONTEXT]    Type  declaredType  =  type.getType();  while  (raw  !=  Object.class)  {  Field[]  fields  =  raw.getDeclaredFields();  for  (Field  field  :  fields)  {  boolean  serialize  =  excludeField(field,  true);  boolean  deserialize  =  excludeField(field,  false);  if  (!serialize  &&  !deserialize)  {  continue;  }    [BUGGY]  field.setAccessible(false);  Field  field  =  getField(field.getGenericType()).getDeclaredFields();  [BUGGY]    Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	156	156	1	replace	field.setAccessible(false);    Field  field  =  getField(field.getGenericType()).getDeclaredFields();	  	non-compiled	[CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	1	None	add
